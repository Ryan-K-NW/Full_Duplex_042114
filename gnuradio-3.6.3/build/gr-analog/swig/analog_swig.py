# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_analog_swig', [dirname(__file__)])
        except ImportError:
            import _analog_swig
            return _analog_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_analog_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _analog_swig = swig_import_helper()
    del swig_import_helper
else:
    import _analog_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _analog_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _analog_swig.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _analog_swig.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _analog_swig.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _analog_swig.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _analog_swig.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _analog_swig.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _analog_swig.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _analog_swig.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _analog_swig.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _analog_swig.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _analog_swig.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _analog_swig.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _analog_swig.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _analog_swig.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _analog_swig.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _analog_swig.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _analog_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class cpm(object):
    """Proxy of C++ gr::analog::cpm class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    LRC = _analog_swig.cpm_LRC
    LSRC = _analog_swig.cpm_LSRC
    LREC = _analog_swig.cpm_LREC
    TFM = _analog_swig.cpm_TFM
    GAUSSIAN = _analog_swig.cpm_GAUSSIAN
    GENERIC = _analog_swig.cpm_GENERIC
    def phase_response(*args, **kwargs):
        """
        phase_response(cpm_type type, unsigned int samples_per_sym, unsigned int L, 
            double beta = 0.3) -> __dummy_4__
        """
        return _analog_swig.cpm_phase_response(*args, **kwargs)

    phase_response = staticmethod(phase_response)
    def __init__(self): 
        """__init__(self) -> cpm"""
        this = _analog_swig.new_cpm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _analog_swig.delete_cpm
    __del__ = lambda self : None;
cpm_swigregister = _analog_swig.cpm_swigregister
cpm_swigregister(cpm)

def cpm_phase_response(*args, **kwargs):
  """
    cpm_phase_response(cpm_type type, unsigned int samples_per_sym, unsigned int L, 
        double beta = 0.3) -> __dummy_4__
    """
  return _analog_swig.cpm_phase_response(*args, **kwargs)

GR_UNIFORM = _analog_swig.GR_UNIFORM
GR_GAUSSIAN = _analog_swig.GR_GAUSSIAN
GR_LAPLACIAN = _analog_swig.GR_LAPLACIAN
GR_IMPULSE = _analog_swig.GR_IMPULSE
class agc_cc(object):
    """Proxy of C++ gr::analog::agc_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(rate = 1e-4, reference = 1.0, gain = 1.0, max_gain = 0.0):
        """
        make(float rate = 1e-4, float reference = 1.0, float gain = 1.0, 
            float max_gain = 0.0) -> sptr
        """
        return _analog_swig.agc_cc_make(rate, reference, gain, max_gain)

    make = staticmethod(make)
    def rate(self):
        """rate(self) -> float"""
        return _analog_swig.agc_cc_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _analog_swig.agc_cc_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _analog_swig.agc_cc_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _analog_swig.agc_cc_max_gain(self)

    def set_rate(self, *args, **kwargs):
        """set_rate(self, float rate)"""
        return _analog_swig.agc_cc_set_rate(self, *args, **kwargs)

    def set_reference(self, *args, **kwargs):
        """set_reference(self, float reference)"""
        return _analog_swig.agc_cc_set_reference(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _analog_swig.agc_cc_set_gain(self, *args, **kwargs)

    def set_max_gain(self, *args, **kwargs):
        """set_max_gain(self, float max_gain)"""
        return _analog_swig.agc_cc_set_max_gain(self, *args, **kwargs)

    __swig_destroy__ = _analog_swig.delete_agc_cc
    __del__ = lambda self : None;
agc_cc_swigregister = _analog_swig.agc_cc_swigregister
agc_cc_swigregister(agc_cc)

def agc_cc_make(rate = 1e-4, reference = 1.0, gain = 1.0, max_gain = 0.0):
  """
    agc_cc_make(float rate = 1e-4, float reference = 1.0, float gain = 1.0, 
        float max_gain = 0.0) -> sptr
    """
  return _analog_swig.agc_cc_make(rate, reference, gain, max_gain)

class agc_ff(object):
    """Proxy of C++ gr::analog::agc_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(rate = 1e-4, reference = 1.0, gain = 1.0, max_gain = 0.0):
        """
        make(float rate = 1e-4, float reference = 1.0, float gain = 1.0, 
            float max_gain = 0.0) -> sptr
        """
        return _analog_swig.agc_ff_make(rate, reference, gain, max_gain)

    make = staticmethod(make)
    def rate(self):
        """rate(self) -> float"""
        return _analog_swig.agc_ff_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _analog_swig.agc_ff_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _analog_swig.agc_ff_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _analog_swig.agc_ff_max_gain(self)

    def set_rate(self, *args, **kwargs):
        """set_rate(self, float rate)"""
        return _analog_swig.agc_ff_set_rate(self, *args, **kwargs)

    def set_reference(self, *args, **kwargs):
        """set_reference(self, float reference)"""
        return _analog_swig.agc_ff_set_reference(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _analog_swig.agc_ff_set_gain(self, *args, **kwargs)

    def set_max_gain(self, *args, **kwargs):
        """set_max_gain(self, float max_gain)"""
        return _analog_swig.agc_ff_set_max_gain(self, *args, **kwargs)

    __swig_destroy__ = _analog_swig.delete_agc_ff
    __del__ = lambda self : None;
agc_ff_swigregister = _analog_swig.agc_ff_swigregister
agc_ff_swigregister(agc_ff)

def agc_ff_make(rate = 1e-4, reference = 1.0, gain = 1.0, max_gain = 0.0):
  """
    agc_ff_make(float rate = 1e-4, float reference = 1.0, float gain = 1.0, 
        float max_gain = 0.0) -> sptr
    """
  return _analog_swig.agc_ff_make(rate, reference, gain, max_gain)

class agc2_cc(object):
    """Proxy of C++ gr::analog::agc2_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(attack_rate = 1e-1, decay_rate = 1e-2, reference = 1.0, 
    gain = 1.0, max_gain = 0.0):
        """
        make(float attack_rate = 1e-1, float decay_rate = 1e-2, 
            float reference = 1.0, float gain = 1.0, float max_gain = 0.0) -> sptr
        """
        return _analog_swig.agc2_cc_make(attack_rate, decay_rate, reference, gain, max_gain)

    make = staticmethod(make)
    def attack_rate(self):
        """attack_rate(self) -> float"""
        return _analog_swig.agc2_cc_attack_rate(self)

    def decay_rate(self):
        """decay_rate(self) -> float"""
        return _analog_swig.agc2_cc_decay_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _analog_swig.agc2_cc_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _analog_swig.agc2_cc_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _analog_swig.agc2_cc_max_gain(self)

    def set_attack_rate(self, *args, **kwargs):
        """set_attack_rate(self, float rate)"""
        return _analog_swig.agc2_cc_set_attack_rate(self, *args, **kwargs)

    def set_decay_rate(self, *args, **kwargs):
        """set_decay_rate(self, float rate)"""
        return _analog_swig.agc2_cc_set_decay_rate(self, *args, **kwargs)

    def set_reference(self, *args, **kwargs):
        """set_reference(self, float reference)"""
        return _analog_swig.agc2_cc_set_reference(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _analog_swig.agc2_cc_set_gain(self, *args, **kwargs)

    def set_max_gain(self, *args, **kwargs):
        """set_max_gain(self, float max_gain)"""
        return _analog_swig.agc2_cc_set_max_gain(self, *args, **kwargs)

    __swig_destroy__ = _analog_swig.delete_agc2_cc
    __del__ = lambda self : None;
agc2_cc_swigregister = _analog_swig.agc2_cc_swigregister
agc2_cc_swigregister(agc2_cc)

def agc2_cc_make(attack_rate = 1e-1, decay_rate = 1e-2, reference = 1.0, 
    gain = 1.0, max_gain = 0.0):
  """
    agc2_cc_make(float attack_rate = 1e-1, float decay_rate = 1e-2, 
        float reference = 1.0, float gain = 1.0, float max_gain = 0.0) -> sptr
    """
  return _analog_swig.agc2_cc_make(attack_rate, decay_rate, reference, gain, max_gain)

class agc2_ff(object):
    """Proxy of C++ gr::analog::agc2_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(attack_rate = 1e-1, decay_rate = 1e-2, reference = 1.0, 
    gain = 1.0, max_gain = 0.0):
        """
        make(float attack_rate = 1e-1, float decay_rate = 1e-2, 
            float reference = 1.0, float gain = 1.0, float max_gain = 0.0) -> sptr
        """
        return _analog_swig.agc2_ff_make(attack_rate, decay_rate, reference, gain, max_gain)

    make = staticmethod(make)
    def attack_rate(self):
        """attack_rate(self) -> float"""
        return _analog_swig.agc2_ff_attack_rate(self)

    def decay_rate(self):
        """decay_rate(self) -> float"""
        return _analog_swig.agc2_ff_decay_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _analog_swig.agc2_ff_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _analog_swig.agc2_ff_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _analog_swig.agc2_ff_max_gain(self)

    def set_attack_rate(self, *args, **kwargs):
        """set_attack_rate(self, float rate)"""
        return _analog_swig.agc2_ff_set_attack_rate(self, *args, **kwargs)

    def set_decay_rate(self, *args, **kwargs):
        """set_decay_rate(self, float rate)"""
        return _analog_swig.agc2_ff_set_decay_rate(self, *args, **kwargs)

    def set_reference(self, *args, **kwargs):
        """set_reference(self, float reference)"""
        return _analog_swig.agc2_ff_set_reference(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _analog_swig.agc2_ff_set_gain(self, *args, **kwargs)

    def set_max_gain(self, *args, **kwargs):
        """set_max_gain(self, float max_gain)"""
        return _analog_swig.agc2_ff_set_max_gain(self, *args, **kwargs)

    __swig_destroy__ = _analog_swig.delete_agc2_ff
    __del__ = lambda self : None;
agc2_ff_swigregister = _analog_swig.agc2_ff_swigregister
agc2_ff_swigregister(agc2_ff)

def agc2_ff_make(attack_rate = 1e-1, decay_rate = 1e-2, reference = 1.0, 
    gain = 1.0, max_gain = 0.0):
  """
    agc2_ff_make(float attack_rate = 1e-1, float decay_rate = 1e-2, 
        float reference = 1.0, float gain = 1.0, float max_gain = 0.0) -> sptr
    """
  return _analog_swig.agc2_ff_make(attack_rate, decay_rate, reference, gain, max_gain)

class cpfsk_bc(object):
    """Proxy of C++ gr::analog::cpfsk_bc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float k, float ampl, int samples_per_sym) -> sptr"""
        return _analog_swig.cpfsk_bc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, float amplitude)"""
        return _analog_swig.cpfsk_bc_set_amplitude(self, *args, **kwargs)

    def amplitude(self):
        """amplitude(self) -> float"""
        return _analog_swig.cpfsk_bc_amplitude(self)

    def freq(self):
        """freq(self) -> float"""
        return _analog_swig.cpfsk_bc_freq(self)

    def phase(self):
        """phase(self) -> float"""
        return _analog_swig.cpfsk_bc_phase(self)

    __swig_destroy__ = _analog_swig.delete_cpfsk_bc
    __del__ = lambda self : None;
cpfsk_bc_swigregister = _analog_swig.cpfsk_bc_swigregister
cpfsk_bc_swigregister(cpfsk_bc)

def cpfsk_bc_make(*args, **kwargs):
  """cpfsk_bc_make(float k, float ampl, int samples_per_sym) -> sptr"""
  return _analog_swig.cpfsk_bc_make(*args, **kwargs)

class ctcss_squelch_ff(object):
    """Proxy of C++ gr::analog::ctcss_squelch_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int rate, float freq, float level, int len, int ramp, 
            bool gate) -> sptr
        """
        return _analog_swig.ctcss_squelch_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def squelch_range(self):
        """squelch_range(self) -> __dummy_4__"""
        return _analog_swig.ctcss_squelch_ff_squelch_range(self)

    def level(self):
        """level(self) -> float"""
        return _analog_swig.ctcss_squelch_ff_level(self)

    def set_level(self, *args, **kwargs):
        """set_level(self, float level)"""
        return _analog_swig.ctcss_squelch_ff_set_level(self, *args, **kwargs)

    def len(self):
        """len(self) -> int"""
        return _analog_swig.ctcss_squelch_ff_len(self)

    def ramp(self):
        """ramp(self) -> int"""
        return _analog_swig.ctcss_squelch_ff_ramp(self)

    def set_ramp(self, *args, **kwargs):
        """set_ramp(self, int ramp)"""
        return _analog_swig.ctcss_squelch_ff_set_ramp(self, *args, **kwargs)

    def gate(self):
        """gate(self) -> bool"""
        return _analog_swig.ctcss_squelch_ff_gate(self)

    def set_gate(self, *args, **kwargs):
        """set_gate(self, bool gate)"""
        return _analog_swig.ctcss_squelch_ff_set_gate(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.ctcss_squelch_ff_unmuted(self)

    __swig_destroy__ = _analog_swig.delete_ctcss_squelch_ff
    __del__ = lambda self : None;
ctcss_squelch_ff_swigregister = _analog_swig.ctcss_squelch_ff_swigregister
ctcss_squelch_ff_swigregister(ctcss_squelch_ff)

def ctcss_squelch_ff_make(*args, **kwargs):
  """
    ctcss_squelch_ff_make(int rate, float freq, float level, int len, int ramp, 
        bool gate) -> sptr
    """
  return _analog_swig.ctcss_squelch_ff_make(*args, **kwargs)

class dpll_bb(object):
    """Proxy of C++ gr::analog::dpll_bb class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float period, float gain) -> sptr"""
        return _analog_swig.dpll_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _analog_swig.dpll_bb_set_gain(self, *args, **kwargs)

    def set_decision_threshold(self, *args, **kwargs):
        """set_decision_threshold(self, float thresh)"""
        return _analog_swig.dpll_bb_set_decision_threshold(self, *args, **kwargs)

    def gain(self):
        """gain(self) -> float"""
        return _analog_swig.dpll_bb_gain(self)

    def freq(self):
        """freq(self) -> float"""
        return _analog_swig.dpll_bb_freq(self)

    def phase(self):
        """phase(self) -> float"""
        return _analog_swig.dpll_bb_phase(self)

    def decision_threshold(self):
        """decision_threshold(self) -> float"""
        return _analog_swig.dpll_bb_decision_threshold(self)

    __swig_destroy__ = _analog_swig.delete_dpll_bb
    __del__ = lambda self : None;
dpll_bb_swigregister = _analog_swig.dpll_bb_swigregister
dpll_bb_swigregister(dpll_bb)

def dpll_bb_make(*args, **kwargs):
  """dpll_bb_make(float period, float gain) -> sptr"""
  return _analog_swig.dpll_bb_make(*args, **kwargs)

class feedforward_agc_cc(object):
    """Proxy of C++ gr::analog::feedforward_agc_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int nsamples, float reference) -> sptr"""
        return _analog_swig.feedforward_agc_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _analog_swig.delete_feedforward_agc_cc
    __del__ = lambda self : None;
feedforward_agc_cc_swigregister = _analog_swig.feedforward_agc_cc_swigregister
feedforward_agc_cc_swigregister(feedforward_agc_cc)

def feedforward_agc_cc_make(*args, **kwargs):
  """feedforward_agc_cc_make(int nsamples, float reference) -> sptr"""
  return _analog_swig.feedforward_agc_cc_make(*args, **kwargs)

class fmdet_cf(object):
    """Proxy of C++ gr::analog::fmdet_cf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(float samplerate, float freq_low, float freq_high, 
            float scl) -> sptr
        """
        return _analog_swig.fmdet_cf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scl)"""
        return _analog_swig.fmdet_cf_set_scale(self, *args, **kwargs)

    def set_freq_range(self, *args, **kwargs):
        """set_freq_range(self, float freq_low, float freq_high)"""
        return _analog_swig.fmdet_cf_set_freq_range(self, *args, **kwargs)

    def freq(self):
        """freq(self) -> float"""
        return _analog_swig.fmdet_cf_freq(self)

    def freq_high(self):
        """freq_high(self) -> float"""
        return _analog_swig.fmdet_cf_freq_high(self)

    def freq_low(self):
        """freq_low(self) -> float"""
        return _analog_swig.fmdet_cf_freq_low(self)

    def scale(self):
        """scale(self) -> float"""
        return _analog_swig.fmdet_cf_scale(self)

    def bias(self):
        """bias(self) -> float"""
        return _analog_swig.fmdet_cf_bias(self)

    __swig_destroy__ = _analog_swig.delete_fmdet_cf
    __del__ = lambda self : None;
fmdet_cf_swigregister = _analog_swig.fmdet_cf_swigregister
fmdet_cf_swigregister(fmdet_cf)

def fmdet_cf_make(*args, **kwargs):
  """
    fmdet_cf_make(float samplerate, float freq_low, float freq_high, 
        float scl) -> sptr
    """
  return _analog_swig.fmdet_cf_make(*args, **kwargs)

class frequency_modulator_fc(object):
    """Proxy of C++ gr::analog::frequency_modulator_fc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(double sensitivity) -> sptr"""
        return _analog_swig.frequency_modulator_fc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_sensitivity(self, *args, **kwargs):
        """set_sensitivity(self, float sens)"""
        return _analog_swig.frequency_modulator_fc_set_sensitivity(self, *args, **kwargs)

    def sensitivity(self):
        """sensitivity(self) -> float"""
        return _analog_swig.frequency_modulator_fc_sensitivity(self)

    __swig_destroy__ = _analog_swig.delete_frequency_modulator_fc
    __del__ = lambda self : None;
frequency_modulator_fc_swigregister = _analog_swig.frequency_modulator_fc_swigregister
frequency_modulator_fc_swigregister(frequency_modulator_fc)

def frequency_modulator_fc_make(*args, **kwargs):
  """frequency_modulator_fc_make(double sensitivity) -> sptr"""
  return _analog_swig.frequency_modulator_fc_make(*args, **kwargs)

class lfsr(object):
    """Proxy of C++ gr::analog::lfsr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self, uint32_t mask, uint32_t seed, uint32_t reg_len) -> lfsr"""
        this = _analog_swig.new_lfsr(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def next_bit(self):
        """next_bit(self) -> unsigned char"""
        return _analog_swig.lfsr_next_bit(self)

    def next_bit_scramble(self, *args, **kwargs):
        """next_bit_scramble(self, unsigned char input) -> unsigned char"""
        return _analog_swig.lfsr_next_bit_scramble(self, *args, **kwargs)

    def next_bit_descramble(self, *args, **kwargs):
        """next_bit_descramble(self, unsigned char input) -> unsigned char"""
        return _analog_swig.lfsr_next_bit_descramble(self, *args, **kwargs)

    def reset(self):
        """reset(self)"""
        return _analog_swig.lfsr_reset(self)

    def pre_shift(self, *args, **kwargs):
        """pre_shift(self, int num)"""
        return _analog_swig.lfsr_pre_shift(self, *args, **kwargs)

    def mask(self):
        """mask(self) -> int"""
        return _analog_swig.lfsr_mask(self)

    __swig_destroy__ = _analog_swig.delete_lfsr
    __del__ = lambda self : None;
lfsr_swigregister = _analog_swig.lfsr_swigregister
lfsr_swigregister(lfsr)

class noise_source_s(object):
    """Proxy of C++ gr::analog::noise_source_s class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(noise_type_t type, float ampl, long seed) -> sptr"""
        return _analog_swig.noise_source_s_make(*args, **kwargs)

    make = staticmethod(make)
    def set_type(self, *args, **kwargs):
        """set_type(self, noise_type_t type)"""
        return _analog_swig.noise_source_s_set_type(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, float ampl)"""
        return _analog_swig.noise_source_s_set_amplitude(self, *args, **kwargs)

    def type(self):
        """type(self) -> noise_type_t"""
        return _analog_swig.noise_source_s_type(self)

    def amplitude(self):
        """amplitude(self) -> float"""
        return _analog_swig.noise_source_s_amplitude(self)

    __swig_destroy__ = _analog_swig.delete_noise_source_s
    __del__ = lambda self : None;
noise_source_s_swigregister = _analog_swig.noise_source_s_swigregister
noise_source_s_swigregister(noise_source_s)

def noise_source_s_make(*args, **kwargs):
  """noise_source_s_make(noise_type_t type, float ampl, long seed) -> sptr"""
  return _analog_swig.noise_source_s_make(*args, **kwargs)

class noise_source_i(object):
    """Proxy of C++ gr::analog::noise_source_i class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(noise_type_t type, float ampl, long seed) -> sptr"""
        return _analog_swig.noise_source_i_make(*args, **kwargs)

    make = staticmethod(make)
    def set_type(self, *args, **kwargs):
        """set_type(self, noise_type_t type)"""
        return _analog_swig.noise_source_i_set_type(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, float ampl)"""
        return _analog_swig.noise_source_i_set_amplitude(self, *args, **kwargs)

    def type(self):
        """type(self) -> noise_type_t"""
        return _analog_swig.noise_source_i_type(self)

    def amplitude(self):
        """amplitude(self) -> float"""
        return _analog_swig.noise_source_i_amplitude(self)

    __swig_destroy__ = _analog_swig.delete_noise_source_i
    __del__ = lambda self : None;
noise_source_i_swigregister = _analog_swig.noise_source_i_swigregister
noise_source_i_swigregister(noise_source_i)

def noise_source_i_make(*args, **kwargs):
  """noise_source_i_make(noise_type_t type, float ampl, long seed) -> sptr"""
  return _analog_swig.noise_source_i_make(*args, **kwargs)

class noise_source_f(object):
    """Proxy of C++ gr::analog::noise_source_f class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(noise_type_t type, float ampl, long seed) -> sptr"""
        return _analog_swig.noise_source_f_make(*args, **kwargs)

    make = staticmethod(make)
    def set_type(self, *args, **kwargs):
        """set_type(self, noise_type_t type)"""
        return _analog_swig.noise_source_f_set_type(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, float ampl)"""
        return _analog_swig.noise_source_f_set_amplitude(self, *args, **kwargs)

    def type(self):
        """type(self) -> noise_type_t"""
        return _analog_swig.noise_source_f_type(self)

    def amplitude(self):
        """amplitude(self) -> float"""
        return _analog_swig.noise_source_f_amplitude(self)

    __swig_destroy__ = _analog_swig.delete_noise_source_f
    __del__ = lambda self : None;
noise_source_f_swigregister = _analog_swig.noise_source_f_swigregister
noise_source_f_swigregister(noise_source_f)

def noise_source_f_make(*args, **kwargs):
  """noise_source_f_make(noise_type_t type, float ampl, long seed) -> sptr"""
  return _analog_swig.noise_source_f_make(*args, **kwargs)

class noise_source_c(object):
    """Proxy of C++ gr::analog::noise_source_c class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(noise_type_t type, float ampl, long seed) -> sptr"""
        return _analog_swig.noise_source_c_make(*args, **kwargs)

    make = staticmethod(make)
    def set_type(self, *args, **kwargs):
        """set_type(self, noise_type_t type)"""
        return _analog_swig.noise_source_c_set_type(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, float ampl)"""
        return _analog_swig.noise_source_c_set_amplitude(self, *args, **kwargs)

    def type(self):
        """type(self) -> noise_type_t"""
        return _analog_swig.noise_source_c_type(self)

    def amplitude(self):
        """amplitude(self) -> float"""
        return _analog_swig.noise_source_c_amplitude(self)

    __swig_destroy__ = _analog_swig.delete_noise_source_c
    __del__ = lambda self : None;
noise_source_c_swigregister = _analog_swig.noise_source_c_swigregister
noise_source_c_swigregister(noise_source_c)

def noise_source_c_make(*args, **kwargs):
  """noise_source_c_make(noise_type_t type, float ampl, long seed) -> sptr"""
  return _analog_swig.noise_source_c_make(*args, **kwargs)

class phase_modulator_fc(object):
    """Proxy of C++ gr::analog::phase_modulator_fc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(double sensitivity) -> sptr"""
        return _analog_swig.phase_modulator_fc_make(*args, **kwargs)

    make = staticmethod(make)
    def sensitivity(self):
        """sensitivity(self) -> double"""
        return _analog_swig.phase_modulator_fc_sensitivity(self)

    def phase(self):
        """phase(self) -> double"""
        return _analog_swig.phase_modulator_fc_phase(self)

    def set_sensitivity(self, *args, **kwargs):
        """set_sensitivity(self, double s)"""
        return _analog_swig.phase_modulator_fc_set_sensitivity(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, double p)"""
        return _analog_swig.phase_modulator_fc_set_phase(self, *args, **kwargs)

    __swig_destroy__ = _analog_swig.delete_phase_modulator_fc
    __del__ = lambda self : None;
phase_modulator_fc_swigregister = _analog_swig.phase_modulator_fc_swigregister
phase_modulator_fc_swigregister(phase_modulator_fc)

def phase_modulator_fc_make(*args, **kwargs):
  """phase_modulator_fc_make(double sensitivity) -> sptr"""
  return _analog_swig.phase_modulator_fc_make(*args, **kwargs)

class pll_carriertracking_cc(object):
    """Proxy of C++ gr::analog::pll_carriertracking_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float loop_bw, float max_freq, float min_freq) -> sptr"""
        return _analog_swig.pll_carriertracking_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def lock_detector(self):
        """lock_detector(self) -> bool"""
        return _analog_swig.pll_carriertracking_cc_lock_detector(self)

    def squelch_enable(self, *args, **kwargs):
        """squelch_enable(self, bool arg0) -> bool"""
        return _analog_swig.pll_carriertracking_cc_squelch_enable(self, *args, **kwargs)

    def set_lock_threshold(self, *args, **kwargs):
        """set_lock_threshold(self, float arg0) -> float"""
        return _analog_swig.pll_carriertracking_cc_set_lock_threshold(self, *args, **kwargs)

    def set_loop_bandwidth(self, *args, **kwargs):
        """set_loop_bandwidth(self, float bw)"""
        return _analog_swig.pll_carriertracking_cc_set_loop_bandwidth(self, *args, **kwargs)

    def set_damping_factor(self, *args, **kwargs):
        """set_damping_factor(self, float df)"""
        return _analog_swig.pll_carriertracking_cc_set_damping_factor(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, float alpha)"""
        return _analog_swig.pll_carriertracking_cc_set_alpha(self, *args, **kwargs)

    def set_beta(self, *args, **kwargs):
        """set_beta(self, float beta)"""
        return _analog_swig.pll_carriertracking_cc_set_beta(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, float freq)"""
        return _analog_swig.pll_carriertracking_cc_set_frequency(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, float phase)"""
        return _analog_swig.pll_carriertracking_cc_set_phase(self, *args, **kwargs)

    def set_min_freq(self, *args, **kwargs):
        """set_min_freq(self, float freq)"""
        return _analog_swig.pll_carriertracking_cc_set_min_freq(self, *args, **kwargs)

    def set_max_freq(self, *args, **kwargs):
        """set_max_freq(self, float freq)"""
        return _analog_swig.pll_carriertracking_cc_set_max_freq(self, *args, **kwargs)

    def get_loop_bandwidth(self):
        """get_loop_bandwidth(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_get_loop_bandwidth(self)

    def get_damping_factor(self):
        """get_damping_factor(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_get_damping_factor(self)

    def get_alpha(self):
        """get_alpha(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_get_alpha(self)

    def get_beta(self):
        """get_beta(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_get_beta(self)

    def get_frequency(self):
        """get_frequency(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_get_frequency(self)

    def get_phase(self):
        """get_phase(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_get_phase(self)

    def get_min_freq(self):
        """get_min_freq(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_get_min_freq(self)

    def get_max_freq(self):
        """get_max_freq(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_get_max_freq(self)

    __swig_destroy__ = _analog_swig.delete_pll_carriertracking_cc
    __del__ = lambda self : None;
pll_carriertracking_cc_swigregister = _analog_swig.pll_carriertracking_cc_swigregister
pll_carriertracking_cc_swigregister(pll_carriertracking_cc)

def pll_carriertracking_cc_make(*args, **kwargs):
  """pll_carriertracking_cc_make(float loop_bw, float max_freq, float min_freq) -> sptr"""
  return _analog_swig.pll_carriertracking_cc_make(*args, **kwargs)

class pll_freqdet_cf(object):
    """Proxy of C++ gr::analog::pll_freqdet_cf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float loop_bw, float max_freq, float min_freq) -> sptr"""
        return _analog_swig.pll_freqdet_cf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_loop_bandwidth(self, *args, **kwargs):
        """set_loop_bandwidth(self, float bw)"""
        return _analog_swig.pll_freqdet_cf_set_loop_bandwidth(self, *args, **kwargs)

    def set_damping_factor(self, *args, **kwargs):
        """set_damping_factor(self, float df)"""
        return _analog_swig.pll_freqdet_cf_set_damping_factor(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, float alpha)"""
        return _analog_swig.pll_freqdet_cf_set_alpha(self, *args, **kwargs)

    def set_beta(self, *args, **kwargs):
        """set_beta(self, float beta)"""
        return _analog_swig.pll_freqdet_cf_set_beta(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, float freq)"""
        return _analog_swig.pll_freqdet_cf_set_frequency(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, float phase)"""
        return _analog_swig.pll_freqdet_cf_set_phase(self, *args, **kwargs)

    def set_min_freq(self, *args, **kwargs):
        """set_min_freq(self, float freq)"""
        return _analog_swig.pll_freqdet_cf_set_min_freq(self, *args, **kwargs)

    def set_max_freq(self, *args, **kwargs):
        """set_max_freq(self, float freq)"""
        return _analog_swig.pll_freqdet_cf_set_max_freq(self, *args, **kwargs)

    def get_loop_bandwidth(self):
        """get_loop_bandwidth(self) -> float"""
        return _analog_swig.pll_freqdet_cf_get_loop_bandwidth(self)

    def get_damping_factor(self):
        """get_damping_factor(self) -> float"""
        return _analog_swig.pll_freqdet_cf_get_damping_factor(self)

    def get_alpha(self):
        """get_alpha(self) -> float"""
        return _analog_swig.pll_freqdet_cf_get_alpha(self)

    def get_beta(self):
        """get_beta(self) -> float"""
        return _analog_swig.pll_freqdet_cf_get_beta(self)

    def get_frequency(self):
        """get_frequency(self) -> float"""
        return _analog_swig.pll_freqdet_cf_get_frequency(self)

    def get_phase(self):
        """get_phase(self) -> float"""
        return _analog_swig.pll_freqdet_cf_get_phase(self)

    def get_min_freq(self):
        """get_min_freq(self) -> float"""
        return _analog_swig.pll_freqdet_cf_get_min_freq(self)

    def get_max_freq(self):
        """get_max_freq(self) -> float"""
        return _analog_swig.pll_freqdet_cf_get_max_freq(self)

    __swig_destroy__ = _analog_swig.delete_pll_freqdet_cf
    __del__ = lambda self : None;
pll_freqdet_cf_swigregister = _analog_swig.pll_freqdet_cf_swigregister
pll_freqdet_cf_swigregister(pll_freqdet_cf)

def pll_freqdet_cf_make(*args, **kwargs):
  """pll_freqdet_cf_make(float loop_bw, float max_freq, float min_freq) -> sptr"""
  return _analog_swig.pll_freqdet_cf_make(*args, **kwargs)

class pll_refout_cc(object):
    """Proxy of C++ gr::analog::pll_refout_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float loop_bw, float max_freq, float min_freq) -> sptr"""
        return _analog_swig.pll_refout_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _analog_swig.delete_pll_refout_cc
    __del__ = lambda self : None;
pll_refout_cc_swigregister = _analog_swig.pll_refout_cc_swigregister
pll_refout_cc_swigregister(pll_refout_cc)

def pll_refout_cc_make(*args, **kwargs):
  """pll_refout_cc_make(float loop_bw, float max_freq, float min_freq) -> sptr"""
  return _analog_swig.pll_refout_cc_make(*args, **kwargs)

class probe_avg_mag_sqrd_c(object):
    """Proxy of C++ gr::analog::probe_avg_mag_sqrd_c class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(double threshold_db, double alpha = 0.0001) -> sptr"""
        return _analog_swig.probe_avg_mag_sqrd_c_make(*args, **kwargs)

    make = staticmethod(make)
    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_c_unmuted(self)

    def level(self):
        """level(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_c_level(self)

    def threshold(self):
        """threshold(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_c_threshold(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _analog_swig.probe_avg_mag_sqrd_c_set_alpha(self, *args, **kwargs)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double decibels)"""
        return _analog_swig.probe_avg_mag_sqrd_c_set_threshold(self, *args, **kwargs)

    __swig_destroy__ = _analog_swig.delete_probe_avg_mag_sqrd_c
    __del__ = lambda self : None;
probe_avg_mag_sqrd_c_swigregister = _analog_swig.probe_avg_mag_sqrd_c_swigregister
probe_avg_mag_sqrd_c_swigregister(probe_avg_mag_sqrd_c)

def probe_avg_mag_sqrd_c_make(*args, **kwargs):
  """probe_avg_mag_sqrd_c_make(double threshold_db, double alpha = 0.0001) -> sptr"""
  return _analog_swig.probe_avg_mag_sqrd_c_make(*args, **kwargs)

class probe_avg_mag_sqrd_cf(object):
    """Proxy of C++ gr::analog::probe_avg_mag_sqrd_cf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(double threshold_db, double alpha = 0.0001) -> sptr"""
        return _analog_swig.probe_avg_mag_sqrd_cf_make(*args, **kwargs)

    make = staticmethod(make)
    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_cf_unmuted(self)

    def level(self):
        """level(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_cf_level(self)

    def threshold(self):
        """threshold(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_cf_threshold(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _analog_swig.probe_avg_mag_sqrd_cf_set_alpha(self, *args, **kwargs)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double decibels)"""
        return _analog_swig.probe_avg_mag_sqrd_cf_set_threshold(self, *args, **kwargs)

    __swig_destroy__ = _analog_swig.delete_probe_avg_mag_sqrd_cf
    __del__ = lambda self : None;
probe_avg_mag_sqrd_cf_swigregister = _analog_swig.probe_avg_mag_sqrd_cf_swigregister
probe_avg_mag_sqrd_cf_swigregister(probe_avg_mag_sqrd_cf)

def probe_avg_mag_sqrd_cf_make(*args, **kwargs):
  """probe_avg_mag_sqrd_cf_make(double threshold_db, double alpha = 0.0001) -> sptr"""
  return _analog_swig.probe_avg_mag_sqrd_cf_make(*args, **kwargs)

class probe_avg_mag_sqrd_f(object):
    """Proxy of C++ gr::analog::probe_avg_mag_sqrd_f class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(double threshold_db, double alpha = 0.0001) -> sptr"""
        return _analog_swig.probe_avg_mag_sqrd_f_make(*args, **kwargs)

    make = staticmethod(make)
    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_f_unmuted(self)

    def level(self):
        """level(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_f_level(self)

    def threshold(self):
        """threshold(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_f_threshold(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _analog_swig.probe_avg_mag_sqrd_f_set_alpha(self, *args, **kwargs)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double decibels)"""
        return _analog_swig.probe_avg_mag_sqrd_f_set_threshold(self, *args, **kwargs)

    __swig_destroy__ = _analog_swig.delete_probe_avg_mag_sqrd_f
    __del__ = lambda self : None;
probe_avg_mag_sqrd_f_swigregister = _analog_swig.probe_avg_mag_sqrd_f_swigregister
probe_avg_mag_sqrd_f_swigregister(probe_avg_mag_sqrd_f)

def probe_avg_mag_sqrd_f_make(*args, **kwargs):
  """probe_avg_mag_sqrd_f_make(double threshold_db, double alpha = 0.0001) -> sptr"""
  return _analog_swig.probe_avg_mag_sqrd_f_make(*args, **kwargs)

class pwr_squelch_cc(object):
    """Proxy of C++ gr::analog::pwr_squelch_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(double db, double alpha = 0.0001, int ramp = 0, bool gate = False) -> sptr"""
        return _analog_swig.pwr_squelch_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def squelch_range(self):
        """squelch_range(self) -> __dummy_4__"""
        return _analog_swig.pwr_squelch_cc_squelch_range(self)

    def threshold(self):
        """threshold(self) -> double"""
        return _analog_swig.pwr_squelch_cc_threshold(self)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double db)"""
        return _analog_swig.pwr_squelch_cc_set_threshold(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _analog_swig.pwr_squelch_cc_set_alpha(self, *args, **kwargs)

    def ramp(self):
        """ramp(self) -> int"""
        return _analog_swig.pwr_squelch_cc_ramp(self)

    def set_ramp(self, *args, **kwargs):
        """set_ramp(self, int ramp)"""
        return _analog_swig.pwr_squelch_cc_set_ramp(self, *args, **kwargs)

    def gate(self):
        """gate(self) -> bool"""
        return _analog_swig.pwr_squelch_cc_gate(self)

    def set_gate(self, *args, **kwargs):
        """set_gate(self, bool gate)"""
        return _analog_swig.pwr_squelch_cc_set_gate(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.pwr_squelch_cc_unmuted(self)

    __swig_destroy__ = _analog_swig.delete_pwr_squelch_cc
    __del__ = lambda self : None;
pwr_squelch_cc_swigregister = _analog_swig.pwr_squelch_cc_swigregister
pwr_squelch_cc_swigregister(pwr_squelch_cc)

def pwr_squelch_cc_make(*args, **kwargs):
  """pwr_squelch_cc_make(double db, double alpha = 0.0001, int ramp = 0, bool gate = False) -> sptr"""
  return _analog_swig.pwr_squelch_cc_make(*args, **kwargs)

class pwr_squelch_ff(object):
    """Proxy of C++ gr::analog::pwr_squelch_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(double db, double alpha = 0.0001, int ramp = 0, bool gate = False) -> sptr"""
        return _analog_swig.pwr_squelch_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def squelch_range(self):
        """squelch_range(self) -> __dummy_4__"""
        return _analog_swig.pwr_squelch_ff_squelch_range(self)

    def threshold(self):
        """threshold(self) -> double"""
        return _analog_swig.pwr_squelch_ff_threshold(self)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double db)"""
        return _analog_swig.pwr_squelch_ff_set_threshold(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _analog_swig.pwr_squelch_ff_set_alpha(self, *args, **kwargs)

    def ramp(self):
        """ramp(self) -> int"""
        return _analog_swig.pwr_squelch_ff_ramp(self)

    def set_ramp(self, *args, **kwargs):
        """set_ramp(self, int ramp)"""
        return _analog_swig.pwr_squelch_ff_set_ramp(self, *args, **kwargs)

    def gate(self):
        """gate(self) -> bool"""
        return _analog_swig.pwr_squelch_ff_gate(self)

    def set_gate(self, *args, **kwargs):
        """set_gate(self, bool gate)"""
        return _analog_swig.pwr_squelch_ff_set_gate(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.pwr_squelch_ff_unmuted(self)

    __swig_destroy__ = _analog_swig.delete_pwr_squelch_ff
    __del__ = lambda self : None;
pwr_squelch_ff_swigregister = _analog_swig.pwr_squelch_ff_swigregister
pwr_squelch_ff_swigregister(pwr_squelch_ff)

def pwr_squelch_ff_make(*args, **kwargs):
  """pwr_squelch_ff_make(double db, double alpha = 0.0001, int ramp = 0, bool gate = False) -> sptr"""
  return _analog_swig.pwr_squelch_ff_make(*args, **kwargs)

class quadrature_demod_cf(object):
    """Proxy of C++ gr::analog::quadrature_demod_cf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float gain) -> sptr"""
        return _analog_swig.quadrature_demod_cf_make(*args, **kwargs)

    make = staticmethod(make)
    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _analog_swig.quadrature_demod_cf_set_gain(self, *args, **kwargs)

    def gain(self):
        """gain(self) -> float"""
        return _analog_swig.quadrature_demod_cf_gain(self)

    __swig_destroy__ = _analog_swig.delete_quadrature_demod_cf
    __del__ = lambda self : None;
quadrature_demod_cf_swigregister = _analog_swig.quadrature_demod_cf_swigregister
quadrature_demod_cf_swigregister(quadrature_demod_cf)

def quadrature_demod_cf_make(*args, **kwargs):
  """quadrature_demod_cf_make(float gain) -> sptr"""
  return _analog_swig.quadrature_demod_cf_make(*args, **kwargs)

class rail_ff(object):
    """Proxy of C++ gr::analog::rail_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float lo, float hi) -> sptr"""
        return _analog_swig.rail_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def lo(self):
        """lo(self) -> float"""
        return _analog_swig.rail_ff_lo(self)

    def hi(self):
        """hi(self) -> float"""
        return _analog_swig.rail_ff_hi(self)

    def set_lo(self, *args, **kwargs):
        """set_lo(self, float lo)"""
        return _analog_swig.rail_ff_set_lo(self, *args, **kwargs)

    def set_hi(self, *args, **kwargs):
        """set_hi(self, float hi)"""
        return _analog_swig.rail_ff_set_hi(self, *args, **kwargs)

    __swig_destroy__ = _analog_swig.delete_rail_ff
    __del__ = lambda self : None;
rail_ff_swigregister = _analog_swig.rail_ff_swigregister
rail_ff_swigregister(rail_ff)

def rail_ff_make(*args, **kwargs):
  """rail_ff_make(float lo, float hi) -> sptr"""
  return _analog_swig.rail_ff_make(*args, **kwargs)


def sincos(*args, **kwargs):
  """sincos(double x, double sin, double cos)"""
  return _analog_swig.sincos(*args, **kwargs)

def sincosf(*args, **kwargs):
  """sincosf(float x, float sin, float cos)"""
  return _analog_swig.sincosf(*args, **kwargs)
class sig_source_s(object):
    """Proxy of C++ gr::analog::sig_source_s class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(double sampling_freq, gr_waveform_t waveform, double wave_freq, 
            double ampl, short offset = 0) -> sptr
        """
        return _analog_swig.sig_source_s_make(*args, **kwargs)

    make = staticmethod(make)
    def sampling_freq(self):
        """sampling_freq(self) -> double"""
        return _analog_swig.sig_source_s_sampling_freq(self)

    def waveform(self):
        """waveform(self) -> gr_waveform_t"""
        return _analog_swig.sig_source_s_waveform(self)

    def frequency(self):
        """frequency(self) -> double"""
        return _analog_swig.sig_source_s_frequency(self)

    def amplitude(self):
        """amplitude(self) -> double"""
        return _analog_swig.sig_source_s_amplitude(self)

    def offset(self):
        """offset(self) -> short"""
        return _analog_swig.sig_source_s_offset(self)

    def set_sampling_freq(self, *args, **kwargs):
        """set_sampling_freq(self, double sampling_freq)"""
        return _analog_swig.sig_source_s_set_sampling_freq(self, *args, **kwargs)

    def set_waveform(self, *args, **kwargs):
        """set_waveform(self, gr_waveform_t waveform)"""
        return _analog_swig.sig_source_s_set_waveform(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, double frequency)"""
        return _analog_swig.sig_source_s_set_frequency(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, double ampl)"""
        return _analog_swig.sig_source_s_set_amplitude(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, short offset)"""
        return _analog_swig.sig_source_s_set_offset(self, *args, **kwargs)

    __swig_destroy__ = _analog_swig.delete_sig_source_s
    __del__ = lambda self : None;
sig_source_s_swigregister = _analog_swig.sig_source_s_swigregister
sig_source_s_swigregister(sig_source_s)

def sig_source_s_make(*args, **kwargs):
  """
    sig_source_s_make(double sampling_freq, gr_waveform_t waveform, double wave_freq, 
        double ampl, short offset = 0) -> sptr
    """
  return _analog_swig.sig_source_s_make(*args, **kwargs)

class sig_source_i(object):
    """Proxy of C++ gr::analog::sig_source_i class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(double sampling_freq, gr_waveform_t waveform, double wave_freq, 
            double ampl, int offset = 0) -> sptr
        """
        return _analog_swig.sig_source_i_make(*args, **kwargs)

    make = staticmethod(make)
    def sampling_freq(self):
        """sampling_freq(self) -> double"""
        return _analog_swig.sig_source_i_sampling_freq(self)

    def waveform(self):
        """waveform(self) -> gr_waveform_t"""
        return _analog_swig.sig_source_i_waveform(self)

    def frequency(self):
        """frequency(self) -> double"""
        return _analog_swig.sig_source_i_frequency(self)

    def amplitude(self):
        """amplitude(self) -> double"""
        return _analog_swig.sig_source_i_amplitude(self)

    def offset(self):
        """offset(self) -> int"""
        return _analog_swig.sig_source_i_offset(self)

    def set_sampling_freq(self, *args, **kwargs):
        """set_sampling_freq(self, double sampling_freq)"""
        return _analog_swig.sig_source_i_set_sampling_freq(self, *args, **kwargs)

    def set_waveform(self, *args, **kwargs):
        """set_waveform(self, gr_waveform_t waveform)"""
        return _analog_swig.sig_source_i_set_waveform(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, double frequency)"""
        return _analog_swig.sig_source_i_set_frequency(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, double ampl)"""
        return _analog_swig.sig_source_i_set_amplitude(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, int offset)"""
        return _analog_swig.sig_source_i_set_offset(self, *args, **kwargs)

    __swig_destroy__ = _analog_swig.delete_sig_source_i
    __del__ = lambda self : None;
sig_source_i_swigregister = _analog_swig.sig_source_i_swigregister
sig_source_i_swigregister(sig_source_i)

def sig_source_i_make(*args, **kwargs):
  """
    sig_source_i_make(double sampling_freq, gr_waveform_t waveform, double wave_freq, 
        double ampl, int offset = 0) -> sptr
    """
  return _analog_swig.sig_source_i_make(*args, **kwargs)

class sig_source_f(object):
    """Proxy of C++ gr::analog::sig_source_f class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(double sampling_freq, gr_waveform_t waveform, double wave_freq, 
            double ampl, float offset = 0) -> sptr
        """
        return _analog_swig.sig_source_f_make(*args, **kwargs)

    make = staticmethod(make)
    def sampling_freq(self):
        """sampling_freq(self) -> double"""
        return _analog_swig.sig_source_f_sampling_freq(self)

    def waveform(self):
        """waveform(self) -> gr_waveform_t"""
        return _analog_swig.sig_source_f_waveform(self)

    def frequency(self):
        """frequency(self) -> double"""
        return _analog_swig.sig_source_f_frequency(self)

    def amplitude(self):
        """amplitude(self) -> double"""
        return _analog_swig.sig_source_f_amplitude(self)

    def offset(self):
        """offset(self) -> float"""
        return _analog_swig.sig_source_f_offset(self)

    def set_sampling_freq(self, *args, **kwargs):
        """set_sampling_freq(self, double sampling_freq)"""
        return _analog_swig.sig_source_f_set_sampling_freq(self, *args, **kwargs)

    def set_waveform(self, *args, **kwargs):
        """set_waveform(self, gr_waveform_t waveform)"""
        return _analog_swig.sig_source_f_set_waveform(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, double frequency)"""
        return _analog_swig.sig_source_f_set_frequency(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, double ampl)"""
        return _analog_swig.sig_source_f_set_amplitude(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, float offset)"""
        return _analog_swig.sig_source_f_set_offset(self, *args, **kwargs)

    __swig_destroy__ = _analog_swig.delete_sig_source_f
    __del__ = lambda self : None;
sig_source_f_swigregister = _analog_swig.sig_source_f_swigregister
sig_source_f_swigregister(sig_source_f)

def sig_source_f_make(*args, **kwargs):
  """
    sig_source_f_make(double sampling_freq, gr_waveform_t waveform, double wave_freq, 
        double ampl, float offset = 0) -> sptr
    """
  return _analog_swig.sig_source_f_make(*args, **kwargs)

class sig_source_c(object):
    """Proxy of C++ gr::analog::sig_source_c class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(double sampling_freq, gr_waveform_t waveform, double wave_freq, 
            double ampl, gr_complex offset = 0) -> sptr
        """
        return _analog_swig.sig_source_c_make(*args, **kwargs)

    make = staticmethod(make)
    def sampling_freq(self):
        """sampling_freq(self) -> double"""
        return _analog_swig.sig_source_c_sampling_freq(self)

    def waveform(self):
        """waveform(self) -> gr_waveform_t"""
        return _analog_swig.sig_source_c_waveform(self)

    def frequency(self):
        """frequency(self) -> double"""
        return _analog_swig.sig_source_c_frequency(self)

    def amplitude(self):
        """amplitude(self) -> double"""
        return _analog_swig.sig_source_c_amplitude(self)

    def offset(self):
        """offset(self) -> gr_complex"""
        return _analog_swig.sig_source_c_offset(self)

    def set_sampling_freq(self, *args, **kwargs):
        """set_sampling_freq(self, double sampling_freq)"""
        return _analog_swig.sig_source_c_set_sampling_freq(self, *args, **kwargs)

    def set_waveform(self, *args, **kwargs):
        """set_waveform(self, gr_waveform_t waveform)"""
        return _analog_swig.sig_source_c_set_waveform(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, double frequency)"""
        return _analog_swig.sig_source_c_set_frequency(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, double ampl)"""
        return _analog_swig.sig_source_c_set_amplitude(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, gr_complex offset)"""
        return _analog_swig.sig_source_c_set_offset(self, *args, **kwargs)

    __swig_destroy__ = _analog_swig.delete_sig_source_c
    __del__ = lambda self : None;
sig_source_c_swigregister = _analog_swig.sig_source_c_swigregister
sig_source_c_swigregister(sig_source_c)

def sig_source_c_make(*args, **kwargs):
  """
    sig_source_c_make(double sampling_freq, gr_waveform_t waveform, double wave_freq, 
        double ampl, gr_complex offset = 0) -> sptr
    """
  return _analog_swig.sig_source_c_make(*args, **kwargs)

GR_CONST_WAVE = _analog_swig.GR_CONST_WAVE
GR_SIN_WAVE = _analog_swig.GR_SIN_WAVE
GR_COS_WAVE = _analog_swig.GR_COS_WAVE
GR_SQR_WAVE = _analog_swig.GR_SQR_WAVE
GR_TRI_WAVE = _analog_swig.GR_TRI_WAVE
GR_SAW_WAVE = _analog_swig.GR_SAW_WAVE
class simple_squelch_cc(object):
    """Proxy of C++ gr::analog::simple_squelch_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(double threshold_db, double alpha) -> sptr"""
        return _analog_swig.simple_squelch_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.simple_squelch_cc_unmuted(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _analog_swig.simple_squelch_cc_set_alpha(self, *args, **kwargs)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double decibels)"""
        return _analog_swig.simple_squelch_cc_set_threshold(self, *args, **kwargs)

    def threshold(self):
        """threshold(self) -> double"""
        return _analog_swig.simple_squelch_cc_threshold(self)

    def squelch_range(self):
        """squelch_range(self) -> __dummy_4__"""
        return _analog_swig.simple_squelch_cc_squelch_range(self)

    __swig_destroy__ = _analog_swig.delete_simple_squelch_cc
    __del__ = lambda self : None;
simple_squelch_cc_swigregister = _analog_swig.simple_squelch_cc_swigregister
simple_squelch_cc_swigregister(simple_squelch_cc)

def simple_squelch_cc_make(*args, **kwargs):
  """simple_squelch_cc_make(double threshold_db, double alpha) -> sptr"""
  return _analog_swig.simple_squelch_cc_make(*args, **kwargs)

class squelch_base_cc(object):
    """Proxy of C++ gr::analog::squelch_base_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def ramp(self):
        """ramp(self) -> int"""
        return _analog_swig.squelch_base_cc_ramp(self)

    def set_ramp(self, *args, **kwargs):
        """set_ramp(self, int ramp)"""
        return _analog_swig.squelch_base_cc_set_ramp(self, *args, **kwargs)

    def gate(self):
        """gate(self) -> bool"""
        return _analog_swig.squelch_base_cc_gate(self)

    def set_gate(self, *args, **kwargs):
        """set_gate(self, bool gate)"""
        return _analog_swig.squelch_base_cc_set_gate(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.squelch_base_cc_unmuted(self)

    def squelch_range(self):
        """squelch_range(self) -> __dummy_4__"""
        return _analog_swig.squelch_base_cc_squelch_range(self)

    __swig_destroy__ = _analog_swig.delete_squelch_base_cc
    __del__ = lambda self : None;
squelch_base_cc_swigregister = _analog_swig.squelch_base_cc_swigregister
squelch_base_cc_swigregister(squelch_base_cc)

class squelch_base_ff(object):
    """Proxy of C++ gr::analog::squelch_base_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def ramp(self):
        """ramp(self) -> int"""
        return _analog_swig.squelch_base_ff_ramp(self)

    def set_ramp(self, *args, **kwargs):
        """set_ramp(self, int ramp)"""
        return _analog_swig.squelch_base_ff_set_ramp(self, *args, **kwargs)

    def gate(self):
        """gate(self) -> bool"""
        return _analog_swig.squelch_base_ff_gate(self)

    def set_gate(self, *args, **kwargs):
        """set_gate(self, bool gate)"""
        return _analog_swig.squelch_base_ff_set_gate(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.squelch_base_ff_unmuted(self)

    def squelch_range(self):
        """squelch_range(self) -> __dummy_4__"""
        return _analog_swig.squelch_base_ff_squelch_range(self)

    __swig_destroy__ = _analog_swig.delete_squelch_base_ff
    __del__ = lambda self : None;
squelch_base_ff_swigregister = _analog_swig.squelch_base_ff_swigregister
squelch_base_ff_swigregister(squelch_base_ff)

class agc_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::agc_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> agc_cc_sptr
        __init__(self, agc_cc p) -> agc_cc_sptr
        """
        this = _analog_swig.new_agc_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> agc_cc"""
        return _analog_swig.agc_cc_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_agc_cc_sptr
    __del__ = lambda self : None;
    def make(self, rate = 1e-4, reference = 1.0, gain = 1.0, max_gain = 0.0):
        """
        make(self, float rate = 1e-4, float reference = 1.0, float gain = 1.0, 
            float max_gain = 0.0) -> sptr
        """
        return _analog_swig.agc_cc_sptr_make(self, rate, reference, gain, max_gain)

    def rate(self):
        """rate(self) -> float"""
        return _analog_swig.agc_cc_sptr_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _analog_swig.agc_cc_sptr_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _analog_swig.agc_cc_sptr_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _analog_swig.agc_cc_sptr_max_gain(self)

    def set_rate(self, *args, **kwargs):
        """set_rate(self, float rate)"""
        return _analog_swig.agc_cc_sptr_set_rate(self, *args, **kwargs)

    def set_reference(self, *args, **kwargs):
        """set_reference(self, float reference)"""
        return _analog_swig.agc_cc_sptr_set_reference(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _analog_swig.agc_cc_sptr_set_gain(self, *args, **kwargs)

    def set_max_gain(self, *args, **kwargs):
        """set_max_gain(self, float max_gain)"""
        return _analog_swig.agc_cc_sptr_set_max_gain(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.agc_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.agc_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.agc_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.agc_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.agc_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.agc_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.agc_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.agc_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.agc_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.agc_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.agc_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.agc_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.agc_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.agc_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.agc_cc_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.agc_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.agc_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.agc_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.agc_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.agc_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.agc_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.agc_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.agc_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.agc_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.agc_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.agc_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.agc_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.agc_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.agc_cc_sptr_message_ports_out(self)

agc_cc_sptr_swigregister = _analog_swig.agc_cc_sptr_swigregister
agc_cc_sptr_swigregister(agc_cc_sptr)

agc_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
agc_cc = agc_cc.make;

class agc_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::agc_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> agc_ff_sptr
        __init__(self, agc_ff p) -> agc_ff_sptr
        """
        this = _analog_swig.new_agc_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> agc_ff"""
        return _analog_swig.agc_ff_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_agc_ff_sptr
    __del__ = lambda self : None;
    def make(self, rate = 1e-4, reference = 1.0, gain = 1.0, max_gain = 0.0):
        """
        make(self, float rate = 1e-4, float reference = 1.0, float gain = 1.0, 
            float max_gain = 0.0) -> sptr
        """
        return _analog_swig.agc_ff_sptr_make(self, rate, reference, gain, max_gain)

    def rate(self):
        """rate(self) -> float"""
        return _analog_swig.agc_ff_sptr_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _analog_swig.agc_ff_sptr_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _analog_swig.agc_ff_sptr_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _analog_swig.agc_ff_sptr_max_gain(self)

    def set_rate(self, *args, **kwargs):
        """set_rate(self, float rate)"""
        return _analog_swig.agc_ff_sptr_set_rate(self, *args, **kwargs)

    def set_reference(self, *args, **kwargs):
        """set_reference(self, float reference)"""
        return _analog_swig.agc_ff_sptr_set_reference(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _analog_swig.agc_ff_sptr_set_gain(self, *args, **kwargs)

    def set_max_gain(self, *args, **kwargs):
        """set_max_gain(self, float max_gain)"""
        return _analog_swig.agc_ff_sptr_set_max_gain(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.agc_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.agc_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.agc_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.agc_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.agc_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.agc_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.agc_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.agc_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.agc_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.agc_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.agc_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.agc_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.agc_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.agc_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.agc_ff_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.agc_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.agc_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.agc_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.agc_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.agc_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.agc_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.agc_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.agc_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.agc_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.agc_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.agc_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.agc_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.agc_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.agc_ff_sptr_message_ports_out(self)

agc_ff_sptr_swigregister = _analog_swig.agc_ff_sptr_swigregister
agc_ff_sptr_swigregister(agc_ff_sptr)

agc_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
agc_ff = agc_ff.make;

class agc2_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::agc2_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> agc2_cc_sptr
        __init__(self, agc2_cc p) -> agc2_cc_sptr
        """
        this = _analog_swig.new_agc2_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> agc2_cc"""
        return _analog_swig.agc2_cc_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_agc2_cc_sptr
    __del__ = lambda self : None;
    def make(self, attack_rate = 1e-1, decay_rate = 1e-2, reference = 1.0, 
    gain = 1.0, max_gain = 0.0):
        """
        make(self, float attack_rate = 1e-1, float decay_rate = 1e-2, 
            float reference = 1.0, float gain = 1.0, float max_gain = 0.0) -> sptr
        """
        return _analog_swig.agc2_cc_sptr_make(self, attack_rate, decay_rate, reference, gain, max_gain)

    def attack_rate(self):
        """attack_rate(self) -> float"""
        return _analog_swig.agc2_cc_sptr_attack_rate(self)

    def decay_rate(self):
        """decay_rate(self) -> float"""
        return _analog_swig.agc2_cc_sptr_decay_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _analog_swig.agc2_cc_sptr_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _analog_swig.agc2_cc_sptr_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _analog_swig.agc2_cc_sptr_max_gain(self)

    def set_attack_rate(self, *args, **kwargs):
        """set_attack_rate(self, float rate)"""
        return _analog_swig.agc2_cc_sptr_set_attack_rate(self, *args, **kwargs)

    def set_decay_rate(self, *args, **kwargs):
        """set_decay_rate(self, float rate)"""
        return _analog_swig.agc2_cc_sptr_set_decay_rate(self, *args, **kwargs)

    def set_reference(self, *args, **kwargs):
        """set_reference(self, float reference)"""
        return _analog_swig.agc2_cc_sptr_set_reference(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _analog_swig.agc2_cc_sptr_set_gain(self, *args, **kwargs)

    def set_max_gain(self, *args, **kwargs):
        """set_max_gain(self, float max_gain)"""
        return _analog_swig.agc2_cc_sptr_set_max_gain(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.agc2_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.agc2_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.agc2_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.agc2_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.agc2_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.agc2_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.agc2_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.agc2_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.agc2_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.agc2_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.agc2_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.agc2_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.agc2_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.agc2_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.agc2_cc_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.agc2_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.agc2_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.agc2_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.agc2_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.agc2_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.agc2_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.agc2_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.agc2_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.agc2_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.agc2_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.agc2_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.agc2_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.agc2_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.agc2_cc_sptr_message_ports_out(self)

agc2_cc_sptr_swigregister = _analog_swig.agc2_cc_sptr_swigregister
agc2_cc_sptr_swigregister(agc2_cc_sptr)

agc2_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
agc2_cc = agc2_cc.make;

class agc2_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::agc2_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> agc2_ff_sptr
        __init__(self, agc2_ff p) -> agc2_ff_sptr
        """
        this = _analog_swig.new_agc2_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> agc2_ff"""
        return _analog_swig.agc2_ff_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_agc2_ff_sptr
    __del__ = lambda self : None;
    def make(self, attack_rate = 1e-1, decay_rate = 1e-2, reference = 1.0, 
    gain = 1.0, max_gain = 0.0):
        """
        make(self, float attack_rate = 1e-1, float decay_rate = 1e-2, 
            float reference = 1.0, float gain = 1.0, float max_gain = 0.0) -> sptr
        """
        return _analog_swig.agc2_ff_sptr_make(self, attack_rate, decay_rate, reference, gain, max_gain)

    def attack_rate(self):
        """attack_rate(self) -> float"""
        return _analog_swig.agc2_ff_sptr_attack_rate(self)

    def decay_rate(self):
        """decay_rate(self) -> float"""
        return _analog_swig.agc2_ff_sptr_decay_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _analog_swig.agc2_ff_sptr_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _analog_swig.agc2_ff_sptr_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _analog_swig.agc2_ff_sptr_max_gain(self)

    def set_attack_rate(self, *args, **kwargs):
        """set_attack_rate(self, float rate)"""
        return _analog_swig.agc2_ff_sptr_set_attack_rate(self, *args, **kwargs)

    def set_decay_rate(self, *args, **kwargs):
        """set_decay_rate(self, float rate)"""
        return _analog_swig.agc2_ff_sptr_set_decay_rate(self, *args, **kwargs)

    def set_reference(self, *args, **kwargs):
        """set_reference(self, float reference)"""
        return _analog_swig.agc2_ff_sptr_set_reference(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _analog_swig.agc2_ff_sptr_set_gain(self, *args, **kwargs)

    def set_max_gain(self, *args, **kwargs):
        """set_max_gain(self, float max_gain)"""
        return _analog_swig.agc2_ff_sptr_set_max_gain(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.agc2_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.agc2_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.agc2_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.agc2_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.agc2_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.agc2_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.agc2_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.agc2_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.agc2_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.agc2_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.agc2_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.agc2_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.agc2_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.agc2_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.agc2_ff_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.agc2_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.agc2_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.agc2_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.agc2_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.agc2_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.agc2_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.agc2_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.agc2_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.agc2_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.agc2_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.agc2_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.agc2_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.agc2_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.agc2_ff_sptr_message_ports_out(self)

agc2_ff_sptr_swigregister = _analog_swig.agc2_ff_sptr_swigregister
agc2_ff_sptr_swigregister(agc2_ff_sptr)

agc2_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
agc2_ff = agc2_ff.make;

class cpfsk_bc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::cpfsk_bc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> cpfsk_bc_sptr
        __init__(self, cpfsk_bc p) -> cpfsk_bc_sptr
        """
        this = _analog_swig.new_cpfsk_bc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> cpfsk_bc"""
        return _analog_swig.cpfsk_bc_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_cpfsk_bc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, float k, float ampl, int samples_per_sym) -> sptr"""
        return _analog_swig.cpfsk_bc_sptr_make(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, float amplitude)"""
        return _analog_swig.cpfsk_bc_sptr_set_amplitude(self, *args, **kwargs)

    def amplitude(self):
        """amplitude(self) -> float"""
        return _analog_swig.cpfsk_bc_sptr_amplitude(self)

    def freq(self):
        """freq(self) -> float"""
        return _analog_swig.cpfsk_bc_sptr_freq(self)

    def phase(self):
        """phase(self) -> float"""
        return _analog_swig.cpfsk_bc_sptr_phase(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.cpfsk_bc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.cpfsk_bc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.cpfsk_bc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.cpfsk_bc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.cpfsk_bc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.cpfsk_bc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.cpfsk_bc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.cpfsk_bc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.cpfsk_bc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.cpfsk_bc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.cpfsk_bc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.cpfsk_bc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.cpfsk_bc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.cpfsk_bc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.cpfsk_bc_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.cpfsk_bc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.cpfsk_bc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.cpfsk_bc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.cpfsk_bc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.cpfsk_bc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.cpfsk_bc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.cpfsk_bc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.cpfsk_bc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.cpfsk_bc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.cpfsk_bc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.cpfsk_bc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.cpfsk_bc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.cpfsk_bc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.cpfsk_bc_sptr_message_ports_out(self)

cpfsk_bc_sptr_swigregister = _analog_swig.cpfsk_bc_sptr_swigregister
cpfsk_bc_sptr_swigregister(cpfsk_bc_sptr)

cpfsk_bc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cpfsk_bc = cpfsk_bc.make;

class ctcss_squelch_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::ctcss_squelch_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ctcss_squelch_ff_sptr
        __init__(self, ctcss_squelch_ff p) -> ctcss_squelch_ff_sptr
        """
        this = _analog_swig.new_ctcss_squelch_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> ctcss_squelch_ff"""
        return _analog_swig.ctcss_squelch_ff_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_ctcss_squelch_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, int rate, float freq, float level, int len, int ramp, 
            bool gate) -> sptr
        """
        return _analog_swig.ctcss_squelch_ff_sptr_make(self, *args, **kwargs)

    def squelch_range(self):
        """squelch_range(self) -> __dummy_4__"""
        return _analog_swig.ctcss_squelch_ff_sptr_squelch_range(self)

    def level(self):
        """level(self) -> float"""
        return _analog_swig.ctcss_squelch_ff_sptr_level(self)

    def set_level(self, *args, **kwargs):
        """set_level(self, float level)"""
        return _analog_swig.ctcss_squelch_ff_sptr_set_level(self, *args, **kwargs)

    def len(self):
        """len(self) -> int"""
        return _analog_swig.ctcss_squelch_ff_sptr_len(self)

    def ramp(self):
        """ramp(self) -> int"""
        return _analog_swig.ctcss_squelch_ff_sptr_ramp(self)

    def set_ramp(self, *args, **kwargs):
        """set_ramp(self, int ramp)"""
        return _analog_swig.ctcss_squelch_ff_sptr_set_ramp(self, *args, **kwargs)

    def gate(self):
        """gate(self) -> bool"""
        return _analog_swig.ctcss_squelch_ff_sptr_gate(self)

    def set_gate(self, *args, **kwargs):
        """set_gate(self, bool gate)"""
        return _analog_swig.ctcss_squelch_ff_sptr_set_gate(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.ctcss_squelch_ff_sptr_unmuted(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.ctcss_squelch_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.ctcss_squelch_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.ctcss_squelch_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.ctcss_squelch_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.ctcss_squelch_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.ctcss_squelch_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.ctcss_squelch_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.ctcss_squelch_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.ctcss_squelch_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.ctcss_squelch_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.ctcss_squelch_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.ctcss_squelch_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.ctcss_squelch_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.ctcss_squelch_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.ctcss_squelch_ff_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.ctcss_squelch_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.ctcss_squelch_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.ctcss_squelch_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.ctcss_squelch_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.ctcss_squelch_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.ctcss_squelch_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.ctcss_squelch_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.ctcss_squelch_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.ctcss_squelch_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.ctcss_squelch_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.ctcss_squelch_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.ctcss_squelch_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.ctcss_squelch_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.ctcss_squelch_ff_sptr_message_ports_out(self)

ctcss_squelch_ff_sptr_swigregister = _analog_swig.ctcss_squelch_ff_sptr_swigregister
ctcss_squelch_ff_sptr_swigregister(ctcss_squelch_ff_sptr)

ctcss_squelch_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ctcss_squelch_ff = ctcss_squelch_ff.make;

class dpll_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::dpll_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> dpll_bb_sptr
        __init__(self, dpll_bb p) -> dpll_bb_sptr
        """
        this = _analog_swig.new_dpll_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> dpll_bb"""
        return _analog_swig.dpll_bb_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_dpll_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, float period, float gain) -> sptr"""
        return _analog_swig.dpll_bb_sptr_make(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _analog_swig.dpll_bb_sptr_set_gain(self, *args, **kwargs)

    def set_decision_threshold(self, *args, **kwargs):
        """set_decision_threshold(self, float thresh)"""
        return _analog_swig.dpll_bb_sptr_set_decision_threshold(self, *args, **kwargs)

    def gain(self):
        """gain(self) -> float"""
        return _analog_swig.dpll_bb_sptr_gain(self)

    def freq(self):
        """freq(self) -> float"""
        return _analog_swig.dpll_bb_sptr_freq(self)

    def phase(self):
        """phase(self) -> float"""
        return _analog_swig.dpll_bb_sptr_phase(self)

    def decision_threshold(self):
        """decision_threshold(self) -> float"""
        return _analog_swig.dpll_bb_sptr_decision_threshold(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.dpll_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.dpll_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.dpll_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.dpll_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.dpll_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.dpll_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.dpll_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.dpll_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.dpll_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.dpll_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.dpll_bb_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.dpll_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.dpll_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.dpll_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.dpll_bb_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.dpll_bb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.dpll_bb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.dpll_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.dpll_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.dpll_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.dpll_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.dpll_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.dpll_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.dpll_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.dpll_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.dpll_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.dpll_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.dpll_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.dpll_bb_sptr_message_ports_out(self)

dpll_bb_sptr_swigregister = _analog_swig.dpll_bb_sptr_swigregister
dpll_bb_sptr_swigregister(dpll_bb_sptr)

dpll_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dpll_bb = dpll_bb.make;

class feedforward_agc_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::feedforward_agc_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> feedforward_agc_cc_sptr
        __init__(self, feedforward_agc_cc p) -> feedforward_agc_cc_sptr
        """
        this = _analog_swig.new_feedforward_agc_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> feedforward_agc_cc"""
        return _analog_swig.feedforward_agc_cc_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_feedforward_agc_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int nsamples, float reference) -> sptr"""
        return _analog_swig.feedforward_agc_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.feedforward_agc_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.feedforward_agc_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.feedforward_agc_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.feedforward_agc_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.feedforward_agc_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.feedforward_agc_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.feedforward_agc_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.feedforward_agc_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.feedforward_agc_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.feedforward_agc_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.feedforward_agc_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.feedforward_agc_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.feedforward_agc_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.feedforward_agc_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.feedforward_agc_cc_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.feedforward_agc_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.feedforward_agc_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.feedforward_agc_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.feedforward_agc_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.feedforward_agc_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.feedforward_agc_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.feedforward_agc_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.feedforward_agc_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.feedforward_agc_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.feedforward_agc_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.feedforward_agc_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.feedforward_agc_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.feedforward_agc_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.feedforward_agc_cc_sptr_message_ports_out(self)

feedforward_agc_cc_sptr_swigregister = _analog_swig.feedforward_agc_cc_sptr_swigregister
feedforward_agc_cc_sptr_swigregister(feedforward_agc_cc_sptr)

feedforward_agc_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
feedforward_agc_cc = feedforward_agc_cc.make;

class fmdet_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::fmdet_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> fmdet_cf_sptr
        __init__(self, fmdet_cf p) -> fmdet_cf_sptr
        """
        this = _analog_swig.new_fmdet_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> fmdet_cf"""
        return _analog_swig.fmdet_cf_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_fmdet_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, float samplerate, float freq_low, float freq_high, 
            float scl) -> sptr
        """
        return _analog_swig.fmdet_cf_sptr_make(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scl)"""
        return _analog_swig.fmdet_cf_sptr_set_scale(self, *args, **kwargs)

    def set_freq_range(self, *args, **kwargs):
        """set_freq_range(self, float freq_low, float freq_high)"""
        return _analog_swig.fmdet_cf_sptr_set_freq_range(self, *args, **kwargs)

    def freq(self):
        """freq(self) -> float"""
        return _analog_swig.fmdet_cf_sptr_freq(self)

    def freq_high(self):
        """freq_high(self) -> float"""
        return _analog_swig.fmdet_cf_sptr_freq_high(self)

    def freq_low(self):
        """freq_low(self) -> float"""
        return _analog_swig.fmdet_cf_sptr_freq_low(self)

    def scale(self):
        """scale(self) -> float"""
        return _analog_swig.fmdet_cf_sptr_scale(self)

    def bias(self):
        """bias(self) -> float"""
        return _analog_swig.fmdet_cf_sptr_bias(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.fmdet_cf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.fmdet_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.fmdet_cf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.fmdet_cf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.fmdet_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.fmdet_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.fmdet_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.fmdet_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.fmdet_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.fmdet_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.fmdet_cf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.fmdet_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.fmdet_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.fmdet_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.fmdet_cf_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.fmdet_cf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.fmdet_cf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.fmdet_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.fmdet_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.fmdet_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.fmdet_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.fmdet_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.fmdet_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.fmdet_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.fmdet_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.fmdet_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.fmdet_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.fmdet_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.fmdet_cf_sptr_message_ports_out(self)

fmdet_cf_sptr_swigregister = _analog_swig.fmdet_cf_sptr_swigregister
fmdet_cf_sptr_swigregister(fmdet_cf_sptr)

fmdet_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fmdet_cf = fmdet_cf.make;

class frequency_modulator_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::frequency_modulator_fc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> frequency_modulator_fc_sptr
        __init__(self, frequency_modulator_fc p) -> frequency_modulator_fc_sptr
        """
        this = _analog_swig.new_frequency_modulator_fc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> frequency_modulator_fc"""
        return _analog_swig.frequency_modulator_fc_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_frequency_modulator_fc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, double sensitivity) -> sptr"""
        return _analog_swig.frequency_modulator_fc_sptr_make(self, *args, **kwargs)

    def set_sensitivity(self, *args, **kwargs):
        """set_sensitivity(self, float sens)"""
        return _analog_swig.frequency_modulator_fc_sptr_set_sensitivity(self, *args, **kwargs)

    def sensitivity(self):
        """sensitivity(self) -> float"""
        return _analog_swig.frequency_modulator_fc_sptr_sensitivity(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.frequency_modulator_fc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.frequency_modulator_fc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.frequency_modulator_fc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.frequency_modulator_fc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.frequency_modulator_fc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.frequency_modulator_fc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.frequency_modulator_fc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.frequency_modulator_fc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.frequency_modulator_fc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.frequency_modulator_fc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.frequency_modulator_fc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.frequency_modulator_fc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.frequency_modulator_fc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.frequency_modulator_fc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.frequency_modulator_fc_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.frequency_modulator_fc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.frequency_modulator_fc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.frequency_modulator_fc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.frequency_modulator_fc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.frequency_modulator_fc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.frequency_modulator_fc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.frequency_modulator_fc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.frequency_modulator_fc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.frequency_modulator_fc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.frequency_modulator_fc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.frequency_modulator_fc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.frequency_modulator_fc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.frequency_modulator_fc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.frequency_modulator_fc_sptr_message_ports_out(self)

frequency_modulator_fc_sptr_swigregister = _analog_swig.frequency_modulator_fc_sptr_swigregister
frequency_modulator_fc_sptr_swigregister(frequency_modulator_fc_sptr)

frequency_modulator_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frequency_modulator_fc = frequency_modulator_fc.make;

class noise_source_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::noise_source_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> noise_source_s_sptr
        __init__(self, noise_source_s p) -> noise_source_s_sptr
        """
        this = _analog_swig.new_noise_source_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> noise_source_s"""
        return _analog_swig.noise_source_s_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_noise_source_s_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, noise_type_t type, float ampl, long seed) -> sptr"""
        return _analog_swig.noise_source_s_sptr_make(self, *args, **kwargs)

    def set_type(self, *args, **kwargs):
        """set_type(self, noise_type_t type)"""
        return _analog_swig.noise_source_s_sptr_set_type(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, float ampl)"""
        return _analog_swig.noise_source_s_sptr_set_amplitude(self, *args, **kwargs)

    def type(self):
        """type(self) -> noise_type_t"""
        return _analog_swig.noise_source_s_sptr_type(self)

    def amplitude(self):
        """amplitude(self) -> float"""
        return _analog_swig.noise_source_s_sptr_amplitude(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.noise_source_s_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.noise_source_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.noise_source_s_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.noise_source_s_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.noise_source_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.noise_source_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.noise_source_s_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.noise_source_s_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.noise_source_s_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.noise_source_s_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.noise_source_s_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.noise_source_s_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.noise_source_s_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.noise_source_s_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.noise_source_s_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.noise_source_s_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.noise_source_s_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.noise_source_s_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.noise_source_s_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.noise_source_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.noise_source_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.noise_source_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.noise_source_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.noise_source_s_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.noise_source_s_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.noise_source_s_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.noise_source_s_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.noise_source_s_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.noise_source_s_sptr_message_ports_out(self)

noise_source_s_sptr_swigregister = _analog_swig.noise_source_s_sptr_swigregister
noise_source_s_sptr_swigregister(noise_source_s_sptr)

noise_source_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
noise_source_s = noise_source_s.make;

class noise_source_i_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::noise_source_i)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> noise_source_i_sptr
        __init__(self, noise_source_i p) -> noise_source_i_sptr
        """
        this = _analog_swig.new_noise_source_i_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> noise_source_i"""
        return _analog_swig.noise_source_i_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_noise_source_i_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, noise_type_t type, float ampl, long seed) -> sptr"""
        return _analog_swig.noise_source_i_sptr_make(self, *args, **kwargs)

    def set_type(self, *args, **kwargs):
        """set_type(self, noise_type_t type)"""
        return _analog_swig.noise_source_i_sptr_set_type(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, float ampl)"""
        return _analog_swig.noise_source_i_sptr_set_amplitude(self, *args, **kwargs)

    def type(self):
        """type(self) -> noise_type_t"""
        return _analog_swig.noise_source_i_sptr_type(self)

    def amplitude(self):
        """amplitude(self) -> float"""
        return _analog_swig.noise_source_i_sptr_amplitude(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.noise_source_i_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.noise_source_i_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.noise_source_i_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.noise_source_i_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.noise_source_i_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.noise_source_i_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.noise_source_i_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.noise_source_i_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.noise_source_i_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.noise_source_i_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.noise_source_i_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.noise_source_i_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.noise_source_i_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.noise_source_i_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.noise_source_i_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.noise_source_i_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.noise_source_i_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.noise_source_i_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.noise_source_i_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.noise_source_i_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.noise_source_i_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.noise_source_i_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.noise_source_i_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.noise_source_i_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.noise_source_i_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.noise_source_i_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.noise_source_i_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.noise_source_i_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.noise_source_i_sptr_message_ports_out(self)

noise_source_i_sptr_swigregister = _analog_swig.noise_source_i_sptr_swigregister
noise_source_i_sptr_swigregister(noise_source_i_sptr)

noise_source_i_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
noise_source_i = noise_source_i.make;

class noise_source_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::noise_source_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> noise_source_f_sptr
        __init__(self, noise_source_f p) -> noise_source_f_sptr
        """
        this = _analog_swig.new_noise_source_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> noise_source_f"""
        return _analog_swig.noise_source_f_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_noise_source_f_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, noise_type_t type, float ampl, long seed) -> sptr"""
        return _analog_swig.noise_source_f_sptr_make(self, *args, **kwargs)

    def set_type(self, *args, **kwargs):
        """set_type(self, noise_type_t type)"""
        return _analog_swig.noise_source_f_sptr_set_type(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, float ampl)"""
        return _analog_swig.noise_source_f_sptr_set_amplitude(self, *args, **kwargs)

    def type(self):
        """type(self) -> noise_type_t"""
        return _analog_swig.noise_source_f_sptr_type(self)

    def amplitude(self):
        """amplitude(self) -> float"""
        return _analog_swig.noise_source_f_sptr_amplitude(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.noise_source_f_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.noise_source_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.noise_source_f_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.noise_source_f_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.noise_source_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.noise_source_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.noise_source_f_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.noise_source_f_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.noise_source_f_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.noise_source_f_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.noise_source_f_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.noise_source_f_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.noise_source_f_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.noise_source_f_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.noise_source_f_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.noise_source_f_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.noise_source_f_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.noise_source_f_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.noise_source_f_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.noise_source_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.noise_source_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.noise_source_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.noise_source_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.noise_source_f_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.noise_source_f_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.noise_source_f_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.noise_source_f_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.noise_source_f_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.noise_source_f_sptr_message_ports_out(self)

noise_source_f_sptr_swigregister = _analog_swig.noise_source_f_sptr_swigregister
noise_source_f_sptr_swigregister(noise_source_f_sptr)

noise_source_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
noise_source_f = noise_source_f.make;

class noise_source_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::noise_source_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> noise_source_c_sptr
        __init__(self, noise_source_c p) -> noise_source_c_sptr
        """
        this = _analog_swig.new_noise_source_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> noise_source_c"""
        return _analog_swig.noise_source_c_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_noise_source_c_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, noise_type_t type, float ampl, long seed) -> sptr"""
        return _analog_swig.noise_source_c_sptr_make(self, *args, **kwargs)

    def set_type(self, *args, **kwargs):
        """set_type(self, noise_type_t type)"""
        return _analog_swig.noise_source_c_sptr_set_type(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, float ampl)"""
        return _analog_swig.noise_source_c_sptr_set_amplitude(self, *args, **kwargs)

    def type(self):
        """type(self) -> noise_type_t"""
        return _analog_swig.noise_source_c_sptr_type(self)

    def amplitude(self):
        """amplitude(self) -> float"""
        return _analog_swig.noise_source_c_sptr_amplitude(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.noise_source_c_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.noise_source_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.noise_source_c_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.noise_source_c_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.noise_source_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.noise_source_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.noise_source_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.noise_source_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.noise_source_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.noise_source_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.noise_source_c_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.noise_source_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.noise_source_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.noise_source_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.noise_source_c_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.noise_source_c_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.noise_source_c_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.noise_source_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.noise_source_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.noise_source_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.noise_source_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.noise_source_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.noise_source_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.noise_source_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.noise_source_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.noise_source_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.noise_source_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.noise_source_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.noise_source_c_sptr_message_ports_out(self)

noise_source_c_sptr_swigregister = _analog_swig.noise_source_c_sptr_swigregister
noise_source_c_sptr_swigregister(noise_source_c_sptr)

noise_source_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
noise_source_c = noise_source_c.make;

class phase_modulator_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::phase_modulator_fc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> phase_modulator_fc_sptr
        __init__(self, phase_modulator_fc p) -> phase_modulator_fc_sptr
        """
        this = _analog_swig.new_phase_modulator_fc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> phase_modulator_fc"""
        return _analog_swig.phase_modulator_fc_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_phase_modulator_fc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, double sensitivity) -> sptr"""
        return _analog_swig.phase_modulator_fc_sptr_make(self, *args, **kwargs)

    def sensitivity(self):
        """sensitivity(self) -> double"""
        return _analog_swig.phase_modulator_fc_sptr_sensitivity(self)

    def phase(self):
        """phase(self) -> double"""
        return _analog_swig.phase_modulator_fc_sptr_phase(self)

    def set_sensitivity(self, *args, **kwargs):
        """set_sensitivity(self, double s)"""
        return _analog_swig.phase_modulator_fc_sptr_set_sensitivity(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, double p)"""
        return _analog_swig.phase_modulator_fc_sptr_set_phase(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.phase_modulator_fc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.phase_modulator_fc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.phase_modulator_fc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.phase_modulator_fc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.phase_modulator_fc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.phase_modulator_fc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.phase_modulator_fc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.phase_modulator_fc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.phase_modulator_fc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.phase_modulator_fc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.phase_modulator_fc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.phase_modulator_fc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.phase_modulator_fc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.phase_modulator_fc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.phase_modulator_fc_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.phase_modulator_fc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.phase_modulator_fc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.phase_modulator_fc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.phase_modulator_fc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.phase_modulator_fc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.phase_modulator_fc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.phase_modulator_fc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.phase_modulator_fc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.phase_modulator_fc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.phase_modulator_fc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.phase_modulator_fc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.phase_modulator_fc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.phase_modulator_fc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.phase_modulator_fc_sptr_message_ports_out(self)

phase_modulator_fc_sptr_swigregister = _analog_swig.phase_modulator_fc_sptr_swigregister
phase_modulator_fc_sptr_swigregister(phase_modulator_fc_sptr)

phase_modulator_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
phase_modulator_fc = phase_modulator_fc.make;

class pll_carriertracking_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::pll_carriertracking_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pll_carriertracking_cc_sptr
        __init__(self, pll_carriertracking_cc p) -> pll_carriertracking_cc_sptr
        """
        this = _analog_swig.new_pll_carriertracking_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> pll_carriertracking_cc"""
        return _analog_swig.pll_carriertracking_cc_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_pll_carriertracking_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, float loop_bw, float max_freq, float min_freq) -> sptr"""
        return _analog_swig.pll_carriertracking_cc_sptr_make(self, *args, **kwargs)

    def lock_detector(self):
        """lock_detector(self) -> bool"""
        return _analog_swig.pll_carriertracking_cc_sptr_lock_detector(self)

    def squelch_enable(self, *args, **kwargs):
        """squelch_enable(self, bool arg0) -> bool"""
        return _analog_swig.pll_carriertracking_cc_sptr_squelch_enable(self, *args, **kwargs)

    def set_lock_threshold(self, *args, **kwargs):
        """set_lock_threshold(self, float arg0) -> float"""
        return _analog_swig.pll_carriertracking_cc_sptr_set_lock_threshold(self, *args, **kwargs)

    def set_loop_bandwidth(self, *args, **kwargs):
        """set_loop_bandwidth(self, float bw)"""
        return _analog_swig.pll_carriertracking_cc_sptr_set_loop_bandwidth(self, *args, **kwargs)

    def set_damping_factor(self, *args, **kwargs):
        """set_damping_factor(self, float df)"""
        return _analog_swig.pll_carriertracking_cc_sptr_set_damping_factor(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, float alpha)"""
        return _analog_swig.pll_carriertracking_cc_sptr_set_alpha(self, *args, **kwargs)

    def set_beta(self, *args, **kwargs):
        """set_beta(self, float beta)"""
        return _analog_swig.pll_carriertracking_cc_sptr_set_beta(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, float freq)"""
        return _analog_swig.pll_carriertracking_cc_sptr_set_frequency(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, float phase)"""
        return _analog_swig.pll_carriertracking_cc_sptr_set_phase(self, *args, **kwargs)

    def set_min_freq(self, *args, **kwargs):
        """set_min_freq(self, float freq)"""
        return _analog_swig.pll_carriertracking_cc_sptr_set_min_freq(self, *args, **kwargs)

    def set_max_freq(self, *args, **kwargs):
        """set_max_freq(self, float freq)"""
        return _analog_swig.pll_carriertracking_cc_sptr_set_max_freq(self, *args, **kwargs)

    def get_loop_bandwidth(self):
        """get_loop_bandwidth(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_sptr_get_loop_bandwidth(self)

    def get_damping_factor(self):
        """get_damping_factor(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_sptr_get_damping_factor(self)

    def get_alpha(self):
        """get_alpha(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_sptr_get_alpha(self)

    def get_beta(self):
        """get_beta(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_sptr_get_beta(self)

    def get_frequency(self):
        """get_frequency(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_sptr_get_frequency(self)

    def get_phase(self):
        """get_phase(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_sptr_get_phase(self)

    def get_min_freq(self):
        """get_min_freq(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_sptr_get_min_freq(self)

    def get_max_freq(self):
        """get_max_freq(self) -> float"""
        return _analog_swig.pll_carriertracking_cc_sptr_get_max_freq(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.pll_carriertracking_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.pll_carriertracking_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.pll_carriertracking_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.pll_carriertracking_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.pll_carriertracking_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.pll_carriertracking_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.pll_carriertracking_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.pll_carriertracking_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.pll_carriertracking_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.pll_carriertracking_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.pll_carriertracking_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.pll_carriertracking_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.pll_carriertracking_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.pll_carriertracking_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.pll_carriertracking_cc_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.pll_carriertracking_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.pll_carriertracking_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.pll_carriertracking_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.pll_carriertracking_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.pll_carriertracking_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.pll_carriertracking_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.pll_carriertracking_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.pll_carriertracking_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.pll_carriertracking_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.pll_carriertracking_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.pll_carriertracking_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.pll_carriertracking_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.pll_carriertracking_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.pll_carriertracking_cc_sptr_message_ports_out(self)

pll_carriertracking_cc_sptr_swigregister = _analog_swig.pll_carriertracking_cc_sptr_swigregister
pll_carriertracking_cc_sptr_swigregister(pll_carriertracking_cc_sptr)

pll_carriertracking_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pll_carriertracking_cc = pll_carriertracking_cc.make;

class pll_freqdet_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::pll_freqdet_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pll_freqdet_cf_sptr
        __init__(self, pll_freqdet_cf p) -> pll_freqdet_cf_sptr
        """
        this = _analog_swig.new_pll_freqdet_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> pll_freqdet_cf"""
        return _analog_swig.pll_freqdet_cf_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_pll_freqdet_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, float loop_bw, float max_freq, float min_freq) -> sptr"""
        return _analog_swig.pll_freqdet_cf_sptr_make(self, *args, **kwargs)

    def set_loop_bandwidth(self, *args, **kwargs):
        """set_loop_bandwidth(self, float bw)"""
        return _analog_swig.pll_freqdet_cf_sptr_set_loop_bandwidth(self, *args, **kwargs)

    def set_damping_factor(self, *args, **kwargs):
        """set_damping_factor(self, float df)"""
        return _analog_swig.pll_freqdet_cf_sptr_set_damping_factor(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, float alpha)"""
        return _analog_swig.pll_freqdet_cf_sptr_set_alpha(self, *args, **kwargs)

    def set_beta(self, *args, **kwargs):
        """set_beta(self, float beta)"""
        return _analog_swig.pll_freqdet_cf_sptr_set_beta(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, float freq)"""
        return _analog_swig.pll_freqdet_cf_sptr_set_frequency(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, float phase)"""
        return _analog_swig.pll_freqdet_cf_sptr_set_phase(self, *args, **kwargs)

    def set_min_freq(self, *args, **kwargs):
        """set_min_freq(self, float freq)"""
        return _analog_swig.pll_freqdet_cf_sptr_set_min_freq(self, *args, **kwargs)

    def set_max_freq(self, *args, **kwargs):
        """set_max_freq(self, float freq)"""
        return _analog_swig.pll_freqdet_cf_sptr_set_max_freq(self, *args, **kwargs)

    def get_loop_bandwidth(self):
        """get_loop_bandwidth(self) -> float"""
        return _analog_swig.pll_freqdet_cf_sptr_get_loop_bandwidth(self)

    def get_damping_factor(self):
        """get_damping_factor(self) -> float"""
        return _analog_swig.pll_freqdet_cf_sptr_get_damping_factor(self)

    def get_alpha(self):
        """get_alpha(self) -> float"""
        return _analog_swig.pll_freqdet_cf_sptr_get_alpha(self)

    def get_beta(self):
        """get_beta(self) -> float"""
        return _analog_swig.pll_freqdet_cf_sptr_get_beta(self)

    def get_frequency(self):
        """get_frequency(self) -> float"""
        return _analog_swig.pll_freqdet_cf_sptr_get_frequency(self)

    def get_phase(self):
        """get_phase(self) -> float"""
        return _analog_swig.pll_freqdet_cf_sptr_get_phase(self)

    def get_min_freq(self):
        """get_min_freq(self) -> float"""
        return _analog_swig.pll_freqdet_cf_sptr_get_min_freq(self)

    def get_max_freq(self):
        """get_max_freq(self) -> float"""
        return _analog_swig.pll_freqdet_cf_sptr_get_max_freq(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.pll_freqdet_cf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.pll_freqdet_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.pll_freqdet_cf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.pll_freqdet_cf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.pll_freqdet_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.pll_freqdet_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.pll_freqdet_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.pll_freqdet_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.pll_freqdet_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.pll_freqdet_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.pll_freqdet_cf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.pll_freqdet_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.pll_freqdet_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.pll_freqdet_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.pll_freqdet_cf_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.pll_freqdet_cf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.pll_freqdet_cf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.pll_freqdet_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.pll_freqdet_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.pll_freqdet_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.pll_freqdet_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.pll_freqdet_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.pll_freqdet_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.pll_freqdet_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.pll_freqdet_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.pll_freqdet_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.pll_freqdet_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.pll_freqdet_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.pll_freqdet_cf_sptr_message_ports_out(self)

pll_freqdet_cf_sptr_swigregister = _analog_swig.pll_freqdet_cf_sptr_swigregister
pll_freqdet_cf_sptr_swigregister(pll_freqdet_cf_sptr)

pll_freqdet_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pll_freqdet_cf = pll_freqdet_cf.make;

class pll_refout_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::pll_refout_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pll_refout_cc_sptr
        __init__(self, pll_refout_cc p) -> pll_refout_cc_sptr
        """
        this = _analog_swig.new_pll_refout_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> pll_refout_cc"""
        return _analog_swig.pll_refout_cc_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_pll_refout_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, float loop_bw, float max_freq, float min_freq) -> sptr"""
        return _analog_swig.pll_refout_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.pll_refout_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.pll_refout_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.pll_refout_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.pll_refout_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.pll_refout_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.pll_refout_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.pll_refout_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.pll_refout_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.pll_refout_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.pll_refout_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.pll_refout_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.pll_refout_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.pll_refout_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.pll_refout_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.pll_refout_cc_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.pll_refout_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.pll_refout_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.pll_refout_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.pll_refout_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.pll_refout_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.pll_refout_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.pll_refout_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.pll_refout_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.pll_refout_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.pll_refout_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.pll_refout_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.pll_refout_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.pll_refout_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.pll_refout_cc_sptr_message_ports_out(self)

pll_refout_cc_sptr_swigregister = _analog_swig.pll_refout_cc_sptr_swigregister
pll_refout_cc_sptr_swigregister(pll_refout_cc_sptr)

pll_refout_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pll_refout_cc = pll_refout_cc.make;

class probe_avg_mag_sqrd_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::probe_avg_mag_sqrd_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> probe_avg_mag_sqrd_c_sptr
        __init__(self, probe_avg_mag_sqrd_c p) -> probe_avg_mag_sqrd_c_sptr
        """
        this = _analog_swig.new_probe_avg_mag_sqrd_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> probe_avg_mag_sqrd_c"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_probe_avg_mag_sqrd_c_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, double threshold_db, double alpha = 0.0001) -> sptr"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_make(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_unmuted(self)

    def level(self):
        """level(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_level(self)

    def threshold(self):
        """threshold(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_threshold(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_set_alpha(self, *args, **kwargs)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double decibels)"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_set_threshold(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.probe_avg_mag_sqrd_c_sptr_message_ports_out(self)

probe_avg_mag_sqrd_c_sptr_swigregister = _analog_swig.probe_avg_mag_sqrd_c_sptr_swigregister
probe_avg_mag_sqrd_c_sptr_swigregister(probe_avg_mag_sqrd_c_sptr)

probe_avg_mag_sqrd_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_avg_mag_sqrd_c = probe_avg_mag_sqrd_c.make;

class probe_avg_mag_sqrd_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::probe_avg_mag_sqrd_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> probe_avg_mag_sqrd_cf_sptr
        __init__(self, probe_avg_mag_sqrd_cf p) -> probe_avg_mag_sqrd_cf_sptr
        """
        this = _analog_swig.new_probe_avg_mag_sqrd_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> probe_avg_mag_sqrd_cf"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_probe_avg_mag_sqrd_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, double threshold_db, double alpha = 0.0001) -> sptr"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_make(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_unmuted(self)

    def level(self):
        """level(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_level(self)

    def threshold(self):
        """threshold(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_threshold(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_set_alpha(self, *args, **kwargs)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double decibels)"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_set_threshold(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.probe_avg_mag_sqrd_cf_sptr_message_ports_out(self)

probe_avg_mag_sqrd_cf_sptr_swigregister = _analog_swig.probe_avg_mag_sqrd_cf_sptr_swigregister
probe_avg_mag_sqrd_cf_sptr_swigregister(probe_avg_mag_sqrd_cf_sptr)

probe_avg_mag_sqrd_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_avg_mag_sqrd_cf = probe_avg_mag_sqrd_cf.make;

class probe_avg_mag_sqrd_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::probe_avg_mag_sqrd_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> probe_avg_mag_sqrd_f_sptr
        __init__(self, probe_avg_mag_sqrd_f p) -> probe_avg_mag_sqrd_f_sptr
        """
        this = _analog_swig.new_probe_avg_mag_sqrd_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> probe_avg_mag_sqrd_f"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_probe_avg_mag_sqrd_f_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, double threshold_db, double alpha = 0.0001) -> sptr"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_make(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_unmuted(self)

    def level(self):
        """level(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_level(self)

    def threshold(self):
        """threshold(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_threshold(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_set_alpha(self, *args, **kwargs)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double decibels)"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_set_threshold(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.probe_avg_mag_sqrd_f_sptr_message_ports_out(self)

probe_avg_mag_sqrd_f_sptr_swigregister = _analog_swig.probe_avg_mag_sqrd_f_sptr_swigregister
probe_avg_mag_sqrd_f_sptr_swigregister(probe_avg_mag_sqrd_f_sptr)

probe_avg_mag_sqrd_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_avg_mag_sqrd_f = probe_avg_mag_sqrd_f.make;

class pwr_squelch_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::pwr_squelch_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pwr_squelch_cc_sptr
        __init__(self, pwr_squelch_cc p) -> pwr_squelch_cc_sptr
        """
        this = _analog_swig.new_pwr_squelch_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> pwr_squelch_cc"""
        return _analog_swig.pwr_squelch_cc_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_pwr_squelch_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, double db, double alpha = 0.0001, int ramp = 0, bool gate = False) -> sptr"""
        return _analog_swig.pwr_squelch_cc_sptr_make(self, *args, **kwargs)

    def squelch_range(self):
        """squelch_range(self) -> __dummy_4__"""
        return _analog_swig.pwr_squelch_cc_sptr_squelch_range(self)

    def threshold(self):
        """threshold(self) -> double"""
        return _analog_swig.pwr_squelch_cc_sptr_threshold(self)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double db)"""
        return _analog_swig.pwr_squelch_cc_sptr_set_threshold(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _analog_swig.pwr_squelch_cc_sptr_set_alpha(self, *args, **kwargs)

    def ramp(self):
        """ramp(self) -> int"""
        return _analog_swig.pwr_squelch_cc_sptr_ramp(self)

    def set_ramp(self, *args, **kwargs):
        """set_ramp(self, int ramp)"""
        return _analog_swig.pwr_squelch_cc_sptr_set_ramp(self, *args, **kwargs)

    def gate(self):
        """gate(self) -> bool"""
        return _analog_swig.pwr_squelch_cc_sptr_gate(self)

    def set_gate(self, *args, **kwargs):
        """set_gate(self, bool gate)"""
        return _analog_swig.pwr_squelch_cc_sptr_set_gate(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.pwr_squelch_cc_sptr_unmuted(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.pwr_squelch_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.pwr_squelch_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.pwr_squelch_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.pwr_squelch_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.pwr_squelch_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.pwr_squelch_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.pwr_squelch_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.pwr_squelch_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.pwr_squelch_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.pwr_squelch_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.pwr_squelch_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.pwr_squelch_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.pwr_squelch_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.pwr_squelch_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.pwr_squelch_cc_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.pwr_squelch_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.pwr_squelch_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.pwr_squelch_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.pwr_squelch_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.pwr_squelch_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.pwr_squelch_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.pwr_squelch_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.pwr_squelch_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.pwr_squelch_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.pwr_squelch_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.pwr_squelch_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.pwr_squelch_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.pwr_squelch_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.pwr_squelch_cc_sptr_message_ports_out(self)

pwr_squelch_cc_sptr_swigregister = _analog_swig.pwr_squelch_cc_sptr_swigregister
pwr_squelch_cc_sptr_swigregister(pwr_squelch_cc_sptr)

pwr_squelch_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pwr_squelch_cc = pwr_squelch_cc.make;

class pwr_squelch_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::pwr_squelch_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pwr_squelch_ff_sptr
        __init__(self, pwr_squelch_ff p) -> pwr_squelch_ff_sptr
        """
        this = _analog_swig.new_pwr_squelch_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> pwr_squelch_ff"""
        return _analog_swig.pwr_squelch_ff_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_pwr_squelch_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, double db, double alpha = 0.0001, int ramp = 0, bool gate = False) -> sptr"""
        return _analog_swig.pwr_squelch_ff_sptr_make(self, *args, **kwargs)

    def squelch_range(self):
        """squelch_range(self) -> __dummy_4__"""
        return _analog_swig.pwr_squelch_ff_sptr_squelch_range(self)

    def threshold(self):
        """threshold(self) -> double"""
        return _analog_swig.pwr_squelch_ff_sptr_threshold(self)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double db)"""
        return _analog_swig.pwr_squelch_ff_sptr_set_threshold(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _analog_swig.pwr_squelch_ff_sptr_set_alpha(self, *args, **kwargs)

    def ramp(self):
        """ramp(self) -> int"""
        return _analog_swig.pwr_squelch_ff_sptr_ramp(self)

    def set_ramp(self, *args, **kwargs):
        """set_ramp(self, int ramp)"""
        return _analog_swig.pwr_squelch_ff_sptr_set_ramp(self, *args, **kwargs)

    def gate(self):
        """gate(self) -> bool"""
        return _analog_swig.pwr_squelch_ff_sptr_gate(self)

    def set_gate(self, *args, **kwargs):
        """set_gate(self, bool gate)"""
        return _analog_swig.pwr_squelch_ff_sptr_set_gate(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.pwr_squelch_ff_sptr_unmuted(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.pwr_squelch_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.pwr_squelch_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.pwr_squelch_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.pwr_squelch_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.pwr_squelch_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.pwr_squelch_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.pwr_squelch_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.pwr_squelch_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.pwr_squelch_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.pwr_squelch_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.pwr_squelch_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.pwr_squelch_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.pwr_squelch_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.pwr_squelch_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.pwr_squelch_ff_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.pwr_squelch_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.pwr_squelch_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.pwr_squelch_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.pwr_squelch_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.pwr_squelch_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.pwr_squelch_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.pwr_squelch_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.pwr_squelch_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.pwr_squelch_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.pwr_squelch_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.pwr_squelch_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.pwr_squelch_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.pwr_squelch_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.pwr_squelch_ff_sptr_message_ports_out(self)

pwr_squelch_ff_sptr_swigregister = _analog_swig.pwr_squelch_ff_sptr_swigregister
pwr_squelch_ff_sptr_swigregister(pwr_squelch_ff_sptr)

pwr_squelch_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pwr_squelch_ff = pwr_squelch_ff.make;

class quadrature_demod_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::quadrature_demod_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> quadrature_demod_cf_sptr
        __init__(self, quadrature_demod_cf p) -> quadrature_demod_cf_sptr
        """
        this = _analog_swig.new_quadrature_demod_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> quadrature_demod_cf"""
        return _analog_swig.quadrature_demod_cf_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_quadrature_demod_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, float gain) -> sptr"""
        return _analog_swig.quadrature_demod_cf_sptr_make(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _analog_swig.quadrature_demod_cf_sptr_set_gain(self, *args, **kwargs)

    def gain(self):
        """gain(self) -> float"""
        return _analog_swig.quadrature_demod_cf_sptr_gain(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.quadrature_demod_cf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.quadrature_demod_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.quadrature_demod_cf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.quadrature_demod_cf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.quadrature_demod_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.quadrature_demod_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.quadrature_demod_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.quadrature_demod_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.quadrature_demod_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.quadrature_demod_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.quadrature_demod_cf_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.quadrature_demod_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.quadrature_demod_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.quadrature_demod_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.quadrature_demod_cf_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.quadrature_demod_cf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.quadrature_demod_cf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.quadrature_demod_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.quadrature_demod_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.quadrature_demod_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.quadrature_demod_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.quadrature_demod_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.quadrature_demod_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.quadrature_demod_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.quadrature_demod_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.quadrature_demod_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.quadrature_demod_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.quadrature_demod_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.quadrature_demod_cf_sptr_message_ports_out(self)

quadrature_demod_cf_sptr_swigregister = _analog_swig.quadrature_demod_cf_sptr_swigregister
quadrature_demod_cf_sptr_swigregister(quadrature_demod_cf_sptr)

quadrature_demod_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
quadrature_demod_cf = quadrature_demod_cf.make;

class rail_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::rail_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rail_ff_sptr
        __init__(self, rail_ff p) -> rail_ff_sptr
        """
        this = _analog_swig.new_rail_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> rail_ff"""
        return _analog_swig.rail_ff_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_rail_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, float lo, float hi) -> sptr"""
        return _analog_swig.rail_ff_sptr_make(self, *args, **kwargs)

    def lo(self):
        """lo(self) -> float"""
        return _analog_swig.rail_ff_sptr_lo(self)

    def hi(self):
        """hi(self) -> float"""
        return _analog_swig.rail_ff_sptr_hi(self)

    def set_lo(self, *args, **kwargs):
        """set_lo(self, float lo)"""
        return _analog_swig.rail_ff_sptr_set_lo(self, *args, **kwargs)

    def set_hi(self, *args, **kwargs):
        """set_hi(self, float hi)"""
        return _analog_swig.rail_ff_sptr_set_hi(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.rail_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.rail_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.rail_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.rail_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.rail_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.rail_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.rail_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.rail_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.rail_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.rail_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.rail_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.rail_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.rail_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.rail_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.rail_ff_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.rail_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.rail_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.rail_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.rail_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.rail_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.rail_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.rail_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.rail_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.rail_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.rail_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.rail_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.rail_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.rail_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.rail_ff_sptr_message_ports_out(self)

rail_ff_sptr_swigregister = _analog_swig.rail_ff_sptr_swigregister
rail_ff_sptr_swigregister(rail_ff_sptr)

rail_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rail_ff = rail_ff.make;

class sig_source_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::sig_source_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> sig_source_s_sptr
        __init__(self, sig_source_s p) -> sig_source_s_sptr
        """
        this = _analog_swig.new_sig_source_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> sig_source_s"""
        return _analog_swig.sig_source_s_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_sig_source_s_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, double sampling_freq, gr_waveform_t waveform, double wave_freq, 
            double ampl, short offset = 0) -> sptr
        """
        return _analog_swig.sig_source_s_sptr_make(self, *args, **kwargs)

    def sampling_freq(self):
        """sampling_freq(self) -> double"""
        return _analog_swig.sig_source_s_sptr_sampling_freq(self)

    def waveform(self):
        """waveform(self) -> gr_waveform_t"""
        return _analog_swig.sig_source_s_sptr_waveform(self)

    def frequency(self):
        """frequency(self) -> double"""
        return _analog_swig.sig_source_s_sptr_frequency(self)

    def amplitude(self):
        """amplitude(self) -> double"""
        return _analog_swig.sig_source_s_sptr_amplitude(self)

    def offset(self):
        """offset(self) -> short"""
        return _analog_swig.sig_source_s_sptr_offset(self)

    def set_sampling_freq(self, *args, **kwargs):
        """set_sampling_freq(self, double sampling_freq)"""
        return _analog_swig.sig_source_s_sptr_set_sampling_freq(self, *args, **kwargs)

    def set_waveform(self, *args, **kwargs):
        """set_waveform(self, gr_waveform_t waveform)"""
        return _analog_swig.sig_source_s_sptr_set_waveform(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, double frequency)"""
        return _analog_swig.sig_source_s_sptr_set_frequency(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, double ampl)"""
        return _analog_swig.sig_source_s_sptr_set_amplitude(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, short offset)"""
        return _analog_swig.sig_source_s_sptr_set_offset(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.sig_source_s_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.sig_source_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.sig_source_s_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.sig_source_s_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.sig_source_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.sig_source_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.sig_source_s_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.sig_source_s_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.sig_source_s_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.sig_source_s_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.sig_source_s_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.sig_source_s_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.sig_source_s_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.sig_source_s_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.sig_source_s_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.sig_source_s_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.sig_source_s_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.sig_source_s_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.sig_source_s_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.sig_source_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.sig_source_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.sig_source_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.sig_source_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.sig_source_s_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.sig_source_s_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.sig_source_s_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.sig_source_s_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.sig_source_s_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.sig_source_s_sptr_message_ports_out(self)

sig_source_s_sptr_swigregister = _analog_swig.sig_source_s_sptr_swigregister
sig_source_s_sptr_swigregister(sig_source_s_sptr)

sig_source_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sig_source_s = sig_source_s.make;

class sig_source_i_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::sig_source_i)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> sig_source_i_sptr
        __init__(self, sig_source_i p) -> sig_source_i_sptr
        """
        this = _analog_swig.new_sig_source_i_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> sig_source_i"""
        return _analog_swig.sig_source_i_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_sig_source_i_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, double sampling_freq, gr_waveform_t waveform, double wave_freq, 
            double ampl, int offset = 0) -> sptr
        """
        return _analog_swig.sig_source_i_sptr_make(self, *args, **kwargs)

    def sampling_freq(self):
        """sampling_freq(self) -> double"""
        return _analog_swig.sig_source_i_sptr_sampling_freq(self)

    def waveform(self):
        """waveform(self) -> gr_waveform_t"""
        return _analog_swig.sig_source_i_sptr_waveform(self)

    def frequency(self):
        """frequency(self) -> double"""
        return _analog_swig.sig_source_i_sptr_frequency(self)

    def amplitude(self):
        """amplitude(self) -> double"""
        return _analog_swig.sig_source_i_sptr_amplitude(self)

    def offset(self):
        """offset(self) -> int"""
        return _analog_swig.sig_source_i_sptr_offset(self)

    def set_sampling_freq(self, *args, **kwargs):
        """set_sampling_freq(self, double sampling_freq)"""
        return _analog_swig.sig_source_i_sptr_set_sampling_freq(self, *args, **kwargs)

    def set_waveform(self, *args, **kwargs):
        """set_waveform(self, gr_waveform_t waveform)"""
        return _analog_swig.sig_source_i_sptr_set_waveform(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, double frequency)"""
        return _analog_swig.sig_source_i_sptr_set_frequency(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, double ampl)"""
        return _analog_swig.sig_source_i_sptr_set_amplitude(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, int offset)"""
        return _analog_swig.sig_source_i_sptr_set_offset(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.sig_source_i_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.sig_source_i_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.sig_source_i_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.sig_source_i_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.sig_source_i_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.sig_source_i_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.sig_source_i_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.sig_source_i_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.sig_source_i_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.sig_source_i_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.sig_source_i_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.sig_source_i_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.sig_source_i_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.sig_source_i_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.sig_source_i_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.sig_source_i_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.sig_source_i_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.sig_source_i_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.sig_source_i_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.sig_source_i_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.sig_source_i_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.sig_source_i_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.sig_source_i_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.sig_source_i_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.sig_source_i_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.sig_source_i_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.sig_source_i_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.sig_source_i_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.sig_source_i_sptr_message_ports_out(self)

sig_source_i_sptr_swigregister = _analog_swig.sig_source_i_sptr_swigregister
sig_source_i_sptr_swigregister(sig_source_i_sptr)

sig_source_i_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sig_source_i = sig_source_i.make;

class sig_source_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::sig_source_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> sig_source_f_sptr
        __init__(self, sig_source_f p) -> sig_source_f_sptr
        """
        this = _analog_swig.new_sig_source_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> sig_source_f"""
        return _analog_swig.sig_source_f_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_sig_source_f_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, double sampling_freq, gr_waveform_t waveform, double wave_freq, 
            double ampl, float offset = 0) -> sptr
        """
        return _analog_swig.sig_source_f_sptr_make(self, *args, **kwargs)

    def sampling_freq(self):
        """sampling_freq(self) -> double"""
        return _analog_swig.sig_source_f_sptr_sampling_freq(self)

    def waveform(self):
        """waveform(self) -> gr_waveform_t"""
        return _analog_swig.sig_source_f_sptr_waveform(self)

    def frequency(self):
        """frequency(self) -> double"""
        return _analog_swig.sig_source_f_sptr_frequency(self)

    def amplitude(self):
        """amplitude(self) -> double"""
        return _analog_swig.sig_source_f_sptr_amplitude(self)

    def offset(self):
        """offset(self) -> float"""
        return _analog_swig.sig_source_f_sptr_offset(self)

    def set_sampling_freq(self, *args, **kwargs):
        """set_sampling_freq(self, double sampling_freq)"""
        return _analog_swig.sig_source_f_sptr_set_sampling_freq(self, *args, **kwargs)

    def set_waveform(self, *args, **kwargs):
        """set_waveform(self, gr_waveform_t waveform)"""
        return _analog_swig.sig_source_f_sptr_set_waveform(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, double frequency)"""
        return _analog_swig.sig_source_f_sptr_set_frequency(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, double ampl)"""
        return _analog_swig.sig_source_f_sptr_set_amplitude(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, float offset)"""
        return _analog_swig.sig_source_f_sptr_set_offset(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.sig_source_f_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.sig_source_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.sig_source_f_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.sig_source_f_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.sig_source_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.sig_source_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.sig_source_f_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.sig_source_f_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.sig_source_f_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.sig_source_f_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.sig_source_f_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.sig_source_f_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.sig_source_f_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.sig_source_f_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.sig_source_f_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.sig_source_f_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.sig_source_f_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.sig_source_f_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.sig_source_f_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.sig_source_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.sig_source_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.sig_source_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.sig_source_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.sig_source_f_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.sig_source_f_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.sig_source_f_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.sig_source_f_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.sig_source_f_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.sig_source_f_sptr_message_ports_out(self)

sig_source_f_sptr_swigregister = _analog_swig.sig_source_f_sptr_swigregister
sig_source_f_sptr_swigregister(sig_source_f_sptr)

sig_source_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sig_source_f = sig_source_f.make;

class sig_source_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::sig_source_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> sig_source_c_sptr
        __init__(self, sig_source_c p) -> sig_source_c_sptr
        """
        this = _analog_swig.new_sig_source_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> sig_source_c"""
        return _analog_swig.sig_source_c_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_sig_source_c_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, double sampling_freq, gr_waveform_t waveform, double wave_freq, 
            double ampl, gr_complex offset = 0) -> sptr
        """
        return _analog_swig.sig_source_c_sptr_make(self, *args, **kwargs)

    def sampling_freq(self):
        """sampling_freq(self) -> double"""
        return _analog_swig.sig_source_c_sptr_sampling_freq(self)

    def waveform(self):
        """waveform(self) -> gr_waveform_t"""
        return _analog_swig.sig_source_c_sptr_waveform(self)

    def frequency(self):
        """frequency(self) -> double"""
        return _analog_swig.sig_source_c_sptr_frequency(self)

    def amplitude(self):
        """amplitude(self) -> double"""
        return _analog_swig.sig_source_c_sptr_amplitude(self)

    def offset(self):
        """offset(self) -> gr_complex"""
        return _analog_swig.sig_source_c_sptr_offset(self)

    def set_sampling_freq(self, *args, **kwargs):
        """set_sampling_freq(self, double sampling_freq)"""
        return _analog_swig.sig_source_c_sptr_set_sampling_freq(self, *args, **kwargs)

    def set_waveform(self, *args, **kwargs):
        """set_waveform(self, gr_waveform_t waveform)"""
        return _analog_swig.sig_source_c_sptr_set_waveform(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, double frequency)"""
        return _analog_swig.sig_source_c_sptr_set_frequency(self, *args, **kwargs)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, double ampl)"""
        return _analog_swig.sig_source_c_sptr_set_amplitude(self, *args, **kwargs)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, gr_complex offset)"""
        return _analog_swig.sig_source_c_sptr_set_offset(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.sig_source_c_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.sig_source_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.sig_source_c_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.sig_source_c_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.sig_source_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.sig_source_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.sig_source_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.sig_source_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.sig_source_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.sig_source_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.sig_source_c_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.sig_source_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.sig_source_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.sig_source_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.sig_source_c_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.sig_source_c_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.sig_source_c_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.sig_source_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.sig_source_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.sig_source_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.sig_source_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.sig_source_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.sig_source_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.sig_source_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.sig_source_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.sig_source_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.sig_source_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.sig_source_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.sig_source_c_sptr_message_ports_out(self)

sig_source_c_sptr_swigregister = _analog_swig.sig_source_c_sptr_swigregister
sig_source_c_sptr_swigregister(sig_source_c_sptr)

sig_source_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sig_source_c = sig_source_c.make;

class simple_squelch_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::analog::simple_squelch_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> simple_squelch_cc_sptr
        __init__(self, simple_squelch_cc p) -> simple_squelch_cc_sptr
        """
        this = _analog_swig.new_simple_squelch_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> simple_squelch_cc"""
        return _analog_swig.simple_squelch_cc_sptr___deref__(self)

    __swig_destroy__ = _analog_swig.delete_simple_squelch_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, double threshold_db, double alpha) -> sptr"""
        return _analog_swig.simple_squelch_cc_sptr_make(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _analog_swig.simple_squelch_cc_sptr_unmuted(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _analog_swig.simple_squelch_cc_sptr_set_alpha(self, *args, **kwargs)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double decibels)"""
        return _analog_swig.simple_squelch_cc_sptr_set_threshold(self, *args, **kwargs)

    def threshold(self):
        """threshold(self) -> double"""
        return _analog_swig.simple_squelch_cc_sptr_threshold(self)

    def squelch_range(self):
        """squelch_range(self) -> __dummy_4__"""
        return _analog_swig.simple_squelch_cc_sptr_squelch_range(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _analog_swig.simple_squelch_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _analog_swig.simple_squelch_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _analog_swig.simple_squelch_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _analog_swig.simple_squelch_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _analog_swig.simple_squelch_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _analog_swig.simple_squelch_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _analog_swig.simple_squelch_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _analog_swig.simple_squelch_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _analog_swig.simple_squelch_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _analog_swig.simple_squelch_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _analog_swig.simple_squelch_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _analog_swig.simple_squelch_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _analog_swig.simple_squelch_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _analog_swig.simple_squelch_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _analog_swig.simple_squelch_cc_sptr_set_min_output_buffer(self, *args)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _analog_swig.simple_squelch_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _analog_swig.simple_squelch_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _analog_swig.simple_squelch_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(self) -> string"""
        return _analog_swig.simple_squelch_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.simple_squelch_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _analog_swig.simple_squelch_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _analog_swig.simple_squelch_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _analog_swig.simple_squelch_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _analog_swig.simple_squelch_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(self) -> string"""
        return _analog_swig.simple_squelch_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(self, string name)"""
        return _analog_swig.simple_squelch_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(self, pmt_t which_port, pmt_t msg)"""
        return _analog_swig.simple_squelch_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(self) -> pmt_t"""
        return _analog_swig.simple_squelch_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(self) -> pmt_t"""
        return _analog_swig.simple_squelch_cc_sptr_message_ports_out(self)

simple_squelch_cc_sptr_swigregister = _analog_swig.simple_squelch_cc_sptr_swigregister
simple_squelch_cc_sptr_swigregister(simple_squelch_cc_sptr)

simple_squelch_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
simple_squelch_cc = simple_squelch_cc.make;



