/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyObject_print,        /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyObject_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (flags & SWIG_POINTER_IMPLICIT_CONV) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    if (inst) {
      Py_DECREF(robj);
      robj = inst;
    }
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res;

#ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
#else
  if (!PyString_Check(name))
#endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  res = -1;
  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_allocator_type swig_types[0]
#define SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t swig_types[1]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t swig_types[2]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t swig_types[3]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t swig_types[4]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t swig_types[5]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t swig_types[6]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t swig_types[7]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t swig_types[8]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t swig_types[9]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t swig_types[10]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t swig_types[11]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t swig_types[12]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t swig_types[13]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t swig_types[14]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t swig_types[15]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t swig_types[16]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t swig_types[17]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t swig_types[18]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t swig_types[19]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t swig_types[20]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t swig_types[21]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t swig_types[22]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t swig_types[23]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t swig_types[24]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t swig_types[25]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t swig_types[26]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t swig_types[27]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t swig_types[28]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t swig_types[29]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t swig_types[30]
#define SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t swig_types[31]
#define SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t swig_types[32]
#define SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t swig_types[33]
#define SWIGTYPE_p_boost__shared_ptrT_gr_block_t swig_types[34]
#define SWIGTYPE_p_boost__shared_ptrT_gr_buffer_reader_t swig_types[35]
#define SWIGTYPE_p_boost__shared_ptrT_gr_buffer_t swig_types[36]
#define SWIGTYPE_p_boost__shared_ptrT_gr_dispatcher_t swig_types[37]
#define SWIGTYPE_p_boost__shared_ptrT_gr_hier_block2_t swig_types[38]
#define SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t swig_types[39]
#define SWIGTYPE_p_boost__shared_ptrT_gr_message_t swig_types[40]
#define SWIGTYPE_p_boost__shared_ptrT_gr_msg_queue_t swig_types[41]
#define SWIGTYPE_p_boost__shared_ptrT_gr_single_threaded_scheduler_t swig_types[42]
#define SWIGTYPE_p_boost__shared_ptrT_gr_top_block_t swig_types[43]
#define SWIGTYPE_p_char swig_types[44]
#define SWIGTYPE_p_difference_type swig_types[45]
#define SWIGTYPE_p_double swig_types[46]
#define SWIGTYPE_p_float swig_types[47]
#define SWIGTYPE_p_gr__analog__agc2_cc swig_types[48]
#define SWIGTYPE_p_gr__analog__agc2_ff swig_types[49]
#define SWIGTYPE_p_gr__analog__agc_cc swig_types[50]
#define SWIGTYPE_p_gr__analog__agc_ff swig_types[51]
#define SWIGTYPE_p_gr__analog__cpfsk_bc swig_types[52]
#define SWIGTYPE_p_gr__analog__cpm swig_types[53]
#define SWIGTYPE_p_gr__analog__ctcss_squelch_ff swig_types[54]
#define SWIGTYPE_p_gr__analog__dpll_bb swig_types[55]
#define SWIGTYPE_p_gr__analog__feedforward_agc_cc swig_types[56]
#define SWIGTYPE_p_gr__analog__fmdet_cf swig_types[57]
#define SWIGTYPE_p_gr__analog__frequency_modulator_fc swig_types[58]
#define SWIGTYPE_p_gr__analog__gr_waveform_t swig_types[59]
#define SWIGTYPE_p_gr__analog__lfsr swig_types[60]
#define SWIGTYPE_p_gr__analog__noise_source_c swig_types[61]
#define SWIGTYPE_p_gr__analog__noise_source_f swig_types[62]
#define SWIGTYPE_p_gr__analog__noise_source_i swig_types[63]
#define SWIGTYPE_p_gr__analog__noise_source_s swig_types[64]
#define SWIGTYPE_p_gr__analog__noise_type_t swig_types[65]
#define SWIGTYPE_p_gr__analog__phase_modulator_fc swig_types[66]
#define SWIGTYPE_p_gr__analog__pll_carriertracking_cc swig_types[67]
#define SWIGTYPE_p_gr__analog__pll_freqdet_cf swig_types[68]
#define SWIGTYPE_p_gr__analog__pll_refout_cc swig_types[69]
#define SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_c swig_types[70]
#define SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_cf swig_types[71]
#define SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_f swig_types[72]
#define SWIGTYPE_p_gr__analog__pwr_squelch_cc swig_types[73]
#define SWIGTYPE_p_gr__analog__pwr_squelch_ff swig_types[74]
#define SWIGTYPE_p_gr__analog__quadrature_demod_cf swig_types[75]
#define SWIGTYPE_p_gr__analog__rail_ff swig_types[76]
#define SWIGTYPE_p_gr__analog__sig_source_c swig_types[77]
#define SWIGTYPE_p_gr__analog__sig_source_f swig_types[78]
#define SWIGTYPE_p_gr__analog__sig_source_i swig_types[79]
#define SWIGTYPE_p_gr__analog__sig_source_s swig_types[80]
#define SWIGTYPE_p_gr__analog__simple_squelch_cc swig_types[81]
#define SWIGTYPE_p_gr__analog__squelch_base_cc swig_types[82]
#define SWIGTYPE_p_gr__analog__squelch_base_ff swig_types[83]
#define SWIGTYPE_p_gr_basic_block swig_types[84]
#define SWIGTYPE_p_gr_block swig_types[85]
#define SWIGTYPE_p_gr_hier_block2 swig_types[86]
#define SWIGTYPE_p_gr_sync_block swig_types[87]
#define SWIGTYPE_p_gr_sync_decimator swig_types[88]
#define SWIGTYPE_p_gr_sync_interpolator swig_types[89]
#define SWIGTYPE_p_gr_top_block swig_types[90]
#define SWIGTYPE_p_gruel__rt_status_t swig_types[91]
#define SWIGTYPE_p_int swig_types[92]
#define SWIGTYPE_p_long_long swig_types[93]
#define SWIGTYPE_p_short swig_types[94]
#define SWIGTYPE_p_signed_char swig_types[95]
#define SWIGTYPE_p_size_type swig_types[96]
#define SWIGTYPE_p_sptr swig_types[97]
#define SWIGTYPE_p_std__complexT_double_t swig_types[98]
#define SWIGTYPE_p_std__complexT_float_t swig_types[99]
#define SWIGTYPE_p_std__invalid_argument swig_types[100]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[101]
#define SWIGTYPE_p_unsigned_char swig_types[102]
#define SWIGTYPE_p_unsigned_int swig_types[103]
#define SWIGTYPE_p_unsigned_long_long swig_types[104]
#define SWIGTYPE_p_unsigned_short swig_types[105]
#define SWIGTYPE_p_value_type swig_types[106]
static swig_type_info *swig_types[108];
static swig_module_info swig_module = {swig_types, 107, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodern' option"
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodernargs' option"
#endif

/*-----------------------------------------------
              @(target):= _analog_swig.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__analog_swig

#else
#  define SWIG_init    init_analog_swig

#endif
#define SWIG_name    "_analog_swig"

#define SWIGVERSION 0x020004 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}



#define GR_PYTHON_BLOCKING_CODE(code) {                                 \
    PyThreadState *_save;                                               \
    _save = PyEval_SaveThread();                                        \
    try{code}                                                           \
    catch(...){PyEval_RestoreThread(_save); throw;}                     \
    PyEval_RestoreThread(_save);                                        \
}



#include "gnuradio_swig_bug_workaround.h"	// mandatory bug fix
#include <gr_types.h>
#include <stddef.h>		// size_t
#include <complex>


#include <complex> 


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <string>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v = InputSeq()) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


#include "analog/cpm.h"
#include "analog/noise_type.h"
#include "analog/agc_cc.h"
#include "analog/agc_ff.h"
#include "analog/agc2_cc.h"
#include "analog/agc2_ff.h"
#include "analog/cpfsk_bc.h"
#include "analog/ctcss_squelch_ff.h"
#include "analog/dpll_bb.h"
#include "analog/feedforward_agc_cc.h"
#include "analog/fmdet_cf.h"
#include "analog/frequency_modulator_fc.h"
#include "analog/lfsr.h"
#include "analog/noise_source_s.h"
#include "analog/noise_source_i.h"
#include "analog/noise_source_f.h"
#include "analog/noise_source_c.h"
#include "analog/phase_modulator_fc.h"
#include "analog/pll_carriertracking_cc.h"
#include "analog/pll_freqdet_cf.h"
#include "analog/pll_refout_cc.h"
#include "analog/probe_avg_mag_sqrd_c.h"
#include "analog/probe_avg_mag_sqrd_cf.h"
#include "analog/probe_avg_mag_sqrd_f.h"
#include "analog/pwr_squelch_cc.h"
#include "analog/pwr_squelch_ff.h"
#include "analog/quadrature_demod_cf.h"
#include "analog/rail_ff.h"
#include "analog/sincos.h"
#include "analog/sig_source_s.h"
#include "analog/sig_source_i.h"
#include "analog/sig_source_f.h"
#include "analog/sig_source_c.h"
#include "analog/sig_source_waveform.h"
#include "analog/simple_squelch_cc.h"
#include "analog/squelch_base_cc.h"
#include "analog/squelch_base_ff.h"


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


namespace swig {
  template <> struct traits<float > {
    typedef value_category category;
    static const char* type_name() { return"float"; }
  };  
  template <>  struct traits_asval<float > {   
    typedef float value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_float (obj, val);
    }
  };
  template <>  struct traits_from<float > {
    typedef float value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_float  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<float, std::allocator< float > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "float" "," "std::allocator< float >" " >";
	  }
	};
      }
    

SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_std_complex_Sl_float_Sg_ (PyObject *o, std::complex<float> *val)
{
  if (PyComplex_Check(o)) {
    double re = PyComplex_RealAsDouble(o);
    double im = PyComplex_ImagAsDouble(o);
    if ((-FLT_MAX <= re && re <= FLT_MAX) && (-FLT_MAX <= im && im <= FLT_MAX)) {
      if (val) *val = std::complex<float>(static_cast< float >(re),
				  static_cast< float >(im));
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }    
  } else {
    float re;
    int res = SWIG_AddCast(SWIG_AsVal_float (o, &re));
    if (SWIG_IsOK(res)) {
      if (val) *val = std::complex<float>(re, 0.0);
      return res;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE PyObject*
SWIG_From_std_complex_Sl_float_Sg_  (/*@SWIG:/usr/share/swig2.0/typemaps/swigmacros.swg,104,%ifcplusplus@*/

const std::complex<float>&



/*@SWIG@*/ c)
{
  return PyComplex_FromDoubles(std::real(c), std::imag(c));
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_SwigPyIterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator_value",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SwigPyIterator_incr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SwigPyIterator_decr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  ptrdiff_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_distance",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      try {
        result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_equal",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      try {
        result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator_copy",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator_next",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->next();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator___next__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->__next__();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator_previous",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->previous();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_advance",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___eq__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___ne__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___iadd__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___isub__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___add__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator___sub__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator___sub__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_cpm_phase_response(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::cpm::cpm_type arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 = (double) 0.3 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "type",(char *) "samples_per_sym",(char *) "L",(char *) "beta", NULL 
  };
  std::vector< float,std::allocator< float > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:cpm_phase_response",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpm_phase_response" "', argument " "1"" of type '" "gr::analog::cpm::cpm_type""'");
  } 
  arg1 = static_cast< gr::analog::cpm::cpm_type >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpm_phase_response" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpm_phase_response" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpm_phase_response" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    try {
      result = gr::analog::cpm::phase_response(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cpm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::cpm *result = 0 ;
  
  {
    try {
      result = (gr::analog::cpm *)new gr::analog::cpm();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__cpm, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cpm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::cpm *arg1 = (gr::analog::cpm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_cpm",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__cpm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cpm" "', argument " "1"" of type '" "gr::analog::cpm *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::cpm * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cpm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__cpm, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_agc_cc_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 = (float) 1e-4 ;
  float arg2 = (float) 1.0 ;
  float arg3 = (float) 1.0 ;
  float arg4 = (float) 0.0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "rate",(char *) "reference",(char *) "gain",(char *) "max_gain", NULL 
  };
  gr::analog::agc_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOO:agc_cc_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_float(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "agc_cc_make" "', argument " "1"" of type '" "float""'");
    } 
    arg1 = static_cast< float >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_make" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc_cc_make" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "agc_cc_make" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  {
    try {
      result = gr::analog::agc_cc::make(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::agc_cc::sptr(static_cast< const gr::analog::agc_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc_cc *arg1 = (gr::analog::agc_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_rate" "', argument " "1"" of type '" "gr::analog::agc_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc_cc const *)arg1)->rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc_cc *arg1 = (gr::analog::agc_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_reference",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_reference" "', argument " "1"" of type '" "gr::analog::agc_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc_cc const *)arg1)->reference();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc_cc *arg1 = (gr::analog::agc_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_gain" "', argument " "1"" of type '" "gr::analog::agc_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc_cc const *)arg1)->gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc_cc *arg1 = (gr::analog::agc_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_max_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_max_gain" "', argument " "1"" of type '" "gr::analog::agc_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc_cc const *)arg1)->max_gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_set_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc_cc *arg1 = (gr::analog::agc_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_set_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_set_rate" "', argument " "1"" of type '" "gr::analog::agc_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_set_rate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_set_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc_cc *arg1 = (gr::analog::agc_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "reference", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_set_reference",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_set_reference" "', argument " "1"" of type '" "gr::analog::agc_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_set_reference" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_reference(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_set_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc_cc *arg1 = (gr::analog::agc_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_set_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_set_gain" "', argument " "1"" of type '" "gr::analog::agc_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_set_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_set_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc_cc *arg1 = (gr::analog::agc_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_set_max_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_set_max_gain" "', argument " "1"" of type '" "gr::analog::agc_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_set_max_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_max_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_agc_cc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc_cc *arg1 = (gr::analog::agc_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_agc_cc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_cc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_agc_cc" "', argument " "1"" of type '" "gr::analog::agc_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_cc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *agc_cc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__agc_cc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_agc_ff_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 = (float) 1e-4 ;
  float arg2 = (float) 1.0 ;
  float arg3 = (float) 1.0 ;
  float arg4 = (float) 0.0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "rate",(char *) "reference",(char *) "gain",(char *) "max_gain", NULL 
  };
  gr::analog::agc_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOO:agc_ff_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_float(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "agc_ff_make" "', argument " "1"" of type '" "float""'");
    } 
    arg1 = static_cast< float >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_make" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc_ff_make" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "agc_ff_make" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  {
    try {
      result = gr::analog::agc_ff::make(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::agc_ff::sptr(static_cast< const gr::analog::agc_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc_ff *arg1 = (gr::analog::agc_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_rate" "', argument " "1"" of type '" "gr::analog::agc_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_ff * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc_ff const *)arg1)->rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc_ff *arg1 = (gr::analog::agc_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_reference",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_reference" "', argument " "1"" of type '" "gr::analog::agc_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_ff * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc_ff const *)arg1)->reference();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc_ff *arg1 = (gr::analog::agc_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_gain" "', argument " "1"" of type '" "gr::analog::agc_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_ff * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc_ff const *)arg1)->gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc_ff *arg1 = (gr::analog::agc_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_max_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_max_gain" "', argument " "1"" of type '" "gr::analog::agc_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_ff * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc_ff const *)arg1)->max_gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_set_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc_ff *arg1 = (gr::analog::agc_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_set_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_set_rate" "', argument " "1"" of type '" "gr::analog::agc_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_set_rate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_set_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc_ff *arg1 = (gr::analog::agc_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "reference", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_set_reference",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_set_reference" "', argument " "1"" of type '" "gr::analog::agc_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_set_reference" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_reference(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_set_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc_ff *arg1 = (gr::analog::agc_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_set_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_set_gain" "', argument " "1"" of type '" "gr::analog::agc_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_set_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_set_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc_ff *arg1 = (gr::analog::agc_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_set_max_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_set_max_gain" "', argument " "1"" of type '" "gr::analog::agc_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_set_max_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_max_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_agc_ff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc_ff *arg1 = (gr::analog::agc_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_agc_ff",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_ff, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_agc_ff" "', argument " "1"" of type '" "gr::analog::agc_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_ff * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *agc_ff_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__agc_ff, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_agc2_cc_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 = (float) 1e-1 ;
  float arg2 = (float) 1e-2 ;
  float arg3 = (float) 1.0 ;
  float arg4 = (float) 1.0 ;
  float arg5 = (float) 0.0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "attack_rate",(char *) "decay_rate",(char *) "reference",(char *) "gain",(char *) "max_gain", NULL 
  };
  gr::analog::agc2_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOOO:agc2_cc_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_float(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "agc2_cc_make" "', argument " "1"" of type '" "float""'");
    } 
    arg1 = static_cast< float >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_make" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc2_cc_make" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "agc2_cc_make" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_float(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "agc2_cc_make" "', argument " "5"" of type '" "float""'");
    } 
    arg5 = static_cast< float >(val5);
  }
  {
    try {
      result = gr::analog::agc2_cc::make(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::agc2_cc::sptr(static_cast< const gr::analog::agc2_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_attack_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_cc *arg1 = (gr::analog::agc2_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_attack_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_attack_rate" "', argument " "1"" of type '" "gr::analog::agc2_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc2_cc const *)arg1)->attack_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_decay_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_cc *arg1 = (gr::analog::agc2_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_decay_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_decay_rate" "', argument " "1"" of type '" "gr::analog::agc2_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc2_cc const *)arg1)->decay_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_cc *arg1 = (gr::analog::agc2_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_reference",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_reference" "', argument " "1"" of type '" "gr::analog::agc2_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc2_cc const *)arg1)->reference();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_cc *arg1 = (gr::analog::agc2_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_gain" "', argument " "1"" of type '" "gr::analog::agc2_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc2_cc const *)arg1)->gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_cc *arg1 = (gr::analog::agc2_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_max_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_max_gain" "', argument " "1"" of type '" "gr::analog::agc2_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc2_cc const *)arg1)->max_gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_set_attack_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc2_cc *arg1 = (gr::analog::agc2_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_set_attack_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_set_attack_rate" "', argument " "1"" of type '" "gr::analog::agc2_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_set_attack_rate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_attack_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_set_decay_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc2_cc *arg1 = (gr::analog::agc2_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_set_decay_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_set_decay_rate" "', argument " "1"" of type '" "gr::analog::agc2_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_set_decay_rate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_decay_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_set_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc2_cc *arg1 = (gr::analog::agc2_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "reference", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_set_reference",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_set_reference" "', argument " "1"" of type '" "gr::analog::agc2_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_set_reference" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_reference(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_set_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc2_cc *arg1 = (gr::analog::agc2_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_set_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_set_gain" "', argument " "1"" of type '" "gr::analog::agc2_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_set_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_set_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc2_cc *arg1 = (gr::analog::agc2_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_set_max_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_set_max_gain" "', argument " "1"" of type '" "gr::analog::agc2_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_set_max_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_max_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_agc2_cc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_cc *arg1 = (gr::analog::agc2_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_agc2_cc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_cc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_agc2_cc" "', argument " "1"" of type '" "gr::analog::agc2_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_cc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *agc2_cc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__agc2_cc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_agc2_ff_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 = (float) 1e-1 ;
  float arg2 = (float) 1e-2 ;
  float arg3 = (float) 1.0 ;
  float arg4 = (float) 1.0 ;
  float arg5 = (float) 0.0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "attack_rate",(char *) "decay_rate",(char *) "reference",(char *) "gain",(char *) "max_gain", NULL 
  };
  gr::analog::agc2_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOOO:agc2_ff_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_float(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "agc2_ff_make" "', argument " "1"" of type '" "float""'");
    } 
    arg1 = static_cast< float >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_make" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc2_ff_make" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "agc2_ff_make" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_float(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "agc2_ff_make" "', argument " "5"" of type '" "float""'");
    } 
    arg5 = static_cast< float >(val5);
  }
  {
    try {
      result = gr::analog::agc2_ff::make(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::agc2_ff::sptr(static_cast< const gr::analog::agc2_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_attack_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_ff *arg1 = (gr::analog::agc2_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_attack_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_attack_rate" "', argument " "1"" of type '" "gr::analog::agc2_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_ff * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc2_ff const *)arg1)->attack_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_decay_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_ff *arg1 = (gr::analog::agc2_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_decay_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_decay_rate" "', argument " "1"" of type '" "gr::analog::agc2_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_ff * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc2_ff const *)arg1)->decay_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_ff *arg1 = (gr::analog::agc2_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_reference",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_reference" "', argument " "1"" of type '" "gr::analog::agc2_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_ff * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc2_ff const *)arg1)->reference();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_ff *arg1 = (gr::analog::agc2_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_gain" "', argument " "1"" of type '" "gr::analog::agc2_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_ff * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc2_ff const *)arg1)->gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_ff *arg1 = (gr::analog::agc2_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_max_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_max_gain" "', argument " "1"" of type '" "gr::analog::agc2_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_ff * >(argp1);
  {
    try {
      result = (float)((gr::analog::agc2_ff const *)arg1)->max_gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_set_attack_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc2_ff *arg1 = (gr::analog::agc2_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_set_attack_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_set_attack_rate" "', argument " "1"" of type '" "gr::analog::agc2_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_set_attack_rate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_attack_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_set_decay_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc2_ff *arg1 = (gr::analog::agc2_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_set_decay_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_set_decay_rate" "', argument " "1"" of type '" "gr::analog::agc2_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_set_decay_rate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_decay_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_set_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc2_ff *arg1 = (gr::analog::agc2_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "reference", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_set_reference",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_set_reference" "', argument " "1"" of type '" "gr::analog::agc2_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_set_reference" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_reference(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_set_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc2_ff *arg1 = (gr::analog::agc2_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_set_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_set_gain" "', argument " "1"" of type '" "gr::analog::agc2_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_set_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_set_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::agc2_ff *arg1 = (gr::analog::agc2_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_set_max_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_set_max_gain" "', argument " "1"" of type '" "gr::analog::agc2_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_set_max_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_max_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_agc2_ff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_ff *arg1 = (gr::analog::agc2_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_agc2_ff",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_ff, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_agc2_ff" "', argument " "1"" of type '" "gr::analog::agc2_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_ff * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *agc2_ff_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__agc2_ff, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_cpfsk_bc_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  int arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "k",(char *) "ampl",(char *) "samples_per_sym", NULL 
  };
  gr::analog::cpfsk_bc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:cpfsk_bc_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cpfsk_bc_make" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpfsk_bc_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = gr::analog::cpfsk_bc::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::cpfsk_bc::sptr(static_cast< const gr::analog::cpfsk_bc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::cpfsk_bc *arg1 = (gr::analog::cpfsk_bc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "amplitude", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:cpfsk_bc_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__cpfsk_bc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_set_amplitude" "', argument " "1"" of type '" "gr::analog::cpfsk_bc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::cpfsk_bc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_set_amplitude" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::cpfsk_bc *arg1 = (gr::analog::cpfsk_bc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__cpfsk_bc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_amplitude" "', argument " "1"" of type '" "gr::analog::cpfsk_bc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::cpfsk_bc * >(argp1);
  {
    try {
      result = (float)(arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::cpfsk_bc *arg1 = (gr::analog::cpfsk_bc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__cpfsk_bc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_freq" "', argument " "1"" of type '" "gr::analog::cpfsk_bc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::cpfsk_bc * >(argp1);
  {
    try {
      result = (float)(arg1)->freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::cpfsk_bc *arg1 = (gr::analog::cpfsk_bc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_phase",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__cpfsk_bc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_phase" "', argument " "1"" of type '" "gr::analog::cpfsk_bc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::cpfsk_bc * >(argp1);
  {
    try {
      result = (float)(arg1)->phase();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cpfsk_bc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::cpfsk_bc *arg1 = (gr::analog::cpfsk_bc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_cpfsk_bc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__cpfsk_bc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cpfsk_bc" "', argument " "1"" of type '" "gr::analog::cpfsk_bc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::cpfsk_bc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cpfsk_bc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__cpfsk_bc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "rate",(char *) "freq",(char *) "level",(char *) "len",(char *) "ramp",(char *) "gate", NULL 
  };
  gr::analog::ctcss_squelch_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOO:ctcss_squelch_ff_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ctcss_squelch_ff_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ctcss_squelch_ff_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ctcss_squelch_ff_make" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ctcss_squelch_ff_make" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ctcss_squelch_ff_make" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      result = gr::analog::ctcss_squelch_ff::make(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::ctcss_squelch_ff::sptr(static_cast< const gr::analog::ctcss_squelch_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_squelch_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::ctcss_squelch_ff *arg1 = (gr::analog::ctcss_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_squelch_range",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__ctcss_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_squelch_range" "', argument " "1"" of type '" "gr::analog::ctcss_squelch_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::ctcss_squelch_ff * >(argp1);
  {
    try {
      result = ((gr::analog::ctcss_squelch_ff const *)arg1)->squelch_range();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::ctcss_squelch_ff *arg1 = (gr::analog::ctcss_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_level",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__ctcss_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_level" "', argument " "1"" of type '" "gr::analog::ctcss_squelch_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::ctcss_squelch_ff * >(argp1);
  {
    try {
      result = (float)((gr::analog::ctcss_squelch_ff const *)arg1)->level();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_set_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::ctcss_squelch_ff *arg1 = (gr::analog::ctcss_squelch_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "level", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ctcss_squelch_ff_set_level",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__ctcss_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_set_level" "', argument " "1"" of type '" "gr::analog::ctcss_squelch_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::ctcss_squelch_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_set_level" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_level(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_len(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::ctcss_squelch_ff *arg1 = (gr::analog::ctcss_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_len",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__ctcss_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_len" "', argument " "1"" of type '" "gr::analog::ctcss_squelch_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::ctcss_squelch_ff * >(argp1);
  {
    try {
      result = (int)((gr::analog::ctcss_squelch_ff const *)arg1)->len();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::ctcss_squelch_ff *arg1 = (gr::analog::ctcss_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_ramp",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__ctcss_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_ramp" "', argument " "1"" of type '" "gr::analog::ctcss_squelch_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::ctcss_squelch_ff * >(argp1);
  {
    try {
      result = (int)((gr::analog::ctcss_squelch_ff const *)arg1)->ramp();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_set_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::ctcss_squelch_ff *arg1 = (gr::analog::ctcss_squelch_ff *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ramp", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ctcss_squelch_ff_set_ramp",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__ctcss_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_set_ramp" "', argument " "1"" of type '" "gr::analog::ctcss_squelch_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::ctcss_squelch_ff * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_set_ramp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_ramp(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::ctcss_squelch_ff *arg1 = (gr::analog::ctcss_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_gate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__ctcss_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_gate" "', argument " "1"" of type '" "gr::analog::ctcss_squelch_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::ctcss_squelch_ff * >(argp1);
  {
    try {
      result = (bool)((gr::analog::ctcss_squelch_ff const *)arg1)->gate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_set_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::ctcss_squelch_ff *arg1 = (gr::analog::ctcss_squelch_ff *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ctcss_squelch_ff_set_gate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__ctcss_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_set_gate" "', argument " "1"" of type '" "gr::analog::ctcss_squelch_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::ctcss_squelch_ff * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_set_gate" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_gate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::ctcss_squelch_ff *arg1 = (gr::analog::ctcss_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__ctcss_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_unmuted" "', argument " "1"" of type '" "gr::analog::ctcss_squelch_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::ctcss_squelch_ff * >(argp1);
  {
    try {
      result = (bool)((gr::analog::ctcss_squelch_ff const *)arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ctcss_squelch_ff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::ctcss_squelch_ff *arg1 = (gr::analog::ctcss_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ctcss_squelch_ff",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__ctcss_squelch_ff, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ctcss_squelch_ff" "', argument " "1"" of type '" "gr::analog::ctcss_squelch_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::ctcss_squelch_ff * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ctcss_squelch_ff_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__ctcss_squelch_ff, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_dpll_bb_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "period",(char *) "gain", NULL 
  };
  gr::analog::dpll_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:dpll_bb_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dpll_bb_make" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = gr::analog::dpll_bb::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::dpll_bb::sptr(static_cast< const gr::analog::dpll_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_set_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::dpll_bb *arg1 = (gr::analog::dpll_bb *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:dpll_bb_set_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__dpll_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_set_gain" "', argument " "1"" of type '" "gr::analog::dpll_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::dpll_bb * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_set_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_set_decision_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::dpll_bb *arg1 = (gr::analog::dpll_bb *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "thresh", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:dpll_bb_set_decision_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__dpll_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_set_decision_threshold" "', argument " "1"" of type '" "gr::analog::dpll_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::dpll_bb * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_set_decision_threshold" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_decision_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::dpll_bb *arg1 = (gr::analog::dpll_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__dpll_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_gain" "', argument " "1"" of type '" "gr::analog::dpll_bb const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::dpll_bb * >(argp1);
  {
    try {
      result = (float)((gr::analog::dpll_bb const *)arg1)->gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::dpll_bb *arg1 = (gr::analog::dpll_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__dpll_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_freq" "', argument " "1"" of type '" "gr::analog::dpll_bb const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::dpll_bb * >(argp1);
  {
    try {
      result = (float)((gr::analog::dpll_bb const *)arg1)->freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::dpll_bb *arg1 = (gr::analog::dpll_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_phase",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__dpll_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_phase" "', argument " "1"" of type '" "gr::analog::dpll_bb const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::dpll_bb * >(argp1);
  {
    try {
      result = (float)((gr::analog::dpll_bb const *)arg1)->phase();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_decision_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::dpll_bb *arg1 = (gr::analog::dpll_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_decision_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__dpll_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_decision_threshold" "', argument " "1"" of type '" "gr::analog::dpll_bb const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::dpll_bb * >(argp1);
  {
    try {
      result = (float)((gr::analog::dpll_bb const *)arg1)->decision_threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dpll_bb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::dpll_bb *arg1 = (gr::analog::dpll_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_dpll_bb",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__dpll_bb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dpll_bb" "', argument " "1"" of type '" "gr::analog::dpll_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::dpll_bb * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dpll_bb_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__dpll_bb, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_feedforward_agc_cc_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  float arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "nsamples",(char *) "reference", NULL 
  };
  gr::analog::feedforward_agc_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feedforward_agc_cc_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "feedforward_agc_cc_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feedforward_agc_cc_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = gr::analog::feedforward_agc_cc::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::feedforward_agc_cc::sptr(static_cast< const gr::analog::feedforward_agc_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_feedforward_agc_cc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::feedforward_agc_cc *arg1 = (gr::analog::feedforward_agc_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_feedforward_agc_cc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__feedforward_agc_cc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_feedforward_agc_cc" "', argument " "1"" of type '" "gr::analog::feedforward_agc_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::feedforward_agc_cc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *feedforward_agc_cc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__feedforward_agc_cc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_fmdet_cf_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "samplerate",(char *) "freq_low",(char *) "freq_high",(char *) "scl", NULL 
  };
  gr::analog::fmdet_cf::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:fmdet_cf_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fmdet_cf_make" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fmdet_cf_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fmdet_cf_make" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      result = gr::analog::fmdet_cf::make(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::fmdet_cf::sptr(static_cast< const gr::analog::fmdet_cf::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_set_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::fmdet_cf *arg1 = (gr::analog::fmdet_cf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "scl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:fmdet_cf_set_scale",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__fmdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_set_scale" "', argument " "1"" of type '" "gr::analog::fmdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::fmdet_cf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_set_scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_scale(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_set_freq_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::fmdet_cf *arg1 = (gr::analog::fmdet_cf *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq_low",(char *) "freq_high", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:fmdet_cf_set_freq_range",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__fmdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_set_freq_range" "', argument " "1"" of type '" "gr::analog::fmdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::fmdet_cf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_set_freq_range" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fmdet_cf_set_freq_range" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      (arg1)->set_freq_range(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::fmdet_cf *arg1 = (gr::analog::fmdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__fmdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_freq" "', argument " "1"" of type '" "gr::analog::fmdet_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::fmdet_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::fmdet_cf const *)arg1)->freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_freq_high(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::fmdet_cf *arg1 = (gr::analog::fmdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_freq_high",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__fmdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_freq_high" "', argument " "1"" of type '" "gr::analog::fmdet_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::fmdet_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::fmdet_cf const *)arg1)->freq_high();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_freq_low(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::fmdet_cf *arg1 = (gr::analog::fmdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_freq_low",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__fmdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_freq_low" "', argument " "1"" of type '" "gr::analog::fmdet_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::fmdet_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::fmdet_cf const *)arg1)->freq_low();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::fmdet_cf *arg1 = (gr::analog::fmdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_scale",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__fmdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_scale" "', argument " "1"" of type '" "gr::analog::fmdet_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::fmdet_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::fmdet_cf const *)arg1)->scale();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_bias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::fmdet_cf *arg1 = (gr::analog::fmdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_bias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__fmdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_bias" "', argument " "1"" of type '" "gr::analog::fmdet_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::fmdet_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::fmdet_cf const *)arg1)->bias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fmdet_cf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::fmdet_cf *arg1 = (gr::analog::fmdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_fmdet_cf",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__fmdet_cf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fmdet_cf" "', argument " "1"" of type '" "gr::analog::fmdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::fmdet_cf * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fmdet_cf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__fmdet_cf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_frequency_modulator_fc_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "sensitivity", NULL 
  };
  gr::analog::frequency_modulator_fc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:frequency_modulator_fc_make",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "frequency_modulator_fc_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = gr::analog::frequency_modulator_fc::make(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::frequency_modulator_fc::sptr(static_cast< const gr::analog::frequency_modulator_fc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_set_sensitivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::frequency_modulator_fc *arg1 = (gr::analog::frequency_modulator_fc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sens", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:frequency_modulator_fc_set_sensitivity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__frequency_modulator_fc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_set_sensitivity" "', argument " "1"" of type '" "gr::analog::frequency_modulator_fc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::frequency_modulator_fc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequency_modulator_fc_set_sensitivity" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_sensitivity(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sensitivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::frequency_modulator_fc *arg1 = (gr::analog::frequency_modulator_fc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sensitivity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__frequency_modulator_fc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sensitivity" "', argument " "1"" of type '" "gr::analog::frequency_modulator_fc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::frequency_modulator_fc * >(argp1);
  {
    try {
      result = (float)((gr::analog::frequency_modulator_fc const *)arg1)->sensitivity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_frequency_modulator_fc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::frequency_modulator_fc *arg1 = (gr::analog::frequency_modulator_fc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_frequency_modulator_fc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__frequency_modulator_fc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_frequency_modulator_fc" "', argument " "1"" of type '" "gr::analog::frequency_modulator_fc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::frequency_modulator_fc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *frequency_modulator_fc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__frequency_modulator_fc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_lfsr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "mask",(char *) "seed",(char *) "reg_len", NULL 
  };
  gr::analog::lfsr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:new_lfsr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_lfsr" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_lfsr" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_lfsr" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  {
    try {
      result = (gr::analog::lfsr *)new gr::analog::lfsr(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__lfsr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lfsr_next_bit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::lfsr *arg1 = (gr::analog::lfsr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char result;
  
  if(!PyArg_UnpackTuple(args,(char *)"lfsr_next_bit",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__lfsr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lfsr_next_bit" "', argument " "1"" of type '" "gr::analog::lfsr *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::lfsr * >(argp1);
  {
    try {
      result = (unsigned char)(arg1)->next_bit();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lfsr_next_bit_scramble(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::lfsr *arg1 = (gr::analog::lfsr *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "input", NULL 
  };
  unsigned char result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:lfsr_next_bit_scramble",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__lfsr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lfsr_next_bit_scramble" "', argument " "1"" of type '" "gr::analog::lfsr *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::lfsr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lfsr_next_bit_scramble" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  {
    try {
      result = (unsigned char)(arg1)->next_bit_scramble(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lfsr_next_bit_descramble(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::lfsr *arg1 = (gr::analog::lfsr *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "input", NULL 
  };
  unsigned char result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:lfsr_next_bit_descramble",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__lfsr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lfsr_next_bit_descramble" "', argument " "1"" of type '" "gr::analog::lfsr *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::lfsr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lfsr_next_bit_descramble" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  {
    try {
      result = (unsigned char)(arg1)->next_bit_descramble(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lfsr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::lfsr *arg1 = (gr::analog::lfsr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"lfsr_reset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__lfsr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lfsr_reset" "', argument " "1"" of type '" "gr::analog::lfsr *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::lfsr * >(argp1);
  {
    try {
      (arg1)->reset();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lfsr_pre_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::lfsr *arg1 = (gr::analog::lfsr *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "num", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:lfsr_pre_shift",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__lfsr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lfsr_pre_shift" "', argument " "1"" of type '" "gr::analog::lfsr *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::lfsr * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lfsr_pre_shift" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->pre_shift(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lfsr_mask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::lfsr *arg1 = (gr::analog::lfsr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"lfsr_mask",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__lfsr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lfsr_mask" "', argument " "1"" of type '" "gr::analog::lfsr const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::lfsr * >(argp1);
  {
    try {
      result = (int)((gr::analog::lfsr const *)arg1)->mask();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_lfsr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::lfsr *arg1 = (gr::analog::lfsr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_lfsr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__lfsr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_lfsr" "', argument " "1"" of type '" "gr::analog::lfsr *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::lfsr * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *lfsr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__lfsr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_noise_source_s_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::noise_type_t arg1 ;
  float arg2 ;
  long arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "type",(char *) "ampl",(char *) "seed", NULL 
  };
  gr::analog::noise_source_s::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:noise_source_s_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "noise_source_s_make" "', argument " "1"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg1 = static_cast< gr::analog::noise_type_t >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_s_make" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      result = gr::analog::noise_source_s::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::noise_source_s::sptr(static_cast< const gr::analog::noise_source_s::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_set_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_s *arg1 = (gr::analog::noise_source_s *) 0 ;
  gr::analog::noise_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_s_set_type",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_set_type" "', argument " "1"" of type '" "gr::analog::noise_source_s *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_s * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_set_type" "', argument " "2"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg2 = static_cast< gr::analog::noise_type_t >(val2);
  {
    try {
      (arg1)->set_type(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_s *arg1 = (gr::analog::noise_source_s *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_s_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_set_amplitude" "', argument " "1"" of type '" "gr::analog::noise_source_s *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_s * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_set_amplitude" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_s *arg1 = (gr::analog::noise_source_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::noise_type_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_type",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_type" "', argument " "1"" of type '" "gr::analog::noise_source_s const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_s * >(argp1);
  {
    try {
      result = (gr::analog::noise_type_t)((gr::analog::noise_source_s const *)arg1)->type();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_s *arg1 = (gr::analog::noise_source_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_amplitude" "', argument " "1"" of type '" "gr::analog::noise_source_s const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_s * >(argp1);
  {
    try {
      result = (float)((gr::analog::noise_source_s const *)arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_noise_source_s(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_s *arg1 = (gr::analog::noise_source_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_noise_source_s",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_s, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_noise_source_s" "', argument " "1"" of type '" "gr::analog::noise_source_s *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_s * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *noise_source_s_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__noise_source_s, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_noise_source_i_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::noise_type_t arg1 ;
  float arg2 ;
  long arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "type",(char *) "ampl",(char *) "seed", NULL 
  };
  gr::analog::noise_source_i::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:noise_source_i_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "noise_source_i_make" "', argument " "1"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg1 = static_cast< gr::analog::noise_type_t >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_i_make" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      result = gr::analog::noise_source_i::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::noise_source_i::sptr(static_cast< const gr::analog::noise_source_i::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_set_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_i *arg1 = (gr::analog::noise_source_i *) 0 ;
  gr::analog::noise_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_i_set_type",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_set_type" "', argument " "1"" of type '" "gr::analog::noise_source_i *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_set_type" "', argument " "2"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg2 = static_cast< gr::analog::noise_type_t >(val2);
  {
    try {
      (arg1)->set_type(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_i *arg1 = (gr::analog::noise_source_i *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_i_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_set_amplitude" "', argument " "1"" of type '" "gr::analog::noise_source_i *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_i * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_set_amplitude" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_i *arg1 = (gr::analog::noise_source_i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::noise_type_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_type",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_type" "', argument " "1"" of type '" "gr::analog::noise_source_i const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_i * >(argp1);
  {
    try {
      result = (gr::analog::noise_type_t)((gr::analog::noise_source_i const *)arg1)->type();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_i *arg1 = (gr::analog::noise_source_i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_amplitude" "', argument " "1"" of type '" "gr::analog::noise_source_i const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_i * >(argp1);
  {
    try {
      result = (float)((gr::analog::noise_source_i const *)arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_noise_source_i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_i *arg1 = (gr::analog::noise_source_i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_noise_source_i",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_i, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_noise_source_i" "', argument " "1"" of type '" "gr::analog::noise_source_i *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_i * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *noise_source_i_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__noise_source_i, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_noise_source_f_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::noise_type_t arg1 ;
  float arg2 ;
  long arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "type",(char *) "ampl",(char *) "seed", NULL 
  };
  gr::analog::noise_source_f::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:noise_source_f_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "noise_source_f_make" "', argument " "1"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg1 = static_cast< gr::analog::noise_type_t >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_f_make" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      result = gr::analog::noise_source_f::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::noise_source_f::sptr(static_cast< const gr::analog::noise_source_f::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_set_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_f *arg1 = (gr::analog::noise_source_f *) 0 ;
  gr::analog::noise_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_f_set_type",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_set_type" "', argument " "1"" of type '" "gr::analog::noise_source_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_set_type" "', argument " "2"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg2 = static_cast< gr::analog::noise_type_t >(val2);
  {
    try {
      (arg1)->set_type(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_f *arg1 = (gr::analog::noise_source_f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_f_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_set_amplitude" "', argument " "1"" of type '" "gr::analog::noise_source_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_set_amplitude" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_f *arg1 = (gr::analog::noise_source_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::noise_type_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_type",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_type" "', argument " "1"" of type '" "gr::analog::noise_source_f const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_f * >(argp1);
  {
    try {
      result = (gr::analog::noise_type_t)((gr::analog::noise_source_f const *)arg1)->type();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_f *arg1 = (gr::analog::noise_source_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_amplitude" "', argument " "1"" of type '" "gr::analog::noise_source_f const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_f * >(argp1);
  {
    try {
      result = (float)((gr::analog::noise_source_f const *)arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_noise_source_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_f *arg1 = (gr::analog::noise_source_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_noise_source_f",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_noise_source_f" "', argument " "1"" of type '" "gr::analog::noise_source_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_f * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *noise_source_f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__noise_source_f, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_noise_source_c_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::noise_type_t arg1 ;
  float arg2 ;
  long arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "type",(char *) "ampl",(char *) "seed", NULL 
  };
  gr::analog::noise_source_c::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:noise_source_c_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "noise_source_c_make" "', argument " "1"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg1 = static_cast< gr::analog::noise_type_t >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_c_make" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      result = gr::analog::noise_source_c::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::noise_source_c::sptr(static_cast< const gr::analog::noise_source_c::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_set_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_c *arg1 = (gr::analog::noise_source_c *) 0 ;
  gr::analog::noise_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_c_set_type",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_set_type" "', argument " "1"" of type '" "gr::analog::noise_source_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_c * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_set_type" "', argument " "2"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg2 = static_cast< gr::analog::noise_type_t >(val2);
  {
    try {
      (arg1)->set_type(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_c *arg1 = (gr::analog::noise_source_c *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_c_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_set_amplitude" "', argument " "1"" of type '" "gr::analog::noise_source_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_c * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_set_amplitude" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_c *arg1 = (gr::analog::noise_source_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::noise_type_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_type",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_type" "', argument " "1"" of type '" "gr::analog::noise_source_c const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_c * >(argp1);
  {
    try {
      result = (gr::analog::noise_type_t)((gr::analog::noise_source_c const *)arg1)->type();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_c *arg1 = (gr::analog::noise_source_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_amplitude" "', argument " "1"" of type '" "gr::analog::noise_source_c const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_c * >(argp1);
  {
    try {
      result = (float)((gr::analog::noise_source_c const *)arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_noise_source_c(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_c *arg1 = (gr::analog::noise_source_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_noise_source_c",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_c, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_noise_source_c" "', argument " "1"" of type '" "gr::analog::noise_source_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_c * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *noise_source_c_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__noise_source_c, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_phase_modulator_fc_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "sensitivity", NULL 
  };
  gr::analog::phase_modulator_fc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:phase_modulator_fc_make",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "phase_modulator_fc_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = gr::analog::phase_modulator_fc::make(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::phase_modulator_fc::sptr(static_cast< const gr::analog::phase_modulator_fc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sensitivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::phase_modulator_fc *arg1 = (gr::analog::phase_modulator_fc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sensitivity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__phase_modulator_fc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sensitivity" "', argument " "1"" of type '" "gr::analog::phase_modulator_fc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::phase_modulator_fc * >(argp1);
  {
    try {
      result = (double)((gr::analog::phase_modulator_fc const *)arg1)->sensitivity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::phase_modulator_fc *arg1 = (gr::analog::phase_modulator_fc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_phase",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__phase_modulator_fc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_phase" "', argument " "1"" of type '" "gr::analog::phase_modulator_fc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::phase_modulator_fc * >(argp1);
  {
    try {
      result = (double)((gr::analog::phase_modulator_fc const *)arg1)->phase();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_set_sensitivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::phase_modulator_fc *arg1 = (gr::analog::phase_modulator_fc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "s", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:phase_modulator_fc_set_sensitivity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__phase_modulator_fc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_set_sensitivity" "', argument " "1"" of type '" "gr::analog::phase_modulator_fc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::phase_modulator_fc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_set_sensitivity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_sensitivity(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_set_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::phase_modulator_fc *arg1 = (gr::analog::phase_modulator_fc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "p", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:phase_modulator_fc_set_phase",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__phase_modulator_fc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_set_phase" "', argument " "1"" of type '" "gr::analog::phase_modulator_fc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::phase_modulator_fc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_set_phase" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_phase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_phase_modulator_fc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::phase_modulator_fc *arg1 = (gr::analog::phase_modulator_fc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_phase_modulator_fc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__phase_modulator_fc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_phase_modulator_fc" "', argument " "1"" of type '" "gr::analog::phase_modulator_fc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::phase_modulator_fc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *phase_modulator_fc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__phase_modulator_fc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "loop_bw",(char *) "max_freq",(char *) "min_freq", NULL 
  };
  gr::analog::pll_carriertracking_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:pll_carriertracking_cc_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pll_carriertracking_cc_make" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_carriertracking_cc_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      result = gr::analog::pll_carriertracking_cc::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::pll_carriertracking_cc::sptr(static_cast< const gr::analog::pll_carriertracking_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_lock_detector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_lock_detector",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_lock_detector" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  {
    try {
      result = (bool)(arg1)->lock_detector();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_squelch_enable(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *)"arg2", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_squelch_enable",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_squelch_enable" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_squelch_enable" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (bool)(arg1)->squelch_enable(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_set_lock_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *)"arg2", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_set_lock_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_set_lock_threshold" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_set_lock_threshold" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (float)(arg1)->set_lock_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_set_loop_bandwidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "bw", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_set_loop_bandwidth",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_set_loop_bandwidth" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_set_loop_bandwidth" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_loop_bandwidth(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_set_damping_factor(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "df", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_set_damping_factor",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_set_damping_factor" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_set_damping_factor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_damping_factor(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_set_alpha" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_set_alpha" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_set_beta(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "beta", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_set_beta",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_set_beta" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_set_beta" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_beta(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_set_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_set_frequency" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_set_frequency" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_frequency(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_set_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "phase", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_set_phase",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_set_phase" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_set_phase" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_phase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_set_min_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_set_min_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_set_min_freq" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_set_min_freq" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_min_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_set_max_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_set_max_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_set_max_freq" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_set_max_freq" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_max_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_get_loop_bandwidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_get_loop_bandwidth",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_get_loop_bandwidth" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_carriertracking_cc const *)arg1)->get_loop_bandwidth();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_get_damping_factor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_get_damping_factor",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_get_damping_factor" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_carriertracking_cc const *)arg1)->get_damping_factor();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_get_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_get_alpha",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_get_alpha" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_carriertracking_cc const *)arg1)->get_alpha();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_get_beta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_get_beta",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_get_beta" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_carriertracking_cc const *)arg1)->get_beta();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_get_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_get_frequency",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_get_frequency" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_carriertracking_cc const *)arg1)->get_frequency();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_get_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_get_phase",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_get_phase" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_carriertracking_cc const *)arg1)->get_phase();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_get_min_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_get_min_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_get_min_freq" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_carriertracking_cc const *)arg1)->get_min_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_get_max_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_get_max_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_get_max_freq" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_carriertracking_cc const *)arg1)->get_max_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pll_carriertracking_cc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_pll_carriertracking_cc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pll_carriertracking_cc" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pll_carriertracking_cc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__pll_carriertracking_cc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_pll_freqdet_cf_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "loop_bw",(char *) "max_freq",(char *) "min_freq", NULL 
  };
  gr::analog::pll_freqdet_cf::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:pll_freqdet_cf_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pll_freqdet_cf_make" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_freqdet_cf_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      result = gr::analog::pll_freqdet_cf::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::pll_freqdet_cf::sptr(static_cast< const gr::analog::pll_freqdet_cf::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_set_loop_bandwidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "bw", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_set_loop_bandwidth",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_set_loop_bandwidth" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_set_loop_bandwidth" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_loop_bandwidth(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_set_damping_factor(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "df", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_set_damping_factor",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_set_damping_factor" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_set_damping_factor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_damping_factor(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_set_alpha" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_set_alpha" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_set_beta(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "beta", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_set_beta",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_set_beta" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_set_beta" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_beta(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_set_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_set_frequency" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_set_frequency" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_frequency(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_set_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "phase", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_set_phase",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_set_phase" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_set_phase" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_phase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_set_min_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_set_min_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_set_min_freq" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_set_min_freq" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_min_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_set_max_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_set_max_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_set_max_freq" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_set_max_freq" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_max_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_get_loop_bandwidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_get_loop_bandwidth",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_get_loop_bandwidth" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_freqdet_cf const *)arg1)->get_loop_bandwidth();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_get_damping_factor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_get_damping_factor",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_get_damping_factor" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_freqdet_cf const *)arg1)->get_damping_factor();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_get_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_get_alpha",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_get_alpha" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_freqdet_cf const *)arg1)->get_alpha();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_get_beta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_get_beta",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_get_beta" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_freqdet_cf const *)arg1)->get_beta();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_get_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_get_frequency",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_get_frequency" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_freqdet_cf const *)arg1)->get_frequency();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_get_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_get_phase",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_get_phase" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_freqdet_cf const *)arg1)->get_phase();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_get_min_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_get_min_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_get_min_freq" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_freqdet_cf const *)arg1)->get_min_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_get_max_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_get_max_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_get_max_freq" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::pll_freqdet_cf const *)arg1)->get_max_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pll_freqdet_cf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_pll_freqdet_cf",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pll_freqdet_cf" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pll_freqdet_cf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__pll_freqdet_cf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_pll_refout_cc_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "loop_bw",(char *) "max_freq",(char *) "min_freq", NULL 
  };
  gr::analog::pll_refout_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:pll_refout_cc_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pll_refout_cc_make" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_refout_cc_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_refout_cc_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      result = gr::analog::pll_refout_cc::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::pll_refout_cc::sptr(static_cast< const gr::analog::pll_refout_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pll_refout_cc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_refout_cc *arg1 = (gr::analog::pll_refout_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_pll_refout_cc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_refout_cc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pll_refout_cc" "', argument " "1"" of type '" "gr::analog::pll_refout_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_refout_cc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pll_refout_cc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__pll_refout_cc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 = (double) 0.0001 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "threshold_db",(char *) "alpha", NULL 
  };
  gr::analog::probe_avg_mag_sqrd_c::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:probe_avg_mag_sqrd_c_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "probe_avg_mag_sqrd_c_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_make" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    try {
      result = gr::analog::probe_avg_mag_sqrd_c::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::probe_avg_mag_sqrd_c::sptr(static_cast< const gr::analog::probe_avg_mag_sqrd_c::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_c *arg1 = (gr::analog::probe_avg_mag_sqrd_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_unmuted" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_c const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_c * >(argp1);
  {
    try {
      result = (bool)((gr::analog::probe_avg_mag_sqrd_c const *)arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_c *arg1 = (gr::analog::probe_avg_mag_sqrd_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_level",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_level" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_c const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_c * >(argp1);
  {
    try {
      result = (double)((gr::analog::probe_avg_mag_sqrd_c const *)arg1)->level();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_c *arg1 = (gr::analog::probe_avg_mag_sqrd_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_threshold" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_c const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_c * >(argp1);
  {
    try {
      result = (double)((gr::analog::probe_avg_mag_sqrd_c const *)arg1)->threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_c *arg1 = (gr::analog::probe_avg_mag_sqrd_c *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_c_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_set_alpha" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_c * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_set_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_c *arg1 = (gr::analog::probe_avg_mag_sqrd_c *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "decibels", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_c_set_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_set_threshold" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_c * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_probe_avg_mag_sqrd_c(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_c *arg1 = (gr::analog::probe_avg_mag_sqrd_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_probe_avg_mag_sqrd_c",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_c, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_probe_avg_mag_sqrd_c" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_c * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *probe_avg_mag_sqrd_c_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_c, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 = (double) 0.0001 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "threshold_db",(char *) "alpha", NULL 
  };
  gr::analog::probe_avg_mag_sqrd_cf::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:probe_avg_mag_sqrd_cf_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "probe_avg_mag_sqrd_cf_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_make" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    try {
      result = gr::analog::probe_avg_mag_sqrd_cf::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::probe_avg_mag_sqrd_cf::sptr(static_cast< const gr::analog::probe_avg_mag_sqrd_cf::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_cf *arg1 = (gr::analog::probe_avg_mag_sqrd_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_unmuted" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_cf * >(argp1);
  {
    try {
      result = (bool)((gr::analog::probe_avg_mag_sqrd_cf const *)arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_cf *arg1 = (gr::analog::probe_avg_mag_sqrd_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_level",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_level" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_cf * >(argp1);
  {
    try {
      result = (double)((gr::analog::probe_avg_mag_sqrd_cf const *)arg1)->level();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_cf *arg1 = (gr::analog::probe_avg_mag_sqrd_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_threshold" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_cf * >(argp1);
  {
    try {
      result = (double)((gr::analog::probe_avg_mag_sqrd_cf const *)arg1)->threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_cf *arg1 = (gr::analog::probe_avg_mag_sqrd_cf *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_cf_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_set_alpha" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_cf * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_set_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_cf *arg1 = (gr::analog::probe_avg_mag_sqrd_cf *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "decibels", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_cf_set_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_set_threshold" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_cf * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_probe_avg_mag_sqrd_cf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_cf *arg1 = (gr::analog::probe_avg_mag_sqrd_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_probe_avg_mag_sqrd_cf",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_cf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_probe_avg_mag_sqrd_cf" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_cf * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *probe_avg_mag_sqrd_cf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_cf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 = (double) 0.0001 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "threshold_db",(char *) "alpha", NULL 
  };
  gr::analog::probe_avg_mag_sqrd_f::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:probe_avg_mag_sqrd_f_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "probe_avg_mag_sqrd_f_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_make" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    try {
      result = gr::analog::probe_avg_mag_sqrd_f::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::probe_avg_mag_sqrd_f::sptr(static_cast< const gr::analog::probe_avg_mag_sqrd_f::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_f *arg1 = (gr::analog::probe_avg_mag_sqrd_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_unmuted" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_f const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_f * >(argp1);
  {
    try {
      result = (bool)((gr::analog::probe_avg_mag_sqrd_f const *)arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_f *arg1 = (gr::analog::probe_avg_mag_sqrd_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_level",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_level" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_f const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_f * >(argp1);
  {
    try {
      result = (double)((gr::analog::probe_avg_mag_sqrd_f const *)arg1)->level();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_f *arg1 = (gr::analog::probe_avg_mag_sqrd_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_threshold" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_f const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_f * >(argp1);
  {
    try {
      result = (double)((gr::analog::probe_avg_mag_sqrd_f const *)arg1)->threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_f *arg1 = (gr::analog::probe_avg_mag_sqrd_f *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_f_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_set_alpha" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_f * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_set_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_f *arg1 = (gr::analog::probe_avg_mag_sqrd_f *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "decibels", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_f_set_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_set_threshold" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_f * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_probe_avg_mag_sqrd_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_f *arg1 = (gr::analog::probe_avg_mag_sqrd_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_probe_avg_mag_sqrd_f",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_probe_avg_mag_sqrd_f" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_f * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *probe_avg_mag_sqrd_f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_f, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_pwr_squelch_cc_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 = (double) 0.0001 ;
  int arg3 = (int) 0 ;
  bool arg4 = (bool) false ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "db",(char *) "alpha",(char *) "ramp",(char *) "gate", NULL 
  };
  gr::analog::pwr_squelch_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:pwr_squelch_cc_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pwr_squelch_cc_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_make" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pwr_squelch_cc_make" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pwr_squelch_cc_make" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      result = gr::analog::pwr_squelch_cc::make(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::pwr_squelch_cc::sptr(static_cast< const gr::analog::pwr_squelch_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_squelch_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_cc *arg1 = (gr::analog::pwr_squelch_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_squelch_range",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_squelch_range" "', argument " "1"" of type '" "gr::analog::pwr_squelch_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_cc * >(argp1);
  {
    try {
      result = ((gr::analog::pwr_squelch_cc const *)arg1)->squelch_range();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_cc *arg1 = (gr::analog::pwr_squelch_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_threshold" "', argument " "1"" of type '" "gr::analog::pwr_squelch_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_cc * >(argp1);
  {
    try {
      result = (double)((gr::analog::pwr_squelch_cc const *)arg1)->threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_cc *arg1 = (gr::analog::pwr_squelch_cc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "db", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_set_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_set_threshold" "', argument " "1"" of type '" "gr::analog::pwr_squelch_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_cc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_cc *arg1 = (gr::analog::pwr_squelch_cc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_set_alpha" "', argument " "1"" of type '" "gr::analog::pwr_squelch_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_cc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_set_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_cc *arg1 = (gr::analog::pwr_squelch_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_ramp",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_ramp" "', argument " "1"" of type '" "gr::analog::pwr_squelch_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_cc * >(argp1);
  {
    try {
      result = (int)((gr::analog::pwr_squelch_cc const *)arg1)->ramp();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_set_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_cc *arg1 = (gr::analog::pwr_squelch_cc *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ramp", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_set_ramp",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_set_ramp" "', argument " "1"" of type '" "gr::analog::pwr_squelch_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_cc * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_set_ramp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_ramp(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_cc *arg1 = (gr::analog::pwr_squelch_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_gate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_gate" "', argument " "1"" of type '" "gr::analog::pwr_squelch_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_cc * >(argp1);
  {
    try {
      result = (bool)((gr::analog::pwr_squelch_cc const *)arg1)->gate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_set_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_cc *arg1 = (gr::analog::pwr_squelch_cc *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_set_gate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_set_gate" "', argument " "1"" of type '" "gr::analog::pwr_squelch_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_cc * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_set_gate" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_gate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_cc *arg1 = (gr::analog::pwr_squelch_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_unmuted" "', argument " "1"" of type '" "gr::analog::pwr_squelch_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_cc * >(argp1);
  {
    try {
      result = (bool)((gr::analog::pwr_squelch_cc const *)arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pwr_squelch_cc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_cc *arg1 = (gr::analog::pwr_squelch_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_pwr_squelch_cc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_cc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pwr_squelch_cc" "', argument " "1"" of type '" "gr::analog::pwr_squelch_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_cc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pwr_squelch_cc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__pwr_squelch_cc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_pwr_squelch_ff_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 = (double) 0.0001 ;
  int arg3 = (int) 0 ;
  bool arg4 = (bool) false ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "db",(char *) "alpha",(char *) "ramp",(char *) "gate", NULL 
  };
  gr::analog::pwr_squelch_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:pwr_squelch_ff_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pwr_squelch_ff_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_make" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pwr_squelch_ff_make" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pwr_squelch_ff_make" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      result = gr::analog::pwr_squelch_ff::make(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::pwr_squelch_ff::sptr(static_cast< const gr::analog::pwr_squelch_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_squelch_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_ff *arg1 = (gr::analog::pwr_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_squelch_range",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_squelch_range" "', argument " "1"" of type '" "gr::analog::pwr_squelch_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_ff * >(argp1);
  {
    try {
      result = ((gr::analog::pwr_squelch_ff const *)arg1)->squelch_range();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_ff *arg1 = (gr::analog::pwr_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_threshold" "', argument " "1"" of type '" "gr::analog::pwr_squelch_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_ff * >(argp1);
  {
    try {
      result = (double)((gr::analog::pwr_squelch_ff const *)arg1)->threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_ff *arg1 = (gr::analog::pwr_squelch_ff *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "db", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_set_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_set_threshold" "', argument " "1"" of type '" "gr::analog::pwr_squelch_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_ff * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_ff *arg1 = (gr::analog::pwr_squelch_ff *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_set_alpha" "', argument " "1"" of type '" "gr::analog::pwr_squelch_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_ff * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_set_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_ff *arg1 = (gr::analog::pwr_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_ramp",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_ramp" "', argument " "1"" of type '" "gr::analog::pwr_squelch_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_ff * >(argp1);
  {
    try {
      result = (int)((gr::analog::pwr_squelch_ff const *)arg1)->ramp();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_set_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_ff *arg1 = (gr::analog::pwr_squelch_ff *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ramp", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_set_ramp",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_set_ramp" "', argument " "1"" of type '" "gr::analog::pwr_squelch_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_ff * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_set_ramp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_ramp(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_ff *arg1 = (gr::analog::pwr_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_gate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_gate" "', argument " "1"" of type '" "gr::analog::pwr_squelch_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_ff * >(argp1);
  {
    try {
      result = (bool)((gr::analog::pwr_squelch_ff const *)arg1)->gate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_set_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_ff *arg1 = (gr::analog::pwr_squelch_ff *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_set_gate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_set_gate" "', argument " "1"" of type '" "gr::analog::pwr_squelch_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_ff * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_set_gate" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_gate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_ff *arg1 = (gr::analog::pwr_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_unmuted" "', argument " "1"" of type '" "gr::analog::pwr_squelch_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_ff * >(argp1);
  {
    try {
      result = (bool)((gr::analog::pwr_squelch_ff const *)arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pwr_squelch_ff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_ff *arg1 = (gr::analog::pwr_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_pwr_squelch_ff",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_ff, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pwr_squelch_ff" "', argument " "1"" of type '" "gr::analog::pwr_squelch_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_ff * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pwr_squelch_ff_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__pwr_squelch_ff, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_quadrature_demod_cf_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "gain", NULL 
  };
  gr::analog::quadrature_demod_cf::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:quadrature_demod_cf_make",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "quadrature_demod_cf_make" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    try {
      result = gr::analog::quadrature_demod_cf::make(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::quadrature_demod_cf::sptr(static_cast< const gr::analog::quadrature_demod_cf::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_set_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::quadrature_demod_cf *arg1 = (gr::analog::quadrature_demod_cf *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:quadrature_demod_cf_set_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__quadrature_demod_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_set_gain" "', argument " "1"" of type '" "gr::analog::quadrature_demod_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::quadrature_demod_cf * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quadrature_demod_cf_set_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::quadrature_demod_cf *arg1 = (gr::analog::quadrature_demod_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__quadrature_demod_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_gain" "', argument " "1"" of type '" "gr::analog::quadrature_demod_cf const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::quadrature_demod_cf * >(argp1);
  {
    try {
      result = (float)((gr::analog::quadrature_demod_cf const *)arg1)->gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_quadrature_demod_cf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::quadrature_demod_cf *arg1 = (gr::analog::quadrature_demod_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_quadrature_demod_cf",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__quadrature_demod_cf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_quadrature_demod_cf" "', argument " "1"" of type '" "gr::analog::quadrature_demod_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::quadrature_demod_cf * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *quadrature_demod_cf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__quadrature_demod_cf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_rail_ff_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "lo",(char *) "hi", NULL 
  };
  gr::analog::rail_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rail_ff_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rail_ff_make" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = gr::analog::rail_ff::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::rail_ff::sptr(static_cast< const gr::analog::rail_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_lo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::rail_ff *arg1 = (gr::analog::rail_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_lo",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__rail_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_lo" "', argument " "1"" of type '" "gr::analog::rail_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::rail_ff * >(argp1);
  {
    try {
      result = (float)((gr::analog::rail_ff const *)arg1)->lo();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_hi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::rail_ff *arg1 = (gr::analog::rail_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_hi",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__rail_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_hi" "', argument " "1"" of type '" "gr::analog::rail_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::rail_ff * >(argp1);
  {
    try {
      result = (float)((gr::analog::rail_ff const *)arg1)->hi();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_set_lo(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::rail_ff *arg1 = (gr::analog::rail_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "lo", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rail_ff_set_lo",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__rail_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_set_lo" "', argument " "1"" of type '" "gr::analog::rail_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::rail_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_set_lo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_lo(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_set_hi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::rail_ff *arg1 = (gr::analog::rail_ff *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "hi", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rail_ff_set_hi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__rail_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_set_hi" "', argument " "1"" of type '" "gr::analog::rail_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::rail_ff * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_set_hi" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_hi(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_rail_ff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::rail_ff *arg1 = (gr::analog::rail_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_rail_ff",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__rail_ff, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_rail_ff" "', argument " "1"" of type '" "gr::analog::rail_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::rail_ff * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *rail_ff_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__rail_ff, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_sincos(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "x",(char *) "sin",(char *) "cos", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:sincos",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sincos" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sincos" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sincos" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      gr::analog::sincos(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sincosf(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "x",(char *) "sin",(char *) "cos", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:sincosf",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sincosf" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sincosf" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sincosf" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  {
    try {
      gr::analog::sincosf(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  gr::analog::gr_waveform_t arg2 ;
  double arg3 ;
  double arg4 ;
  short arg5 = (short) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "sampling_freq",(char *) "waveform",(char *) "wave_freq",(char *) "ampl",(char *) "offset", NULL 
  };
  gr::analog::sig_source_s::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:sig_source_s_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sig_source_s_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_make" "', argument " "2"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg2 = static_cast< gr::analog::gr_waveform_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_s_make" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sig_source_s_make" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_short(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "sig_source_s_make" "', argument " "5"" of type '" "short""'");
    } 
    arg5 = static_cast< short >(val5);
  }
  {
    try {
      result = gr::analog::sig_source_s::make(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::sig_source_s::sptr(static_cast< const gr::analog::sig_source_s::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_s *arg1 = (gr::analog::sig_source_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sampling_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sampling_freq" "', argument " "1"" of type '" "gr::analog::sig_source_s const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_s * >(argp1);
  {
    try {
      result = (double)((gr::analog::sig_source_s const *)arg1)->sampling_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_s *arg1 = (gr::analog::sig_source_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::gr_waveform_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_waveform",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_waveform" "', argument " "1"" of type '" "gr::analog::sig_source_s const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_s * >(argp1);
  {
    try {
      result = (gr::analog::gr_waveform_t)((gr::analog::sig_source_s const *)arg1)->waveform();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_s *arg1 = (gr::analog::sig_source_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_frequency",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_frequency" "', argument " "1"" of type '" "gr::analog::sig_source_s const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_s * >(argp1);
  {
    try {
      result = (double)((gr::analog::sig_source_s const *)arg1)->frequency();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_s *arg1 = (gr::analog::sig_source_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_amplitude" "', argument " "1"" of type '" "gr::analog::sig_source_s const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_s * >(argp1);
  {
    try {
      result = (double)((gr::analog::sig_source_s const *)arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_s *arg1 = (gr::analog::sig_source_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  short result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_offset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_offset" "', argument " "1"" of type '" "gr::analog::sig_source_s const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_s * >(argp1);
  {
    try {
      result = (short)((gr::analog::sig_source_s const *)arg1)->offset();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_set_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_s *arg1 = (gr::analog::sig_source_s *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_set_sampling_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_set_sampling_freq" "', argument " "1"" of type '" "gr::analog::sig_source_s *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_s * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_set_sampling_freq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_sampling_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_set_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_s *arg1 = (gr::analog::sig_source_s *) 0 ;
  gr::analog::gr_waveform_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "waveform", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_set_waveform",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_set_waveform" "', argument " "1"" of type '" "gr::analog::sig_source_s *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_s * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_set_waveform" "', argument " "2"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg2 = static_cast< gr::analog::gr_waveform_t >(val2);
  {
    try {
      (arg1)->set_waveform(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_s *arg1 = (gr::analog::sig_source_s *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frequency", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_set_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_set_frequency" "', argument " "1"" of type '" "gr::analog::sig_source_s *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_s * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_set_frequency" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_frequency(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_s *arg1 = (gr::analog::sig_source_s *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_set_amplitude" "', argument " "1"" of type '" "gr::analog::sig_source_s *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_s * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_set_amplitude" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_set_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_s *arg1 = (gr::analog::sig_source_s *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "offset", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_set_offset",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_set_offset" "', argument " "1"" of type '" "gr::analog::sig_source_s *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_s * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_set_offset" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  {
    try {
      (arg1)->set_offset(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_sig_source_s(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_s *arg1 = (gr::analog::sig_source_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_sig_source_s",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_s, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sig_source_s" "', argument " "1"" of type '" "gr::analog::sig_source_s *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_s * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sig_source_s_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__sig_source_s, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_sig_source_i_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  gr::analog::gr_waveform_t arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 = (int) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "sampling_freq",(char *) "waveform",(char *) "wave_freq",(char *) "ampl",(char *) "offset", NULL 
  };
  gr::analog::sig_source_i::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:sig_source_i_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sig_source_i_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_make" "', argument " "2"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg2 = static_cast< gr::analog::gr_waveform_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_i_make" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sig_source_i_make" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "sig_source_i_make" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  {
    try {
      result = gr::analog::sig_source_i::make(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::sig_source_i::sptr(static_cast< const gr::analog::sig_source_i::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_i *arg1 = (gr::analog::sig_source_i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sampling_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sampling_freq" "', argument " "1"" of type '" "gr::analog::sig_source_i const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_i * >(argp1);
  {
    try {
      result = (double)((gr::analog::sig_source_i const *)arg1)->sampling_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_i *arg1 = (gr::analog::sig_source_i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::gr_waveform_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_waveform",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_waveform" "', argument " "1"" of type '" "gr::analog::sig_source_i const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_i * >(argp1);
  {
    try {
      result = (gr::analog::gr_waveform_t)((gr::analog::sig_source_i const *)arg1)->waveform();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_i *arg1 = (gr::analog::sig_source_i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_frequency",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_frequency" "', argument " "1"" of type '" "gr::analog::sig_source_i const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_i * >(argp1);
  {
    try {
      result = (double)((gr::analog::sig_source_i const *)arg1)->frequency();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_i *arg1 = (gr::analog::sig_source_i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_amplitude" "', argument " "1"" of type '" "gr::analog::sig_source_i const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_i * >(argp1);
  {
    try {
      result = (double)((gr::analog::sig_source_i const *)arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_i *arg1 = (gr::analog::sig_source_i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_offset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_offset" "', argument " "1"" of type '" "gr::analog::sig_source_i const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_i * >(argp1);
  {
    try {
      result = (int)((gr::analog::sig_source_i const *)arg1)->offset();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_set_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_i *arg1 = (gr::analog::sig_source_i *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_set_sampling_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_set_sampling_freq" "', argument " "1"" of type '" "gr::analog::sig_source_i *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_i * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_set_sampling_freq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_sampling_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_set_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_i *arg1 = (gr::analog::sig_source_i *) 0 ;
  gr::analog::gr_waveform_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "waveform", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_set_waveform",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_set_waveform" "', argument " "1"" of type '" "gr::analog::sig_source_i *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_set_waveform" "', argument " "2"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg2 = static_cast< gr::analog::gr_waveform_t >(val2);
  {
    try {
      (arg1)->set_waveform(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_i *arg1 = (gr::analog::sig_source_i *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frequency", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_set_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_set_frequency" "', argument " "1"" of type '" "gr::analog::sig_source_i *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_i * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_set_frequency" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_frequency(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_i *arg1 = (gr::analog::sig_source_i *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_set_amplitude" "', argument " "1"" of type '" "gr::analog::sig_source_i *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_i * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_set_amplitude" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_set_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_i *arg1 = (gr::analog::sig_source_i *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "offset", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_set_offset",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_set_offset" "', argument " "1"" of type '" "gr::analog::sig_source_i *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_i * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_set_offset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_offset(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_sig_source_i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_i *arg1 = (gr::analog::sig_source_i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_sig_source_i",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_i, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sig_source_i" "', argument " "1"" of type '" "gr::analog::sig_source_i *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_i * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sig_source_i_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__sig_source_i, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_sig_source_f_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  gr::analog::gr_waveform_t arg2 ;
  double arg3 ;
  double arg4 ;
  float arg5 = (float) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "sampling_freq",(char *) "waveform",(char *) "wave_freq",(char *) "ampl",(char *) "offset", NULL 
  };
  gr::analog::sig_source_f::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:sig_source_f_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sig_source_f_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_make" "', argument " "2"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg2 = static_cast< gr::analog::gr_waveform_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_f_make" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sig_source_f_make" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_float(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "sig_source_f_make" "', argument " "5"" of type '" "float""'");
    } 
    arg5 = static_cast< float >(val5);
  }
  {
    try {
      result = gr::analog::sig_source_f::make(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::sig_source_f::sptr(static_cast< const gr::analog::sig_source_f::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_f *arg1 = (gr::analog::sig_source_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sampling_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sampling_freq" "', argument " "1"" of type '" "gr::analog::sig_source_f const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_f * >(argp1);
  {
    try {
      result = (double)((gr::analog::sig_source_f const *)arg1)->sampling_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_f *arg1 = (gr::analog::sig_source_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::gr_waveform_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_waveform",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_waveform" "', argument " "1"" of type '" "gr::analog::sig_source_f const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_f * >(argp1);
  {
    try {
      result = (gr::analog::gr_waveform_t)((gr::analog::sig_source_f const *)arg1)->waveform();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_f *arg1 = (gr::analog::sig_source_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_frequency",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_frequency" "', argument " "1"" of type '" "gr::analog::sig_source_f const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_f * >(argp1);
  {
    try {
      result = (double)((gr::analog::sig_source_f const *)arg1)->frequency();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_f *arg1 = (gr::analog::sig_source_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_amplitude" "', argument " "1"" of type '" "gr::analog::sig_source_f const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_f * >(argp1);
  {
    try {
      result = (double)((gr::analog::sig_source_f const *)arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_f *arg1 = (gr::analog::sig_source_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_offset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_offset" "', argument " "1"" of type '" "gr::analog::sig_source_f const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_f * >(argp1);
  {
    try {
      result = (float)((gr::analog::sig_source_f const *)arg1)->offset();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_set_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_f *arg1 = (gr::analog::sig_source_f *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_set_sampling_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_set_sampling_freq" "', argument " "1"" of type '" "gr::analog::sig_source_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_f * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_set_sampling_freq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_sampling_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_set_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_f *arg1 = (gr::analog::sig_source_f *) 0 ;
  gr::analog::gr_waveform_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "waveform", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_set_waveform",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_set_waveform" "', argument " "1"" of type '" "gr::analog::sig_source_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_set_waveform" "', argument " "2"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg2 = static_cast< gr::analog::gr_waveform_t >(val2);
  {
    try {
      (arg1)->set_waveform(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_f *arg1 = (gr::analog::sig_source_f *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frequency", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_set_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_set_frequency" "', argument " "1"" of type '" "gr::analog::sig_source_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_f * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_set_frequency" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_frequency(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_f *arg1 = (gr::analog::sig_source_f *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_set_amplitude" "', argument " "1"" of type '" "gr::analog::sig_source_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_f * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_set_amplitude" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_set_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_f *arg1 = (gr::analog::sig_source_f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "offset", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_set_offset",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_set_offset" "', argument " "1"" of type '" "gr::analog::sig_source_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_set_offset" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->set_offset(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_sig_source_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_f *arg1 = (gr::analog::sig_source_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_sig_source_f",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sig_source_f" "', argument " "1"" of type '" "gr::analog::sig_source_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_f * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sig_source_f_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__sig_source_f, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_sig_source_c_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  gr::analog::gr_waveform_t arg2 ;
  double arg3 ;
  double arg4 ;
  gr_complex arg5 = (gr_complex) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  std::complex< float > val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "sampling_freq",(char *) "waveform",(char *) "wave_freq",(char *) "ampl",(char *) "offset", NULL 
  };
  gr::analog::sig_source_c::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:sig_source_c_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sig_source_c_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_make" "', argument " "2"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg2 = static_cast< gr::analog::gr_waveform_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_c_make" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sig_source_c_make" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "sig_source_c_make" "', argument " "5"" of type '" "gr_complex""'");
    } 
    arg5 = static_cast< gr_complex >(val5);
  }
  {
    try {
      result = gr::analog::sig_source_c::make(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::sig_source_c::sptr(static_cast< const gr::analog::sig_source_c::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_c *arg1 = (gr::analog::sig_source_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sampling_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sampling_freq" "', argument " "1"" of type '" "gr::analog::sig_source_c const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_c * >(argp1);
  {
    try {
      result = (double)((gr::analog::sig_source_c const *)arg1)->sampling_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_c *arg1 = (gr::analog::sig_source_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::gr_waveform_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_waveform",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_waveform" "', argument " "1"" of type '" "gr::analog::sig_source_c const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_c * >(argp1);
  {
    try {
      result = (gr::analog::gr_waveform_t)((gr::analog::sig_source_c const *)arg1)->waveform();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_c *arg1 = (gr::analog::sig_source_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_frequency",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_frequency" "', argument " "1"" of type '" "gr::analog::sig_source_c const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_c * >(argp1);
  {
    try {
      result = (double)((gr::analog::sig_source_c const *)arg1)->frequency();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_c *arg1 = (gr::analog::sig_source_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_amplitude" "', argument " "1"" of type '" "gr::analog::sig_source_c const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_c * >(argp1);
  {
    try {
      result = (double)((gr::analog::sig_source_c const *)arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_c *arg1 = (gr::analog::sig_source_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_complex result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_offset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_offset" "', argument " "1"" of type '" "gr::analog::sig_source_c const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_c * >(argp1);
  {
    try {
      result = ((gr::analog::sig_source_c const *)arg1)->offset();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_float_Sg_(static_cast< std::complex<float> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_set_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_c *arg1 = (gr::analog::sig_source_c *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_set_sampling_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_set_sampling_freq" "', argument " "1"" of type '" "gr::analog::sig_source_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_c * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_set_sampling_freq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_sampling_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_set_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_c *arg1 = (gr::analog::sig_source_c *) 0 ;
  gr::analog::gr_waveform_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "waveform", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_set_waveform",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_set_waveform" "', argument " "1"" of type '" "gr::analog::sig_source_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_c * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_set_waveform" "', argument " "2"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg2 = static_cast< gr::analog::gr_waveform_t >(val2);
  {
    try {
      (arg1)->set_waveform(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_c *arg1 = (gr::analog::sig_source_c *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frequency", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_set_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_set_frequency" "', argument " "1"" of type '" "gr::analog::sig_source_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_c * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_set_frequency" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_frequency(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_c *arg1 = (gr::analog::sig_source_c *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_set_amplitude" "', argument " "1"" of type '" "gr::analog::sig_source_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_c * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_set_amplitude" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_set_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_c *arg1 = (gr::analog::sig_source_c *) 0 ;
  gr_complex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< float > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "offset", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_set_offset",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_set_offset" "', argument " "1"" of type '" "gr::analog::sig_source_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_c * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_set_offset" "', argument " "2"" of type '" "gr_complex""'");
  } 
  arg2 = static_cast< gr_complex >(val2);
  {
    try {
      (arg1)->set_offset(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_sig_source_c(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_c *arg1 = (gr::analog::sig_source_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_sig_source_c",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_c, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sig_source_c" "', argument " "1"" of type '" "gr::analog::sig_source_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_c * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sig_source_c_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__sig_source_c, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_simple_squelch_cc_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "threshold_db",(char *) "alpha", NULL 
  };
  gr::analog::simple_squelch_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:simple_squelch_cc_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "simple_squelch_cc_make" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = gr::analog::simple_squelch_cc::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::simple_squelch_cc::sptr(static_cast< const gr::analog::simple_squelch_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::simple_squelch_cc *arg1 = (gr::analog::simple_squelch_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__simple_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_unmuted" "', argument " "1"" of type '" "gr::analog::simple_squelch_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::simple_squelch_cc * >(argp1);
  {
    try {
      result = (bool)((gr::analog::simple_squelch_cc const *)arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::simple_squelch_cc *arg1 = (gr::analog::simple_squelch_cc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:simple_squelch_cc_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__simple_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_set_alpha" "', argument " "1"" of type '" "gr::analog::simple_squelch_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::simple_squelch_cc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_set_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::simple_squelch_cc *arg1 = (gr::analog::simple_squelch_cc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "decibels", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:simple_squelch_cc_set_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__simple_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_set_threshold" "', argument " "1"" of type '" "gr::analog::simple_squelch_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::simple_squelch_cc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::simple_squelch_cc *arg1 = (gr::analog::simple_squelch_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__simple_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_threshold" "', argument " "1"" of type '" "gr::analog::simple_squelch_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::simple_squelch_cc * >(argp1);
  {
    try {
      result = (double)((gr::analog::simple_squelch_cc const *)arg1)->threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_squelch_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::simple_squelch_cc *arg1 = (gr::analog::simple_squelch_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_squelch_range",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__simple_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_squelch_range" "', argument " "1"" of type '" "gr::analog::simple_squelch_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::simple_squelch_cc * >(argp1);
  {
    try {
      result = ((gr::analog::simple_squelch_cc const *)arg1)->squelch_range();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_simple_squelch_cc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::simple_squelch_cc *arg1 = (gr::analog::simple_squelch_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_simple_squelch_cc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__simple_squelch_cc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_simple_squelch_cc" "', argument " "1"" of type '" "gr::analog::simple_squelch_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::simple_squelch_cc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *simple_squelch_cc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__simple_squelch_cc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_squelch_base_cc_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_cc *arg1 = (gr::analog::squelch_base_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"squelch_base_cc_ramp",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "squelch_base_cc_ramp" "', argument " "1"" of type '" "gr::analog::squelch_base_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_cc * >(argp1);
  {
    try {
      result = (int)((gr::analog::squelch_base_cc const *)arg1)->ramp();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_squelch_base_cc_set_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_cc *arg1 = (gr::analog::squelch_base_cc *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ramp", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:squelch_base_cc_set_ramp",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "squelch_base_cc_set_ramp" "', argument " "1"" of type '" "gr::analog::squelch_base_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_cc * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "squelch_base_cc_set_ramp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_ramp(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_squelch_base_cc_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_cc *arg1 = (gr::analog::squelch_base_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"squelch_base_cc_gate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "squelch_base_cc_gate" "', argument " "1"" of type '" "gr::analog::squelch_base_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_cc * >(argp1);
  {
    try {
      result = (bool)((gr::analog::squelch_base_cc const *)arg1)->gate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_squelch_base_cc_set_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_cc *arg1 = (gr::analog::squelch_base_cc *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:squelch_base_cc_set_gate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "squelch_base_cc_set_gate" "', argument " "1"" of type '" "gr::analog::squelch_base_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_cc * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "squelch_base_cc_set_gate" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_gate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_squelch_base_cc_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_cc *arg1 = (gr::analog::squelch_base_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"squelch_base_cc_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "squelch_base_cc_unmuted" "', argument " "1"" of type '" "gr::analog::squelch_base_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_cc * >(argp1);
  {
    try {
      result = (bool)((gr::analog::squelch_base_cc const *)arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_squelch_base_cc_squelch_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_cc *arg1 = (gr::analog::squelch_base_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"squelch_base_cc_squelch_range",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "squelch_base_cc_squelch_range" "', argument " "1"" of type '" "gr::analog::squelch_base_cc const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_cc * >(argp1);
  {
    try {
      result = ((gr::analog::squelch_base_cc const *)arg1)->squelch_range();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_squelch_base_cc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_cc *arg1 = (gr::analog::squelch_base_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_squelch_base_cc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_cc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_squelch_base_cc" "', argument " "1"" of type '" "gr::analog::squelch_base_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_cc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *squelch_base_cc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__squelch_base_cc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_squelch_base_ff_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_ff *arg1 = (gr::analog::squelch_base_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"squelch_base_ff_ramp",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "squelch_base_ff_ramp" "', argument " "1"" of type '" "gr::analog::squelch_base_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_ff * >(argp1);
  {
    try {
      result = (int)((gr::analog::squelch_base_ff const *)arg1)->ramp();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_squelch_base_ff_set_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_ff *arg1 = (gr::analog::squelch_base_ff *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ramp", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:squelch_base_ff_set_ramp",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "squelch_base_ff_set_ramp" "', argument " "1"" of type '" "gr::analog::squelch_base_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_ff * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "squelch_base_ff_set_ramp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_ramp(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_squelch_base_ff_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_ff *arg1 = (gr::analog::squelch_base_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"squelch_base_ff_gate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "squelch_base_ff_gate" "', argument " "1"" of type '" "gr::analog::squelch_base_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_ff * >(argp1);
  {
    try {
      result = (bool)((gr::analog::squelch_base_ff const *)arg1)->gate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_squelch_base_ff_set_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_ff *arg1 = (gr::analog::squelch_base_ff *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:squelch_base_ff_set_gate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "squelch_base_ff_set_gate" "', argument " "1"" of type '" "gr::analog::squelch_base_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_ff * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "squelch_base_ff_set_gate" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_gate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_squelch_base_ff_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_ff *arg1 = (gr::analog::squelch_base_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"squelch_base_ff_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "squelch_base_ff_unmuted" "', argument " "1"" of type '" "gr::analog::squelch_base_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_ff * >(argp1);
  {
    try {
      result = (bool)((gr::analog::squelch_base_ff const *)arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_squelch_base_ff_squelch_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_ff *arg1 = (gr::analog::squelch_base_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"squelch_base_ff_squelch_range",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "squelch_base_ff_squelch_range" "', argument " "1"" of type '" "gr::analog::squelch_base_ff const *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_ff * >(argp1);
  {
    try {
      result = ((gr::analog::squelch_base_ff const *)arg1)->squelch_range();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_squelch_base_ff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::squelch_base_ff *arg1 = (gr::analog::squelch_base_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_squelch_base_ff",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__squelch_base_ff, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_squelch_base_ff" "', argument " "1"" of type '" "gr::analog::squelch_base_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::squelch_base_ff * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *squelch_base_ff_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__analog__squelch_base_ff, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_agc_cc_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::agc_cc > *)new boost::shared_ptr< gr::analog::agc_cc >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_agc_cc_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc_cc *arg1 = (gr::analog::agc_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::agc_cc > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_agc_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_agc_cc_sptr" "', argument " "1"" of type '" "gr::analog::agc_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_cc * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::agc_cc > *)new boost::shared_ptr< gr::analog::agc_cc >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_agc_cc_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_agc_cc_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__agc_cc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_agc_cc_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_agc_cc_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::agc_cc >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::agc_cc >::shared_ptr(gr::analog::agc_cc *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::agc_cc *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (gr::analog::agc_cc *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__agc_cc, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_agc_cc_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_agc_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_agc_cc_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  float arg2 = (float) 1e-4 ;
  float arg3 = (float) 1.0 ;
  float arg4 = (float) 1.0 ;
  float arg5 = (float) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate",(char *) "reference",(char *) "gain",(char *) "max_gain", NULL 
  };
  gr::analog::agc_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:agc_cc_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_make" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc_cc_sptr_make" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "agc_cc_sptr_make" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_float(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "agc_cc_sptr_make" "', argument " "5"" of type '" "float""'");
    } 
    arg5 = static_cast< float >(val5);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::agc_cc::sptr(static_cast< const gr::analog::agc_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_reference",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_reference" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->reference();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_max_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_max_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->max_gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_set_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_sptr_set_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_set_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_set_rate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_set_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "reference", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_sptr_set_reference",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_set_reference" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_set_reference" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_reference(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_set_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_sptr_set_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_set_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_set_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_set_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_sptr_set_max_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_set_max_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_set_max_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_max_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc_cc_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_agc_cc_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_agc_cc_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'agc_cc_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc_cc_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_agc_cc_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_agc_cc_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'agc_cc_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "agc_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agc_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:agc_cc_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_cc_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc_cc_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_cc_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "agc_cc_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:agc_cc_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "agc_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agc_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "agc_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agc_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_cc_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_cc > *arg1 = (boost::shared_ptr< gr::analog::agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_cc_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_cc_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *agc_cc_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_cc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_agc_ff_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::agc_ff > *)new boost::shared_ptr< gr::analog::agc_ff >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_agc_ff_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc_ff *arg1 = (gr::analog::agc_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::agc_ff > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_agc_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_agc_ff_sptr" "', argument " "1"" of type '" "gr::analog::agc_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc_ff * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::agc_ff > *)new boost::shared_ptr< gr::analog::agc_ff >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_agc_ff_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_agc_ff_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__agc_ff, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_agc_ff_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_agc_ff_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::agc_ff >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::agc_ff >::shared_ptr(gr::analog::agc_ff *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::agc_ff *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (gr::analog::agc_ff *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__agc_ff, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_agc_ff_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_agc_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_agc_ff_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  float arg2 = (float) 1e-4 ;
  float arg3 = (float) 1.0 ;
  float arg4 = (float) 1.0 ;
  float arg5 = (float) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate",(char *) "reference",(char *) "gain",(char *) "max_gain", NULL 
  };
  gr::analog::agc_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:agc_ff_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_make" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc_ff_sptr_make" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "agc_ff_sptr_make" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_float(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "agc_ff_sptr_make" "', argument " "5"" of type '" "float""'");
    } 
    arg5 = static_cast< float >(val5);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::agc_ff::sptr(static_cast< const gr::analog::agc_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_reference",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_reference" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->reference();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_max_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_max_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->max_gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_set_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_sptr_set_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_set_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_set_rate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_set_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "reference", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_sptr_set_reference",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_set_reference" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_set_reference" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_reference(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_set_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_sptr_set_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_set_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_set_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_set_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_sptr_set_max_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_set_max_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_set_max_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_max_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc_ff_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_agc_ff_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_agc_ff_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'agc_ff_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc_ff_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_agc_ff_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_agc_ff_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'agc_ff_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "agc_ff_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agc_ff_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:agc_ff_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc_ff_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc_ff_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc_ff_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "agc_ff_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:agc_ff_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "agc_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agc_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "agc_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agc_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc_ff_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc_ff > *arg1 = (boost::shared_ptr< gr::analog::agc_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc_ff_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc_ff_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *agc_ff_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc_ff_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_agc2_cc_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::agc2_cc > *)new boost::shared_ptr< gr::analog::agc2_cc >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_agc2_cc_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_cc *arg1 = (gr::analog::agc2_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::agc2_cc > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_agc2_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_agc2_cc_sptr" "', argument " "1"" of type '" "gr::analog::agc2_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_cc * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::agc2_cc > *)new boost::shared_ptr< gr::analog::agc2_cc >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_agc2_cc_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_agc2_cc_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__agc2_cc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_agc2_cc_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_agc2_cc_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::agc2_cc >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::agc2_cc >::shared_ptr(gr::analog::agc2_cc *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::agc2_cc *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (gr::analog::agc2_cc *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__agc2_cc, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_agc2_cc_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_agc2_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_agc2_cc_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  float arg2 = (float) 1e-1 ;
  float arg3 = (float) 1e-2 ;
  float arg4 = (float) 1.0 ;
  float arg5 = (float) 1.0 ;
  float arg6 = (float) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "attack_rate",(char *) "decay_rate",(char *) "reference",(char *) "gain",(char *) "max_gain", NULL 
  };
  gr::analog::agc2_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOO:agc2_cc_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_make" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc2_cc_sptr_make" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "agc2_cc_sptr_make" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_float(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "agc2_cc_sptr_make" "', argument " "5"" of type '" "float""'");
    } 
    arg5 = static_cast< float >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_float(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "agc2_cc_sptr_make" "', argument " "6"" of type '" "float""'");
    } 
    arg6 = static_cast< float >(val6);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::agc2_cc::sptr(static_cast< const gr::analog::agc2_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_attack_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_attack_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_attack_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->attack_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_decay_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_decay_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_decay_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->decay_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_reference",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_reference" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->reference();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_max_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_max_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->max_gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_attack_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_sptr_set_attack_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_set_attack_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_set_attack_rate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_attack_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_decay_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_sptr_set_decay_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_set_decay_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_set_decay_rate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_decay_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "reference", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_sptr_set_reference",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_set_reference" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_set_reference" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_reference(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_sptr_set_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_set_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_set_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_sptr_set_max_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_set_max_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_set_max_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_max_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc2_cc_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_agc2_cc_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_agc2_cc_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'agc2_cc_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc2_cc_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_agc2_cc_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_agc2_cc_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'agc2_cc_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "agc2_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agc2_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:agc2_cc_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_cc_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc2_cc_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_cc_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "agc2_cc_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:agc2_cc_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "agc2_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agc2_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "agc2_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agc2_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_cc_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_cc > *arg1 = (boost::shared_ptr< gr::analog::agc2_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_cc_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_cc_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *agc2_cc_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_cc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_agc2_ff_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::agc2_ff > *)new boost::shared_ptr< gr::analog::agc2_ff >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_agc2_ff_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::agc2_ff *arg1 = (gr::analog::agc2_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::agc2_ff > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_agc2_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__agc2_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_agc2_ff_sptr" "', argument " "1"" of type '" "gr::analog::agc2_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::agc2_ff * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::agc2_ff > *)new boost::shared_ptr< gr::analog::agc2_ff >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_agc2_ff_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_agc2_ff_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__agc2_ff, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_agc2_ff_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_agc2_ff_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::agc2_ff >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::agc2_ff >::shared_ptr(gr::analog::agc2_ff *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::agc2_ff *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (gr::analog::agc2_ff *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__agc2_ff, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_agc2_ff_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_agc2_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_agc2_ff_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  float arg2 = (float) 1e-1 ;
  float arg3 = (float) 1e-2 ;
  float arg4 = (float) 1.0 ;
  float arg5 = (float) 1.0 ;
  float arg6 = (float) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "attack_rate",(char *) "decay_rate",(char *) "reference",(char *) "gain",(char *) "max_gain", NULL 
  };
  gr::analog::agc2_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOO:agc2_ff_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_make" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc2_ff_sptr_make" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "agc2_ff_sptr_make" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_float(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "agc2_ff_sptr_make" "', argument " "5"" of type '" "float""'");
    } 
    arg5 = static_cast< float >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_float(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "agc2_ff_sptr_make" "', argument " "6"" of type '" "float""'");
    } 
    arg6 = static_cast< float >(val6);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::agc2_ff::sptr(static_cast< const gr::analog::agc2_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_attack_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_attack_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_attack_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->attack_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_decay_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_decay_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_decay_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->decay_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_reference",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_reference" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->reference();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_max_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_max_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->max_gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_attack_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_sptr_set_attack_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_set_attack_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_set_attack_rate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_attack_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_decay_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_sptr_set_decay_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_set_decay_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_set_decay_rate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_decay_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "reference", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_sptr_set_reference",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_set_reference" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_set_reference" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_reference(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_sptr_set_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_set_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_set_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_max_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_sptr_set_max_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_set_max_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_set_max_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_max_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc2_ff_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_agc2_ff_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_agc2_ff_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'agc2_ff_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc2_ff_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_agc2_ff_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_agc2_ff_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'agc2_ff_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "agc2_ff_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agc2_ff_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:agc2_ff_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "agc2_ff_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "agc2_ff_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:agc2_ff_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "agc2_ff_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:agc2_ff_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "agc2_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agc2_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "agc2_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agc2_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_agc2_ff_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::agc2_ff > *arg1 = (boost::shared_ptr< gr::analog::agc2_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"agc2_ff_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agc2_ff_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::agc2_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::agc2_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *agc2_ff_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__agc2_ff_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_cpfsk_bc_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::cpfsk_bc > *)new boost::shared_ptr< gr::analog::cpfsk_bc >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cpfsk_bc_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::cpfsk_bc *arg1 = (gr::analog::cpfsk_bc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::cpfsk_bc > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_cpfsk_bc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__cpfsk_bc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_cpfsk_bc_sptr" "', argument " "1"" of type '" "gr::analog::cpfsk_bc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::cpfsk_bc * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::cpfsk_bc > *)new boost::shared_ptr< gr::analog::cpfsk_bc >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_cpfsk_bc_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_cpfsk_bc_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__cpfsk_bc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_cpfsk_bc_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_cpfsk_bc_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::cpfsk_bc >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::cpfsk_bc >::shared_ptr(gr::analog::cpfsk_bc *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::cpfsk_bc *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (gr::analog::cpfsk_bc *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__cpfsk_bc, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cpfsk_bc_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_cpfsk_bc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cpfsk_bc_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "k",(char *) "ampl",(char *) "samples_per_sym", NULL 
  };
  gr::analog::cpfsk_bc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:cpfsk_bc_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_sptr_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpfsk_bc_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpfsk_bc_sptr_make" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::cpfsk_bc::sptr(static_cast< const gr::analog::cpfsk_bc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "amplitude", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:cpfsk_bc_sptr_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_set_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_sptr_set_amplitude" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_phase",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_phase" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->phase();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:cpfsk_bc_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:cpfsk_bc_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:cpfsk_bc_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:cpfsk_bc_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpfsk_bc_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_cpfsk_bc_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_cpfsk_bc_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'cpfsk_bc_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:cpfsk_bc_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpfsk_bc_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_cpfsk_bc_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_cpfsk_bc_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'cpfsk_bc_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:cpfsk_bc_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpfsk_bc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpfsk_bc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:cpfsk_bc_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpfsk_bc_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpfsk_bc_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:cpfsk_bc_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "cpfsk_bc_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:cpfsk_bc_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cpfsk_bc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpfsk_bc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cpfsk_bc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cpfsk_bc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpfsk_bc_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::cpfsk_bc > *arg1 = (boost::shared_ptr< gr::analog::cpfsk_bc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"cpfsk_bc_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpfsk_bc_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::cpfsk_bc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::cpfsk_bc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cpfsk_bc_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ctcss_squelch_ff_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *)new boost::shared_ptr< gr::analog::ctcss_squelch_ff >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ctcss_squelch_ff_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::ctcss_squelch_ff *arg1 = (gr::analog::ctcss_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_ctcss_squelch_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__ctcss_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ctcss_squelch_ff_sptr" "', argument " "1"" of type '" "gr::analog::ctcss_squelch_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::ctcss_squelch_ff * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *)new boost::shared_ptr< gr::analog::ctcss_squelch_ff >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ctcss_squelch_ff_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ctcss_squelch_ff_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__ctcss_squelch_ff, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ctcss_squelch_ff_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ctcss_squelch_ff_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::ctcss_squelch_ff >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::ctcss_squelch_ff >::shared_ptr(gr::analog::ctcss_squelch_ff *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::ctcss_squelch_ff *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (gr::analog::ctcss_squelch_ff *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__ctcss_squelch_ff, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ctcss_squelch_ff_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ctcss_squelch_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ctcss_squelch_ff_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "rate",(char *) "freq",(char *) "level",(char *) "len",(char *) "ramp",(char *) "gate", NULL 
  };
  gr::analog::ctcss_squelch_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOO:ctcss_squelch_ff_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ctcss_squelch_ff_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ctcss_squelch_ff_sptr_make" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ctcss_squelch_ff_sptr_make" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ctcss_squelch_ff_sptr_make" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ctcss_squelch_ff_sptr_make" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::ctcss_squelch_ff::sptr(static_cast< const gr::analog::ctcss_squelch_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_squelch_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_squelch_range",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_squelch_range" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->squelch_range();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_level",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_level" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->level();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_set_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "level", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ctcss_squelch_ff_sptr_set_level",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_set_level" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_set_level" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_level(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_len(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_len",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_len" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->len();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_ramp",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_ramp" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->ramp();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_set_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ramp", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ctcss_squelch_ff_sptr_set_ramp",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_set_ramp" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_set_ramp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_ramp(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_gate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_gate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->gate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_set_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ctcss_squelch_ff_sptr_set_gate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_set_gate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_set_gate" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (*arg1)->set_gate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_unmuted" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ctcss_squelch_ff_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ctcss_squelch_ff_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ctcss_squelch_ff_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ctcss_squelch_ff_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ctcss_squelch_ff_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ctcss_squelch_ff_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ctcss_squelch_ff_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ctcss_squelch_ff_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ctcss_squelch_ff_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ctcss_squelch_ff_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ctcss_squelch_ff_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ctcss_squelch_ff_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ctcss_squelch_ff_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ctcss_squelch_ff_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctcss_squelch_ff_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ctcss_squelch_ff_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ctcss_squelch_ff_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ctcss_squelch_ff_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ctcss_squelch_ff_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ctcss_squelch_ff_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ctcss_squelch_ff_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ctcss_squelch_ff_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ctcss_squelch_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ctcss_squelch_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ctcss_squelch_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ctcss_squelch_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ctcss_squelch_ff_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::ctcss_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::ctcss_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ctcss_squelch_ff_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ctcss_squelch_ff_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::ctcss_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::ctcss_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ctcss_squelch_ff_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_dpll_bb_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::dpll_bb > *)new boost::shared_ptr< gr::analog::dpll_bb >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dpll_bb_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::dpll_bb *arg1 = (gr::analog::dpll_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::dpll_bb > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_dpll_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__dpll_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dpll_bb_sptr" "', argument " "1"" of type '" "gr::analog::dpll_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::dpll_bb * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::dpll_bb > *)new boost::shared_ptr< gr::analog::dpll_bb >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dpll_bb_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_dpll_bb_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__dpll_bb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_dpll_bb_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_dpll_bb_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::dpll_bb >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::dpll_bb >::shared_ptr(gr::analog::dpll_bb *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::dpll_bb *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (gr::analog::dpll_bb *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__dpll_bb, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dpll_bb_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_dpll_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dpll_bb_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "period",(char *) "gain", NULL 
  };
  gr::analog::dpll_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:dpll_bb_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_sptr_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dpll_bb_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      result = (*arg1)->make(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::dpll_bb::sptr(static_cast< const gr::analog::dpll_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_set_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:dpll_bb_sptr_set_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_set_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_sptr_set_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_set_decision_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "thresh", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:dpll_bb_sptr_set_decision_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_set_decision_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_sptr_set_decision_threshold" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_decision_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_phase",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_phase" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->phase();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_decision_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_decision_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_decision_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->decision_threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:dpll_bb_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:dpll_bb_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:dpll_bb_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:dpll_bb_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dpll_bb_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_dpll_bb_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_dpll_bb_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dpll_bb_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:dpll_bb_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dpll_bb_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_dpll_bb_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_dpll_bb_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dpll_bb_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:dpll_bb_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dpll_bb_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dpll_bb_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:dpll_bb_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dpll_bb_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dpll_bb_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:dpll_bb_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "dpll_bb_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:dpll_bb_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dpll_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dpll_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dpll_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dpll_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dpll_bb_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::dpll_bb > *arg1 = (boost::shared_ptr< gr::analog::dpll_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"dpll_bb_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dpll_bb_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::dpll_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::dpll_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dpll_bb_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__dpll_bb_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_feedforward_agc_cc_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *)new boost::shared_ptr< gr::analog::feedforward_agc_cc >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_feedforward_agc_cc_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::feedforward_agc_cc *arg1 = (gr::analog::feedforward_agc_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_feedforward_agc_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__feedforward_agc_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_feedforward_agc_cc_sptr" "', argument " "1"" of type '" "gr::analog::feedforward_agc_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::feedforward_agc_cc * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *)new boost::shared_ptr< gr::analog::feedforward_agc_cc >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_feedforward_agc_cc_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_feedforward_agc_cc_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__feedforward_agc_cc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_feedforward_agc_cc_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_feedforward_agc_cc_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::feedforward_agc_cc >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::feedforward_agc_cc >::shared_ptr(gr::analog::feedforward_agc_cc *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::feedforward_agc_cc *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (gr::analog::feedforward_agc_cc *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__feedforward_agc_cc, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_feedforward_agc_cc_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_feedforward_agc_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_feedforward_agc_cc_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "nsamples",(char *) "reference", NULL 
  };
  gr::analog::feedforward_agc_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:feedforward_agc_cc_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feedforward_agc_cc_sptr_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "feedforward_agc_cc_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      result = (*arg1)->make(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::feedforward_agc_cc::sptr(static_cast< const gr::analog::feedforward_agc_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feedforward_agc_cc_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feedforward_agc_cc_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feedforward_agc_cc_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feedforward_agc_cc_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feedforward_agc_cc_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feedforward_agc_cc_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feedforward_agc_cc_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feedforward_agc_cc_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feedforward_agc_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feedforward_agc_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "feedforward_agc_cc_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_feedforward_agc_cc_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_feedforward_agc_cc_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'feedforward_agc_cc_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feedforward_agc_cc_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feedforward_agc_cc_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feedforward_agc_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feedforward_agc_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "feedforward_agc_cc_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_feedforward_agc_cc_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_feedforward_agc_cc_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'feedforward_agc_cc_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feedforward_agc_cc_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "feedforward_agc_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "feedforward_agc_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:feedforward_agc_cc_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feedforward_agc_cc_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "feedforward_agc_cc_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feedforward_agc_cc_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "feedforward_agc_cc_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:feedforward_agc_cc_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "feedforward_agc_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "feedforward_agc_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "feedforward_agc_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "feedforward_agc_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feedforward_agc_cc_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::feedforward_agc_cc > *arg1 = (boost::shared_ptr< gr::analog::feedforward_agc_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"feedforward_agc_cc_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feedforward_agc_cc_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::feedforward_agc_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::feedforward_agc_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *feedforward_agc_cc_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_fmdet_cf_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::fmdet_cf > *)new boost::shared_ptr< gr::analog::fmdet_cf >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fmdet_cf_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::fmdet_cf *arg1 = (gr::analog::fmdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::fmdet_cf > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_fmdet_cf_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__fmdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fmdet_cf_sptr" "', argument " "1"" of type '" "gr::analog::fmdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::fmdet_cf * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::fmdet_cf > *)new boost::shared_ptr< gr::analog::fmdet_cf >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fmdet_cf_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_fmdet_cf_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__fmdet_cf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_fmdet_cf_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_fmdet_cf_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::fmdet_cf >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::fmdet_cf >::shared_ptr(gr::analog::fmdet_cf *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::fmdet_cf *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (gr::analog::fmdet_cf *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__fmdet_cf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fmdet_cf_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_fmdet_cf_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fmdet_cf_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "samplerate",(char *) "freq_low",(char *) "freq_high",(char *) "scl", NULL 
  };
  gr::analog::fmdet_cf::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:fmdet_cf_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_sptr_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fmdet_cf_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fmdet_cf_sptr_make" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fmdet_cf_sptr_make" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::fmdet_cf::sptr(static_cast< const gr::analog::fmdet_cf::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_set_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "scl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:fmdet_cf_sptr_set_scale",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_set_scale" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_sptr_set_scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_scale(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_set_freq_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq_low",(char *) "freq_high", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:fmdet_cf_sptr_set_freq_range",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_set_freq_range" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_sptr_set_freq_range" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fmdet_cf_sptr_set_freq_range" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      (*arg1)->set_freq_range(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_freq_high(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_freq_high",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_freq_high" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->freq_high();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_freq_low(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_freq_low",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_freq_low" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->freq_low();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_scale",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_scale" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->scale();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_bias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_bias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_bias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->bias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:fmdet_cf_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:fmdet_cf_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:fmdet_cf_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:fmdet_cf_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fmdet_cf_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_fmdet_cf_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fmdet_cf_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fmdet_cf_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:fmdet_cf_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fmdet_cf_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_fmdet_cf_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_fmdet_cf_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fmdet_cf_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:fmdet_cf_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmdet_cf_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmdet_cf_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:fmdet_cf_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fmdet_cf_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fmdet_cf_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:fmdet_cf_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fmdet_cf_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:fmdet_cf_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmdet_cf_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmdet_cf_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fmdet_cf_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmdet_cf_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fmdet_cf_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::fmdet_cf > *arg1 = (boost::shared_ptr< gr::analog::fmdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fmdet_cf_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmdet_cf_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::fmdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::fmdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fmdet_cf_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__fmdet_cf_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_frequency_modulator_fc_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *)new boost::shared_ptr< gr::analog::frequency_modulator_fc >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_frequency_modulator_fc_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::frequency_modulator_fc *arg1 = (gr::analog::frequency_modulator_fc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_frequency_modulator_fc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__frequency_modulator_fc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_frequency_modulator_fc_sptr" "', argument " "1"" of type '" "gr::analog::frequency_modulator_fc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::frequency_modulator_fc * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *)new boost::shared_ptr< gr::analog::frequency_modulator_fc >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_frequency_modulator_fc_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_frequency_modulator_fc_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__frequency_modulator_fc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_frequency_modulator_fc_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_frequency_modulator_fc_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::frequency_modulator_fc >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::frequency_modulator_fc >::shared_ptr(gr::analog::frequency_modulator_fc *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::frequency_modulator_fc *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (gr::analog::frequency_modulator_fc *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__frequency_modulator_fc, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_frequency_modulator_fc_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_frequency_modulator_fc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_frequency_modulator_fc_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sensitivity", NULL 
  };
  gr::analog::frequency_modulator_fc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:frequency_modulator_fc_sptr_make",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequency_modulator_fc_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (*arg1)->make(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::frequency_modulator_fc::sptr(static_cast< const gr::analog::frequency_modulator_fc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_set_sensitivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sens", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:frequency_modulator_fc_sptr_set_sensitivity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_set_sensitivity" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequency_modulator_fc_sptr_set_sensitivity" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_sensitivity(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_sensitivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_sensitivity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_sensitivity" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->sensitivity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:frequency_modulator_fc_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequency_modulator_fc_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:frequency_modulator_fc_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequency_modulator_fc_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:frequency_modulator_fc_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequency_modulator_fc_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:frequency_modulator_fc_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequency_modulator_fc_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequency_modulator_fc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequency_modulator_fc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "frequency_modulator_fc_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_frequency_modulator_fc_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_frequency_modulator_fc_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'frequency_modulator_fc_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:frequency_modulator_fc_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequency_modulator_fc_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequency_modulator_fc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequency_modulator_fc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "frequency_modulator_fc_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_frequency_modulator_fc_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_frequency_modulator_fc_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'frequency_modulator_fc_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:frequency_modulator_fc_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "frequency_modulator_fc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "frequency_modulator_fc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:frequency_modulator_fc_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequency_modulator_fc_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "frequency_modulator_fc_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:frequency_modulator_fc_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "frequency_modulator_fc_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:frequency_modulator_fc_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "frequency_modulator_fc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "frequency_modulator_fc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "frequency_modulator_fc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "frequency_modulator_fc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_frequency_modulator_fc_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::frequency_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::frequency_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"frequency_modulator_fc_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequency_modulator_fc_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::frequency_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::frequency_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *frequency_modulator_fc_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_noise_source_s_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::noise_source_s > *)new boost::shared_ptr< gr::analog::noise_source_s >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_noise_source_s_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_s *arg1 = (gr::analog::noise_source_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::noise_source_s > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_noise_source_s_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_noise_source_s_sptr" "', argument " "1"" of type '" "gr::analog::noise_source_s *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_s * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::noise_source_s > *)new boost::shared_ptr< gr::analog::noise_source_s >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_noise_source_s_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_noise_source_s_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__noise_source_s, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_noise_source_s_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_noise_source_s_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::noise_source_s >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::noise_source_s >::shared_ptr(gr::analog::noise_source_s *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::noise_source_s *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (gr::analog::noise_source_s *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__noise_source_s, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_noise_source_s_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_noise_source_s_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_noise_source_s_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  gr::analog::noise_type_t arg2 ;
  float arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type",(char *) "ampl",(char *) "seed", NULL 
  };
  gr::analog::noise_source_s::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:noise_source_s_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_sptr_make" "', argument " "2"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg2 = static_cast< gr::analog::noise_type_t >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_s_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "noise_source_s_sptr_make" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::noise_source_s::sptr(static_cast< const gr::analog::noise_source_s::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_set_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  gr::analog::noise_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_s_sptr_set_type",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_set_type" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_sptr_set_type" "', argument " "2"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg2 = static_cast< gr::analog::noise_type_t >(val2);
  {
    try {
      (*arg1)->set_type(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_s_sptr_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_set_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_sptr_set_amplitude" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::noise_type_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_type",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_type" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (gr::analog::noise_type_t)(*arg1)->type();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (float)(*arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_s_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_s_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_s_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_s_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_s_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_noise_source_s_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_noise_source_s_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'noise_source_s_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_s_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_s_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_noise_source_s_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_noise_source_s_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'noise_source_s_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_s_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "noise_source_s_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "noise_source_s_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:noise_source_s_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_s_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_s_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_s_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "noise_source_s_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:noise_source_s_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "noise_source_s_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "noise_source_s_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "noise_source_s_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "noise_source_s_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_s_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_s > *arg1 = (boost::shared_ptr< gr::analog::noise_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_s_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_s_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *noise_source_s_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_s_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_noise_source_i_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::noise_source_i > *)new boost::shared_ptr< gr::analog::noise_source_i >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_noise_source_i_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_i *arg1 = (gr::analog::noise_source_i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::noise_source_i > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_noise_source_i_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_noise_source_i_sptr" "', argument " "1"" of type '" "gr::analog::noise_source_i *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_i * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::noise_source_i > *)new boost::shared_ptr< gr::analog::noise_source_i >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_noise_source_i_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_noise_source_i_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__noise_source_i, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_noise_source_i_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_noise_source_i_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::noise_source_i >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::noise_source_i >::shared_ptr(gr::analog::noise_source_i *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::noise_source_i *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (gr::analog::noise_source_i *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__noise_source_i, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_noise_source_i_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_noise_source_i_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_noise_source_i_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  gr::analog::noise_type_t arg2 ;
  float arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type",(char *) "ampl",(char *) "seed", NULL 
  };
  gr::analog::noise_source_i::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:noise_source_i_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_sptr_make" "', argument " "2"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg2 = static_cast< gr::analog::noise_type_t >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_i_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "noise_source_i_sptr_make" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::noise_source_i::sptr(static_cast< const gr::analog::noise_source_i::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_set_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  gr::analog::noise_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_i_sptr_set_type",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_set_type" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_sptr_set_type" "', argument " "2"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg2 = static_cast< gr::analog::noise_type_t >(val2);
  {
    try {
      (*arg1)->set_type(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_i_sptr_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_set_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_sptr_set_amplitude" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::noise_type_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_type",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_type" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (gr::analog::noise_type_t)(*arg1)->type();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (float)(*arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_i_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_i_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_i_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_i_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_i_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_noise_source_i_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_noise_source_i_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'noise_source_i_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_i_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_i_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_noise_source_i_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_noise_source_i_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'noise_source_i_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_i_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "noise_source_i_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "noise_source_i_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:noise_source_i_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_i_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_i_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_i_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "noise_source_i_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:noise_source_i_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "noise_source_i_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "noise_source_i_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "noise_source_i_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "noise_source_i_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_i_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_i > *arg1 = (boost::shared_ptr< gr::analog::noise_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_i_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_i_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *noise_source_i_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_i_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_noise_source_f_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::noise_source_f > *)new boost::shared_ptr< gr::analog::noise_source_f >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_noise_source_f_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_f *arg1 = (gr::analog::noise_source_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::noise_source_f > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_noise_source_f_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_noise_source_f_sptr" "', argument " "1"" of type '" "gr::analog::noise_source_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_f * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::noise_source_f > *)new boost::shared_ptr< gr::analog::noise_source_f >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_noise_source_f_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_noise_source_f_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__noise_source_f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_noise_source_f_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_noise_source_f_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::noise_source_f >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::noise_source_f >::shared_ptr(gr::analog::noise_source_f *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::noise_source_f *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (gr::analog::noise_source_f *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__noise_source_f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_noise_source_f_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_noise_source_f_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_noise_source_f_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  gr::analog::noise_type_t arg2 ;
  float arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type",(char *) "ampl",(char *) "seed", NULL 
  };
  gr::analog::noise_source_f::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:noise_source_f_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_sptr_make" "', argument " "2"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg2 = static_cast< gr::analog::noise_type_t >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_f_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "noise_source_f_sptr_make" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::noise_source_f::sptr(static_cast< const gr::analog::noise_source_f::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_set_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  gr::analog::noise_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_f_sptr_set_type",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_set_type" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_sptr_set_type" "', argument " "2"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg2 = static_cast< gr::analog::noise_type_t >(val2);
  {
    try {
      (*arg1)->set_type(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_f_sptr_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_set_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_sptr_set_amplitude" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::noise_type_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_type",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_type" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (gr::analog::noise_type_t)(*arg1)->type();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (float)(*arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_f_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_f_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_f_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_f_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_f_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_noise_source_f_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_noise_source_f_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'noise_source_f_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_f_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_f_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_noise_source_f_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_noise_source_f_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'noise_source_f_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_f_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "noise_source_f_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "noise_source_f_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:noise_source_f_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_f_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_f_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_f_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "noise_source_f_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:noise_source_f_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "noise_source_f_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "noise_source_f_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "noise_source_f_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "noise_source_f_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_f_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_f > *arg1 = (boost::shared_ptr< gr::analog::noise_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_f_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_f_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *noise_source_f_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_f_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_noise_source_c_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::noise_source_c > *)new boost::shared_ptr< gr::analog::noise_source_c >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_noise_source_c_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::noise_source_c *arg1 = (gr::analog::noise_source_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::noise_source_c > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_noise_source_c_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__noise_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_noise_source_c_sptr" "', argument " "1"" of type '" "gr::analog::noise_source_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::noise_source_c * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::noise_source_c > *)new boost::shared_ptr< gr::analog::noise_source_c >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_noise_source_c_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_noise_source_c_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__noise_source_c, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_noise_source_c_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_noise_source_c_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::noise_source_c >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::noise_source_c >::shared_ptr(gr::analog::noise_source_c *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::noise_source_c *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (gr::analog::noise_source_c *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__noise_source_c, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_noise_source_c_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_noise_source_c_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_noise_source_c_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  gr::analog::noise_type_t arg2 ;
  float arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type",(char *) "ampl",(char *) "seed", NULL 
  };
  gr::analog::noise_source_c::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:noise_source_c_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_sptr_make" "', argument " "2"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg2 = static_cast< gr::analog::noise_type_t >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_c_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "noise_source_c_sptr_make" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::noise_source_c::sptr(static_cast< const gr::analog::noise_source_c::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_set_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  gr::analog::noise_type_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_c_sptr_set_type",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_set_type" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_sptr_set_type" "', argument " "2"" of type '" "gr::analog::noise_type_t""'");
  } 
  arg2 = static_cast< gr::analog::noise_type_t >(val2);
  {
    try {
      (*arg1)->set_type(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_c_sptr_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_set_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_sptr_set_amplitude" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::noise_type_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_type",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_type" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (gr::analog::noise_type_t)(*arg1)->type();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (float)(*arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_c_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_c_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_c_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_c_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_c_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_noise_source_c_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_noise_source_c_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'noise_source_c_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_c_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_c_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_noise_source_c_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_noise_source_c_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'noise_source_c_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_c_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "noise_source_c_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "noise_source_c_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:noise_source_c_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "noise_source_c_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "noise_source_c_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:noise_source_c_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "noise_source_c_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:noise_source_c_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "noise_source_c_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "noise_source_c_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "noise_source_c_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "noise_source_c_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_noise_source_c_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::noise_source_c > *arg1 = (boost::shared_ptr< gr::analog::noise_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"noise_source_c_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "noise_source_c_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::noise_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::noise_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *noise_source_c_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__noise_source_c_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_phase_modulator_fc_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::phase_modulator_fc > *)new boost::shared_ptr< gr::analog::phase_modulator_fc >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_phase_modulator_fc_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::phase_modulator_fc *arg1 = (gr::analog::phase_modulator_fc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_phase_modulator_fc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__phase_modulator_fc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_phase_modulator_fc_sptr" "', argument " "1"" of type '" "gr::analog::phase_modulator_fc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::phase_modulator_fc * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::phase_modulator_fc > *)new boost::shared_ptr< gr::analog::phase_modulator_fc >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_phase_modulator_fc_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_phase_modulator_fc_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__phase_modulator_fc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_phase_modulator_fc_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_phase_modulator_fc_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::phase_modulator_fc >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::phase_modulator_fc >::shared_ptr(gr::analog::phase_modulator_fc *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::phase_modulator_fc *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (gr::analog::phase_modulator_fc *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__phase_modulator_fc, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_phase_modulator_fc_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_phase_modulator_fc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_phase_modulator_fc_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sensitivity", NULL 
  };
  gr::analog::phase_modulator_fc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:phase_modulator_fc_sptr_make",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (*arg1)->make(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::phase_modulator_fc::sptr(static_cast< const gr::analog::phase_modulator_fc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_sensitivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_sensitivity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_sensitivity" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->sensitivity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_phase",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_phase" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->phase();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_set_sensitivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "s", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:phase_modulator_fc_sptr_set_sensitivity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_set_sensitivity" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_sptr_set_sensitivity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_sensitivity(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_set_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "p", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:phase_modulator_fc_sptr_set_phase",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_set_phase" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_sptr_set_phase" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_phase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:phase_modulator_fc_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:phase_modulator_fc_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:phase_modulator_fc_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:phase_modulator_fc_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "phase_modulator_fc_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_phase_modulator_fc_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_phase_modulator_fc_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'phase_modulator_fc_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:phase_modulator_fc_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "phase_modulator_fc_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_phase_modulator_fc_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_phase_modulator_fc_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'phase_modulator_fc_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:phase_modulator_fc_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "phase_modulator_fc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "phase_modulator_fc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:phase_modulator_fc_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "phase_modulator_fc_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "phase_modulator_fc_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:phase_modulator_fc_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "phase_modulator_fc_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:phase_modulator_fc_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "phase_modulator_fc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "phase_modulator_fc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "phase_modulator_fc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "phase_modulator_fc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phase_modulator_fc_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::phase_modulator_fc > *arg1 = (boost::shared_ptr< gr::analog::phase_modulator_fc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"phase_modulator_fc_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phase_modulator_fc_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::phase_modulator_fc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::phase_modulator_fc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *phase_modulator_fc_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_pll_carriertracking_cc_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *)new boost::shared_ptr< gr::analog::pll_carriertracking_cc >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pll_carriertracking_cc_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_carriertracking_cc *arg1 = (gr::analog::pll_carriertracking_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_pll_carriertracking_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pll_carriertracking_cc_sptr" "', argument " "1"" of type '" "gr::analog::pll_carriertracking_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_carriertracking_cc * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *)new boost::shared_ptr< gr::analog::pll_carriertracking_cc >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pll_carriertracking_cc_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_pll_carriertracking_cc_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_pll_carriertracking_cc_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_pll_carriertracking_cc_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::pll_carriertracking_cc >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::pll_carriertracking_cc >::shared_ptr(gr::analog::pll_carriertracking_cc *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::pll_carriertracking_cc *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (gr::analog::pll_carriertracking_cc *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__pll_carriertracking_cc, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pll_carriertracking_cc_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_pll_carriertracking_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pll_carriertracking_cc_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "loop_bw",(char *) "max_freq",(char *) "min_freq", NULL 
  };
  gr::analog::pll_carriertracking_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:pll_carriertracking_cc_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_carriertracking_cc_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pll_carriertracking_cc_sptr_make" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::pll_carriertracking_cc::sptr(static_cast< const gr::analog::pll_carriertracking_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_lock_detector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_lock_detector",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_lock_detector" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->lock_detector();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_squelch_enable(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *)"arg2", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_squelch_enable",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_squelch_enable" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_squelch_enable" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (bool)(*arg1)->squelch_enable(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_lock_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *)"arg2", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_set_lock_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_lock_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_lock_threshold" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (float)(*arg1)->set_lock_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_loop_bandwidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "bw", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_set_loop_bandwidth",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_loop_bandwidth" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_loop_bandwidth" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_loop_bandwidth(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_damping_factor(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "df", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_set_damping_factor",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_damping_factor" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_damping_factor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_damping_factor(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_alpha" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_alpha" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_beta(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "beta", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_set_beta",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_beta" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_beta" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_beta(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_set_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_frequency" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_frequency" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_frequency(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "phase", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_set_phase",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_phase" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_phase" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_phase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_min_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_set_min_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_min_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_min_freq" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_min_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_max_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_set_max_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_max_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_max_freq" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_max_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_get_loop_bandwidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_get_loop_bandwidth",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_get_loop_bandwidth" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_loop_bandwidth();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_get_damping_factor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_get_damping_factor",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_get_damping_factor" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_damping_factor();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_get_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_get_alpha",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_get_alpha" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_alpha();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_get_beta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_get_beta",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_get_beta" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_beta();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_get_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_get_frequency",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_get_frequency" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_frequency();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_get_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_get_phase",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_get_phase" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_phase();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_get_min_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_get_min_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_get_min_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_min_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_get_max_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_get_max_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_get_max_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_max_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_carriertracking_cc_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_pll_carriertracking_cc_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pll_carriertracking_cc_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pll_carriertracking_cc_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_carriertracking_cc_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_pll_carriertracking_cc_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pll_carriertracking_cc_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pll_carriertracking_cc_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pll_carriertracking_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pll_carriertracking_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:pll_carriertracking_cc_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_carriertracking_cc_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_carriertracking_cc_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_carriertracking_cc_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "pll_carriertracking_cc_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:pll_carriertracking_cc_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pll_carriertracking_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pll_carriertracking_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pll_carriertracking_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pll_carriertracking_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_carriertracking_cc_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_carriertracking_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_carriertracking_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_carriertracking_cc_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_carriertracking_cc_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_carriertracking_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_carriertracking_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pll_carriertracking_cc_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_pll_freqdet_cf_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *)new boost::shared_ptr< gr::analog::pll_freqdet_cf >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pll_freqdet_cf_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_freqdet_cf *arg1 = (gr::analog::pll_freqdet_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_pll_freqdet_cf_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pll_freqdet_cf_sptr" "', argument " "1"" of type '" "gr::analog::pll_freqdet_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_freqdet_cf * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *)new boost::shared_ptr< gr::analog::pll_freqdet_cf >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pll_freqdet_cf_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_pll_freqdet_cf_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_pll_freqdet_cf_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_pll_freqdet_cf_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::pll_freqdet_cf >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::pll_freqdet_cf >::shared_ptr(gr::analog::pll_freqdet_cf *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::pll_freqdet_cf *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (gr::analog::pll_freqdet_cf *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__pll_freqdet_cf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pll_freqdet_cf_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_pll_freqdet_cf_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pll_freqdet_cf_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "loop_bw",(char *) "max_freq",(char *) "min_freq", NULL 
  };
  gr::analog::pll_freqdet_cf::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:pll_freqdet_cf_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_freqdet_cf_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pll_freqdet_cf_sptr_make" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::pll_freqdet_cf::sptr(static_cast< const gr::analog::pll_freqdet_cf::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_loop_bandwidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "bw", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_set_loop_bandwidth",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_loop_bandwidth" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_set_loop_bandwidth" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_loop_bandwidth(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_damping_factor(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "df", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_set_damping_factor",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_damping_factor" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_set_damping_factor" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_damping_factor(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_alpha" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_set_alpha" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_beta(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "beta", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_set_beta",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_beta" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_set_beta" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_beta(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_set_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_frequency" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_set_frequency" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_frequency(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "phase", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_set_phase",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_phase" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_set_phase" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_phase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_min_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_set_min_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_min_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_set_min_freq" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_min_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_max_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_set_max_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_max_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_set_max_freq" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_max_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_get_loop_bandwidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_get_loop_bandwidth",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_get_loop_bandwidth" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_loop_bandwidth();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_get_damping_factor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_get_damping_factor",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_get_damping_factor" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_damping_factor();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_get_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_get_alpha",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_get_alpha" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_alpha();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_get_beta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_get_beta",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_get_beta" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_beta();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_get_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_get_frequency",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_get_frequency" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_frequency();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_get_phase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_get_phase",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_get_phase" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_phase();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_get_min_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_get_min_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_get_min_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_min_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_get_max_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_get_max_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_get_max_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_max_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_freqdet_cf_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_pll_freqdet_cf_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pll_freqdet_cf_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pll_freqdet_cf_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_freqdet_cf_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_pll_freqdet_cf_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pll_freqdet_cf_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pll_freqdet_cf_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pll_freqdet_cf_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pll_freqdet_cf_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:pll_freqdet_cf_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_freqdet_cf_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_freqdet_cf_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_freqdet_cf_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "pll_freqdet_cf_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:pll_freqdet_cf_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pll_freqdet_cf_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pll_freqdet_cf_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pll_freqdet_cf_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pll_freqdet_cf_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_freqdet_cf_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_freqdet_cf > *arg1 = (boost::shared_ptr< gr::analog::pll_freqdet_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_freqdet_cf_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_freqdet_cf_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_freqdet_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_freqdet_cf > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pll_freqdet_cf_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_pll_refout_cc_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::pll_refout_cc > *)new boost::shared_ptr< gr::analog::pll_refout_cc >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pll_refout_cc_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pll_refout_cc *arg1 = (gr::analog::pll_refout_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::pll_refout_cc > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_pll_refout_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pll_refout_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pll_refout_cc_sptr" "', argument " "1"" of type '" "gr::analog::pll_refout_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pll_refout_cc * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::pll_refout_cc > *)new boost::shared_ptr< gr::analog::pll_refout_cc >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pll_refout_cc_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_pll_refout_cc_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__pll_refout_cc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_pll_refout_cc_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_pll_refout_cc_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::pll_refout_cc >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::pll_refout_cc >::shared_ptr(gr::analog::pll_refout_cc *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::pll_refout_cc *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (gr::analog::pll_refout_cc *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__pll_refout_cc, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pll_refout_cc_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_pll_refout_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pll_refout_cc_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "loop_bw",(char *) "max_freq",(char *) "min_freq", NULL 
  };
  gr::analog::pll_refout_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:pll_refout_cc_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_refout_cc_sptr_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_refout_cc_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pll_refout_cc_sptr_make" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::pll_refout_cc::sptr(static_cast< const gr::analog::pll_refout_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_refout_cc_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_refout_cc_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_refout_cc_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_refout_cc_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_refout_cc_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_refout_cc_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_refout_cc_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_refout_cc_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_refout_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_refout_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_refout_cc_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_pll_refout_cc_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pll_refout_cc_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pll_refout_cc_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_refout_cc_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_refout_cc_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_refout_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_refout_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_refout_cc_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_pll_refout_cc_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pll_refout_cc_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pll_refout_cc_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_refout_cc_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pll_refout_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pll_refout_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:pll_refout_cc_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pll_refout_cc_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pll_refout_cc_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pll_refout_cc_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "pll_refout_cc_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:pll_refout_cc_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pll_refout_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pll_refout_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pll_refout_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pll_refout_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pll_refout_cc_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pll_refout_cc > *arg1 = (boost::shared_ptr< gr::analog::pll_refout_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pll_refout_cc_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pll_refout_cc_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pll_refout_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pll_refout_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pll_refout_cc_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_probe_avg_mag_sqrd_c_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *)new boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_probe_avg_mag_sqrd_c_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_c *arg1 = (gr::analog::probe_avg_mag_sqrd_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_probe_avg_mag_sqrd_c_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_probe_avg_mag_sqrd_c_sptr" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_c * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *)new boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_probe_avg_mag_sqrd_c_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_probe_avg_mag_sqrd_c_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_c, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_probe_avg_mag_sqrd_c_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_probe_avg_mag_sqrd_c_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c >::shared_ptr(gr::analog::probe_avg_mag_sqrd_c *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::probe_avg_mag_sqrd_c *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (gr::analog::probe_avg_mag_sqrd_c *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_c, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_probe_avg_mag_sqrd_c_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_probe_avg_mag_sqrd_c_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_probe_avg_mag_sqrd_c_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  double arg2 ;
  double arg3 = (double) 0.0001 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "threshold_db",(char *) "alpha", NULL 
  };
  gr::analog::probe_avg_mag_sqrd_c::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:probe_avg_mag_sqrd_c_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "probe_avg_mag_sqrd_c_sptr_make" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::probe_avg_mag_sqrd_c::sptr(static_cast< const gr::analog::probe_avg_mag_sqrd_c::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_unmuted" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_level",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_level" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (double)(*arg1)->level();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (double)(*arg1)->threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_c_sptr_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_set_alpha" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_sptr_set_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "decibels", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_c_sptr_set_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_set_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_sptr_set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_c_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_c_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_c_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_c_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "probe_avg_mag_sqrd_c_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_probe_avg_mag_sqrd_c_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_probe_avg_mag_sqrd_c_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'probe_avg_mag_sqrd_c_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_c_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "probe_avg_mag_sqrd_c_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_probe_avg_mag_sqrd_c_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_probe_avg_mag_sqrd_c_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'probe_avg_mag_sqrd_c_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_c_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "probe_avg_mag_sqrd_c_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probe_avg_mag_sqrd_c_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:probe_avg_mag_sqrd_c_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_c_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "probe_avg_mag_sqrd_c_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_c_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "probe_avg_mag_sqrd_c_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:probe_avg_mag_sqrd_c_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "probe_avg_mag_sqrd_c_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probe_avg_mag_sqrd_c_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "probe_avg_mag_sqrd_c_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probe_avg_mag_sqrd_c_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_c_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_c_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_c_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *probe_avg_mag_sqrd_c_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_probe_avg_mag_sqrd_cf_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *)new boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_probe_avg_mag_sqrd_cf_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_cf *arg1 = (gr::analog::probe_avg_mag_sqrd_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_probe_avg_mag_sqrd_cf_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_probe_avg_mag_sqrd_cf_sptr" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_cf * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *)new boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_probe_avg_mag_sqrd_cf_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_probe_avg_mag_sqrd_cf_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_cf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_probe_avg_mag_sqrd_cf_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_probe_avg_mag_sqrd_cf_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf >::shared_ptr(gr::analog::probe_avg_mag_sqrd_cf *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::probe_avg_mag_sqrd_cf *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (gr::analog::probe_avg_mag_sqrd_cf *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_cf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_probe_avg_mag_sqrd_cf_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_probe_avg_mag_sqrd_cf_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_probe_avg_mag_sqrd_cf_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  double arg2 ;
  double arg3 = (double) 0.0001 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "threshold_db",(char *) "alpha", NULL 
  };
  gr::analog::probe_avg_mag_sqrd_cf::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:probe_avg_mag_sqrd_cf_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "probe_avg_mag_sqrd_cf_sptr_make" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::probe_avg_mag_sqrd_cf::sptr(static_cast< const gr::analog::probe_avg_mag_sqrd_cf::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_unmuted" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_level",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_level" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (double)(*arg1)->level();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (double)(*arg1)->threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_cf_sptr_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_alpha" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "decibels", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_cf_sptr_set_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_cf_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_cf_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_cf_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_cf_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_cf_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_cf_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probe_avg_mag_sqrd_cf_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:probe_avg_mag_sqrd_cf_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_cf_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "probe_avg_mag_sqrd_cf_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_cf_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "probe_avg_mag_sqrd_cf_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:probe_avg_mag_sqrd_cf_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "probe_avg_mag_sqrd_cf_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probe_avg_mag_sqrd_cf_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "probe_avg_mag_sqrd_cf_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probe_avg_mag_sqrd_cf_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_cf_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_cf_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_cf_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *probe_avg_mag_sqrd_cf_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_probe_avg_mag_sqrd_f_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *)new boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_probe_avg_mag_sqrd_f_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::probe_avg_mag_sqrd_f *arg1 = (gr::analog::probe_avg_mag_sqrd_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_probe_avg_mag_sqrd_f_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_probe_avg_mag_sqrd_f_sptr" "', argument " "1"" of type '" "gr::analog::probe_avg_mag_sqrd_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::probe_avg_mag_sqrd_f * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *)new boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_probe_avg_mag_sqrd_f_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_probe_avg_mag_sqrd_f_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_probe_avg_mag_sqrd_f_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_probe_avg_mag_sqrd_f_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f >::shared_ptr(gr::analog::probe_avg_mag_sqrd_f *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::probe_avg_mag_sqrd_f *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (gr::analog::probe_avg_mag_sqrd_f *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__probe_avg_mag_sqrd_f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_probe_avg_mag_sqrd_f_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_probe_avg_mag_sqrd_f_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_probe_avg_mag_sqrd_f_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  double arg2 ;
  double arg3 = (double) 0.0001 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "threshold_db",(char *) "alpha", NULL 
  };
  gr::analog::probe_avg_mag_sqrd_f::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:probe_avg_mag_sqrd_f_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "probe_avg_mag_sqrd_f_sptr_make" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::probe_avg_mag_sqrd_f::sptr(static_cast< const gr::analog::probe_avg_mag_sqrd_f::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_unmuted" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_level",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_level" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (double)(*arg1)->level();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (double)(*arg1)->threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_f_sptr_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_set_alpha" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_sptr_set_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "decibels", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_f_sptr_set_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_set_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_sptr_set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_f_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_f_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_f_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_f_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "probe_avg_mag_sqrd_f_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_probe_avg_mag_sqrd_f_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_probe_avg_mag_sqrd_f_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'probe_avg_mag_sqrd_f_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_f_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "probe_avg_mag_sqrd_f_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_probe_avg_mag_sqrd_f_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_probe_avg_mag_sqrd_f_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'probe_avg_mag_sqrd_f_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_f_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "probe_avg_mag_sqrd_f_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probe_avg_mag_sqrd_f_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:probe_avg_mag_sqrd_f_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probe_avg_mag_sqrd_f_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "probe_avg_mag_sqrd_f_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:probe_avg_mag_sqrd_f_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "probe_avg_mag_sqrd_f_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:probe_avg_mag_sqrd_f_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "probe_avg_mag_sqrd_f_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probe_avg_mag_sqrd_f_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "probe_avg_mag_sqrd_f_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probe_avg_mag_sqrd_f_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probe_avg_mag_sqrd_f_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *arg1 = (boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"probe_avg_mag_sqrd_f_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probe_avg_mag_sqrd_f_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *probe_avg_mag_sqrd_f_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_pwr_squelch_cc_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *)new boost::shared_ptr< gr::analog::pwr_squelch_cc >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pwr_squelch_cc_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_cc *arg1 = (gr::analog::pwr_squelch_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_pwr_squelch_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pwr_squelch_cc_sptr" "', argument " "1"" of type '" "gr::analog::pwr_squelch_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_cc * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *)new boost::shared_ptr< gr::analog::pwr_squelch_cc >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pwr_squelch_cc_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_pwr_squelch_cc_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__pwr_squelch_cc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_pwr_squelch_cc_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_pwr_squelch_cc_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::pwr_squelch_cc >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::pwr_squelch_cc >::shared_ptr(gr::analog::pwr_squelch_cc *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::pwr_squelch_cc *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (gr::analog::pwr_squelch_cc *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__pwr_squelch_cc, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pwr_squelch_cc_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_pwr_squelch_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pwr_squelch_cc_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  double arg2 ;
  double arg3 = (double) 0.0001 ;
  int arg4 = (int) 0 ;
  bool arg5 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "db",(char *) "alpha",(char *) "ramp",(char *) "gate", NULL 
  };
  gr::analog::pwr_squelch_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOO:pwr_squelch_cc_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pwr_squelch_cc_sptr_make" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pwr_squelch_cc_sptr_make" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "pwr_squelch_cc_sptr_make" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::pwr_squelch_cc::sptr(static_cast< const gr::analog::pwr_squelch_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_squelch_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_squelch_range",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_squelch_range" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->squelch_range();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "db", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_sptr_set_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_set_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_sptr_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_set_alpha" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_set_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_ramp",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_ramp" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->ramp();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_set_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ramp", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_sptr_set_ramp",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_set_ramp" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_set_ramp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_ramp(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_gate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_gate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->gate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_set_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_sptr_set_gate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_set_gate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_set_gate" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (*arg1)->set_gate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_unmuted" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pwr_squelch_cc_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_pwr_squelch_cc_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pwr_squelch_cc_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pwr_squelch_cc_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pwr_squelch_cc_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_pwr_squelch_cc_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pwr_squelch_cc_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pwr_squelch_cc_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pwr_squelch_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pwr_squelch_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:pwr_squelch_cc_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_cc_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pwr_squelch_cc_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_cc_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "pwr_squelch_cc_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:pwr_squelch_cc_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pwr_squelch_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pwr_squelch_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pwr_squelch_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pwr_squelch_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_cc_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_cc_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_cc_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pwr_squelch_cc_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_pwr_squelch_ff_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *)new boost::shared_ptr< gr::analog::pwr_squelch_ff >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pwr_squelch_ff_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::pwr_squelch_ff *arg1 = (gr::analog::pwr_squelch_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_pwr_squelch_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__pwr_squelch_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pwr_squelch_ff_sptr" "', argument " "1"" of type '" "gr::analog::pwr_squelch_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::pwr_squelch_ff * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *)new boost::shared_ptr< gr::analog::pwr_squelch_ff >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pwr_squelch_ff_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_pwr_squelch_ff_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__pwr_squelch_ff, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_pwr_squelch_ff_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_pwr_squelch_ff_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::pwr_squelch_ff >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::pwr_squelch_ff >::shared_ptr(gr::analog::pwr_squelch_ff *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::pwr_squelch_ff *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (gr::analog::pwr_squelch_ff *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__pwr_squelch_ff, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pwr_squelch_ff_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_pwr_squelch_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pwr_squelch_ff_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  double arg2 ;
  double arg3 = (double) 0.0001 ;
  int arg4 = (int) 0 ;
  bool arg5 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "db",(char *) "alpha",(char *) "ramp",(char *) "gate", NULL 
  };
  gr::analog::pwr_squelch_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOO:pwr_squelch_ff_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pwr_squelch_ff_sptr_make" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pwr_squelch_ff_sptr_make" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "pwr_squelch_ff_sptr_make" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::pwr_squelch_ff::sptr(static_cast< const gr::analog::pwr_squelch_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_squelch_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_squelch_range",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_squelch_range" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->squelch_range();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (double)(*arg1)->threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "db", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_sptr_set_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_set_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_sptr_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_set_alpha" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_set_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_ramp",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_ramp" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->ramp();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_set_ramp(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ramp", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_sptr_set_ramp",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_set_ramp" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_set_ramp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_ramp(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_gate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_gate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->gate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_set_gate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_sptr_set_gate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_set_gate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_set_gate" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (*arg1)->set_gate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_unmuted" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pwr_squelch_ff_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_pwr_squelch_ff_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pwr_squelch_ff_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pwr_squelch_ff_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pwr_squelch_ff_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_pwr_squelch_ff_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pwr_squelch_ff_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pwr_squelch_ff_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pwr_squelch_ff_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pwr_squelch_ff_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:pwr_squelch_ff_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pwr_squelch_ff_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pwr_squelch_ff_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:pwr_squelch_ff_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "pwr_squelch_ff_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:pwr_squelch_ff_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pwr_squelch_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pwr_squelch_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pwr_squelch_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pwr_squelch_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pwr_squelch_ff_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::pwr_squelch_ff > *arg1 = (boost::shared_ptr< gr::analog::pwr_squelch_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"pwr_squelch_ff_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pwr_squelch_ff_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::pwr_squelch_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::pwr_squelch_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pwr_squelch_ff_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_quadrature_demod_cf_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *)new boost::shared_ptr< gr::analog::quadrature_demod_cf >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_quadrature_demod_cf_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::quadrature_demod_cf *arg1 = (gr::analog::quadrature_demod_cf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_quadrature_demod_cf_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__quadrature_demod_cf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_quadrature_demod_cf_sptr" "', argument " "1"" of type '" "gr::analog::quadrature_demod_cf *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::quadrature_demod_cf * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *)new boost::shared_ptr< gr::analog::quadrature_demod_cf >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_quadrature_demod_cf_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_quadrature_demod_cf_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__quadrature_demod_cf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_quadrature_demod_cf_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_quadrature_demod_cf_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::quadrature_demod_cf >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::quadrature_demod_cf >::shared_ptr(gr::analog::quadrature_demod_cf *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::quadrature_demod_cf *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (gr::analog::quadrature_demod_cf *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__quadrature_demod_cf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_quadrature_demod_cf_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_quadrature_demod_cf_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_quadrature_demod_cf_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gain", NULL 
  };
  gr::analog::quadrature_demod_cf::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:quadrature_demod_cf_sptr_make",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quadrature_demod_cf_sptr_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (*arg1)->make(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::quadrature_demod_cf::sptr(static_cast< const gr::analog::quadrature_demod_cf::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_set_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gain", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:quadrature_demod_cf_sptr_set_gain",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_set_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quadrature_demod_cf_sptr_set_gain" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_gain(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_gain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_gain",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_gain" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->gain();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:quadrature_demod_cf_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quadrature_demod_cf_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:quadrature_demod_cf_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quadrature_demod_cf_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:quadrature_demod_cf_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quadrature_demod_cf_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:quadrature_demod_cf_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quadrature_demod_cf_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quadrature_demod_cf_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quadrature_demod_cf_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "quadrature_demod_cf_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_quadrature_demod_cf_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_quadrature_demod_cf_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'quadrature_demod_cf_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:quadrature_demod_cf_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quadrature_demod_cf_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quadrature_demod_cf_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quadrature_demod_cf_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "quadrature_demod_cf_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_quadrature_demod_cf_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_quadrature_demod_cf_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'quadrature_demod_cf_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:quadrature_demod_cf_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "quadrature_demod_cf_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quadrature_demod_cf_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:quadrature_demod_cf_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quadrature_demod_cf_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "quadrature_demod_cf_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:quadrature_demod_cf_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "quadrature_demod_cf_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:quadrature_demod_cf_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "quadrature_demod_cf_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quadrature_demod_cf_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "quadrature_demod_cf_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quadrature_demod_cf_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quadrature_demod_cf_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::quadrature_demod_cf > *arg1 = (boost::shared_ptr< gr::analog::quadrature_demod_cf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quadrature_demod_cf_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quadrature_demod_cf_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::quadrature_demod_cf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::quadrature_demod_cf > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *quadrature_demod_cf_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_rail_ff_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::rail_ff > *)new boost::shared_ptr< gr::analog::rail_ff >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_rail_ff_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::rail_ff *arg1 = (gr::analog::rail_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::rail_ff > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_rail_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__rail_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_rail_ff_sptr" "', argument " "1"" of type '" "gr::analog::rail_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::rail_ff * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::rail_ff > *)new boost::shared_ptr< gr::analog::rail_ff >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_rail_ff_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_rail_ff_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__rail_ff, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_rail_ff_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_rail_ff_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::rail_ff >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::rail_ff >::shared_ptr(gr::analog::rail_ff *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::rail_ff *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (gr::analog::rail_ff *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__rail_ff, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_rail_ff_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_rail_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_rail_ff_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "lo",(char *) "hi", NULL 
  };
  gr::analog::rail_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:rail_ff_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_sptr_make" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "rail_ff_sptr_make" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      result = (*arg1)->make(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::rail_ff::sptr(static_cast< const gr::analog::rail_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_lo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_lo",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_lo" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->lo();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_hi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_hi",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_hi" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->hi();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_set_lo(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "lo", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rail_ff_sptr_set_lo",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_set_lo" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_sptr_set_lo" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_lo(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_set_hi(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "hi", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rail_ff_sptr_set_hi",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_set_hi" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_sptr_set_hi" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_hi(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rail_ff_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rail_ff_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rail_ff_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rail_ff_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "rail_ff_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_rail_ff_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_rail_ff_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'rail_ff_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rail_ff_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "rail_ff_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_rail_ff_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_rail_ff_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'rail_ff_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rail_ff_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rail_ff_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rail_ff_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:rail_ff_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rail_ff_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "rail_ff_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:rail_ff_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "rail_ff_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:rail_ff_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rail_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rail_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "rail_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rail_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rail_ff_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::rail_ff > *arg1 = (boost::shared_ptr< gr::analog::rail_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rail_ff_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rail_ff_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::rail_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::rail_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *rail_ff_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__rail_ff_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_sig_source_s_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::sig_source_s > *)new boost::shared_ptr< gr::analog::sig_source_s >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sig_source_s_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_s *arg1 = (gr::analog::sig_source_s *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::sig_source_s > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_sig_source_s_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_s, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_sig_source_s_sptr" "', argument " "1"" of type '" "gr::analog::sig_source_s *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_s * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::sig_source_s > *)new boost::shared_ptr< gr::analog::sig_source_s >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sig_source_s_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_sig_source_s_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__sig_source_s, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_sig_source_s_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_sig_source_s_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::sig_source_s >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::sig_source_s >::shared_ptr(gr::analog::sig_source_s *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::sig_source_s *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (gr::analog::sig_source_s *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__sig_source_s, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_sig_source_s_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_sig_source_s_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sig_source_s_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  double arg2 ;
  gr::analog::gr_waveform_t arg3 ;
  double arg4 ;
  double arg5 ;
  short arg6 = (short) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  short val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_freq",(char *) "waveform",(char *) "wave_freq",(char *) "ampl",(char *) "offset", NULL 
  };
  gr::analog::sig_source_s::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO|O:sig_source_s_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_s_sptr_make" "', argument " "3"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg3 = static_cast< gr::analog::gr_waveform_t >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sig_source_s_sptr_make" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "sig_source_s_sptr_make" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  if (obj5) {
    ecode6 = SWIG_AsVal_short(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "sig_source_s_sptr_make" "', argument " "6"" of type '" "short""'");
    } 
    arg6 = static_cast< short >(val6);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::sig_source_s::sptr(static_cast< const gr::analog::sig_source_s::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_sampling_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_sampling_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (double)(*arg1)->sampling_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::gr_waveform_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_waveform",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_waveform" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (gr::analog::gr_waveform_t)(*arg1)->waveform();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_frequency",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_frequency" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (double)(*arg1)->frequency();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (double)(*arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  short result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_offset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_offset" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (short)(*arg1)->offset();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_sptr_set_sampling_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_set_sampling_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_set_sampling_freq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_sampling_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  gr::analog::gr_waveform_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "waveform", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_sptr_set_waveform",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_set_waveform" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_set_waveform" "', argument " "2"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg2 = static_cast< gr::analog::gr_waveform_t >(val2);
  {
    try {
      (*arg1)->set_waveform(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frequency", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_sptr_set_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_set_frequency" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_set_frequency" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_frequency(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_sptr_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_set_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_set_amplitude" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "offset", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_sptr_set_offset",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_set_offset" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_set_offset" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  {
    try {
      (*arg1)->set_offset(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_s_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_sig_source_s_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sig_source_s_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sig_source_s_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_s_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_sig_source_s_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sig_source_s_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sig_source_s_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sig_source_s_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sig_source_s_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:sig_source_s_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_s_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_s_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_s_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "sig_source_s_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:sig_source_s_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sig_source_s_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sig_source_s_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sig_source_s_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sig_source_s_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_s_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_s > *arg1 = (boost::shared_ptr< gr::analog::sig_source_s > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_s_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_s_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_s > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_s > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sig_source_s_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_s_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_sig_source_i_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::sig_source_i > *)new boost::shared_ptr< gr::analog::sig_source_i >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sig_source_i_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_i *arg1 = (gr::analog::sig_source_i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::sig_source_i > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_sig_source_i_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_sig_source_i_sptr" "', argument " "1"" of type '" "gr::analog::sig_source_i *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_i * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::sig_source_i > *)new boost::shared_ptr< gr::analog::sig_source_i >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sig_source_i_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_sig_source_i_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__sig_source_i, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_sig_source_i_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_sig_source_i_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::sig_source_i >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::sig_source_i >::shared_ptr(gr::analog::sig_source_i *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::sig_source_i *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (gr::analog::sig_source_i *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__sig_source_i, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_sig_source_i_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_sig_source_i_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sig_source_i_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  double arg2 ;
  gr::analog::gr_waveform_t arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_freq",(char *) "waveform",(char *) "wave_freq",(char *) "ampl",(char *) "offset", NULL 
  };
  gr::analog::sig_source_i::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO|O:sig_source_i_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_i_sptr_make" "', argument " "3"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg3 = static_cast< gr::analog::gr_waveform_t >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sig_source_i_sptr_make" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "sig_source_i_sptr_make" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "sig_source_i_sptr_make" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::sig_source_i::sptr(static_cast< const gr::analog::sig_source_i::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_sampling_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_sampling_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (double)(*arg1)->sampling_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::gr_waveform_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_waveform",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_waveform" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (gr::analog::gr_waveform_t)(*arg1)->waveform();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_frequency",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_frequency" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (double)(*arg1)->frequency();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (double)(*arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_offset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_offset" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (int)(*arg1)->offset();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_sptr_set_sampling_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_set_sampling_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_set_sampling_freq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_sampling_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  gr::analog::gr_waveform_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "waveform", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_sptr_set_waveform",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_set_waveform" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_set_waveform" "', argument " "2"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg2 = static_cast< gr::analog::gr_waveform_t >(val2);
  {
    try {
      (*arg1)->set_waveform(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frequency", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_sptr_set_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_set_frequency" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_set_frequency" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_frequency(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_sptr_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_set_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_set_amplitude" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "offset", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_sptr_set_offset",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_set_offset" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_set_offset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_offset(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_i_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_sig_source_i_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sig_source_i_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sig_source_i_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_i_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_sig_source_i_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sig_source_i_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sig_source_i_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sig_source_i_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sig_source_i_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:sig_source_i_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_i_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_i_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_i_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "sig_source_i_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:sig_source_i_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sig_source_i_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sig_source_i_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sig_source_i_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sig_source_i_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_i_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_i > *arg1 = (boost::shared_ptr< gr::analog::sig_source_i > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_i_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_i_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_i > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_i > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sig_source_i_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_i_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_sig_source_f_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::sig_source_f > *)new boost::shared_ptr< gr::analog::sig_source_f >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sig_source_f_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_f *arg1 = (gr::analog::sig_source_f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::sig_source_f > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_sig_source_f_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_sig_source_f_sptr" "', argument " "1"" of type '" "gr::analog::sig_source_f *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_f * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::sig_source_f > *)new boost::shared_ptr< gr::analog::sig_source_f >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sig_source_f_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_sig_source_f_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__sig_source_f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_sig_source_f_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_sig_source_f_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::sig_source_f >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::sig_source_f >::shared_ptr(gr::analog::sig_source_f *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::sig_source_f *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (gr::analog::sig_source_f *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__sig_source_f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_sig_source_f_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_sig_source_f_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sig_source_f_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  double arg2 ;
  gr::analog::gr_waveform_t arg3 ;
  double arg4 ;
  double arg5 ;
  float arg6 = (float) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_freq",(char *) "waveform",(char *) "wave_freq",(char *) "ampl",(char *) "offset", NULL 
  };
  gr::analog::sig_source_f::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO|O:sig_source_f_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_f_sptr_make" "', argument " "3"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg3 = static_cast< gr::analog::gr_waveform_t >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sig_source_f_sptr_make" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "sig_source_f_sptr_make" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  if (obj5) {
    ecode6 = SWIG_AsVal_float(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "sig_source_f_sptr_make" "', argument " "6"" of type '" "float""'");
    } 
    arg6 = static_cast< float >(val6);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::sig_source_f::sptr(static_cast< const gr::analog::sig_source_f::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_sampling_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_sampling_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (double)(*arg1)->sampling_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::gr_waveform_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_waveform",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_waveform" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (gr::analog::gr_waveform_t)(*arg1)->waveform();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_frequency",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_frequency" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (double)(*arg1)->frequency();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (double)(*arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_offset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_offset" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (float)(*arg1)->offset();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_sptr_set_sampling_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_set_sampling_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_set_sampling_freq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_sampling_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  gr::analog::gr_waveform_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "waveform", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_sptr_set_waveform",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_set_waveform" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_set_waveform" "', argument " "2"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg2 = static_cast< gr::analog::gr_waveform_t >(val2);
  {
    try {
      (*arg1)->set_waveform(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frequency", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_sptr_set_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_set_frequency" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_set_frequency" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_frequency(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_sptr_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_set_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_set_amplitude" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "offset", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_sptr_set_offset",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_set_offset" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_set_offset" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (*arg1)->set_offset(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_f_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_sig_source_f_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sig_source_f_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sig_source_f_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_f_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_sig_source_f_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sig_source_f_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sig_source_f_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sig_source_f_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sig_source_f_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:sig_source_f_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_f_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_f_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_f_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "sig_source_f_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:sig_source_f_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sig_source_f_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sig_source_f_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sig_source_f_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sig_source_f_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_f_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_f > *arg1 = (boost::shared_ptr< gr::analog::sig_source_f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_f_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_f_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_f > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_f > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sig_source_f_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_f_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_sig_source_c_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::sig_source_c > *)new boost::shared_ptr< gr::analog::sig_source_c >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sig_source_c_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::sig_source_c *arg1 = (gr::analog::sig_source_c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::sig_source_c > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_sig_source_c_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__sig_source_c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_sig_source_c_sptr" "', argument " "1"" of type '" "gr::analog::sig_source_c *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::sig_source_c * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::sig_source_c > *)new boost::shared_ptr< gr::analog::sig_source_c >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sig_source_c_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_sig_source_c_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__sig_source_c, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_sig_source_c_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_sig_source_c_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::sig_source_c >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::sig_source_c >::shared_ptr(gr::analog::sig_source_c *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::sig_source_c *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (gr::analog::sig_source_c *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__sig_source_c, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_sig_source_c_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_sig_source_c_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sig_source_c_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  double arg2 ;
  gr::analog::gr_waveform_t arg3 ;
  double arg4 ;
  double arg5 ;
  gr_complex arg6 = (gr_complex) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  std::complex< float > val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_freq",(char *) "waveform",(char *) "wave_freq",(char *) "ampl",(char *) "offset", NULL 
  };
  gr::analog::sig_source_c::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO|O:sig_source_c_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_c_sptr_make" "', argument " "3"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg3 = static_cast< gr::analog::gr_waveform_t >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sig_source_c_sptr_make" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "sig_source_c_sptr_make" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  if (obj5) {
    ecode6 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "sig_source_c_sptr_make" "', argument " "6"" of type '" "gr_complex""'");
    } 
    arg6 = static_cast< gr_complex >(val6);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::sig_source_c::sptr(static_cast< const gr::analog::sig_source_c::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_sampling_freq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_sampling_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (double)(*arg1)->sampling_freq();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::gr_waveform_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_waveform",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_waveform" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (gr::analog::gr_waveform_t)(*arg1)->waveform();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_frequency",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_frequency" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (double)(*arg1)->frequency();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (double)(*arg1)->amplitude();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_complex result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_offset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_offset" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->offset();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_float_Sg_(static_cast< std::complex<float> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_sampling_freq(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sampling_freq", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_sptr_set_sampling_freq",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_set_sampling_freq" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_set_sampling_freq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_sampling_freq(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_waveform(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  gr::analog::gr_waveform_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "waveform", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_sptr_set_waveform",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_set_waveform" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_set_waveform" "', argument " "2"" of type '" "gr::analog::gr_waveform_t""'");
  } 
  arg2 = static_cast< gr::analog::gr_waveform_t >(val2);
  {
    try {
      (*arg1)->set_waveform(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frequency", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_sptr_set_frequency",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_set_frequency" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_set_frequency" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_frequency(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ampl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_sptr_set_amplitude",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_set_amplitude" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_set_amplitude" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_amplitude(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_offset(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  gr_complex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< float > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "offset", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_sptr_set_offset",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_set_offset" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_set_offset" "', argument " "2"" of type '" "gr_complex""'");
  } 
  arg2 = static_cast< gr_complex >(val2);
  {
    try {
      (*arg1)->set_offset(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_c_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_sig_source_c_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sig_source_c_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sig_source_c_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_c_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_sig_source_c_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sig_source_c_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sig_source_c_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sig_source_c_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sig_source_c_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:sig_source_c_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sig_source_c_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sig_source_c_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:sig_source_c_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "sig_source_c_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:sig_source_c_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sig_source_c_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sig_source_c_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sig_source_c_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sig_source_c_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sig_source_c_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::sig_source_c > *arg1 = (boost::shared_ptr< gr::analog::sig_source_c > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"sig_source_c_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sig_source_c_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::sig_source_c > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::sig_source_c > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sig_source_c_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__sig_source_c_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_simple_squelch_cc_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::analog::simple_squelch_cc > *)new boost::shared_ptr< gr::analog::simple_squelch_cc >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_simple_squelch_cc_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::analog::simple_squelch_cc *arg1 = (gr::analog::simple_squelch_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_simple_squelch_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__analog__simple_squelch_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_simple_squelch_cc_sptr" "', argument " "1"" of type '" "gr::analog::simple_squelch_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::analog::simple_squelch_cc * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::analog::simple_squelch_cc > *)new boost::shared_ptr< gr::analog::simple_squelch_cc >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_simple_squelch_cc_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_simple_squelch_cc_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__analog__simple_squelch_cc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_simple_squelch_cc_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_simple_squelch_cc_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::analog::simple_squelch_cc >::shared_ptr()\n"
    "    boost::shared_ptr< gr::analog::simple_squelch_cc >::shared_ptr(gr::analog::simple_squelch_cc *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::analog::simple_squelch_cc *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (gr::analog::simple_squelch_cc *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__analog__simple_squelch_cc, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_simple_squelch_cc_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_simple_squelch_cc_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_simple_squelch_cc_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "threshold_db",(char *) "alpha", NULL 
  };
  gr::analog::simple_squelch_cc::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:simple_squelch_cc_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_sptr_make" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "simple_squelch_cc_sptr_make" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (*arg1)->make(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::analog::simple_squelch_cc::sptr(static_cast< const gr::analog::simple_squelch_cc::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_unmuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_unmuted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_unmuted" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->unmuted();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alpha", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:simple_squelch_cc_sptr_set_alpha",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_set_alpha" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_sptr_set_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_alpha(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "decibels", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:simple_squelch_cc_sptr_set_threshold",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_set_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_sptr_set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_threshold(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_threshold" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->threshold();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_squelch_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_squelch_range",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_squelch_range" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->squelch_range();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:simple_squelch_cc_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:simple_squelch_cc_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:simple_squelch_cc_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:simple_squelch_cc_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "simple_squelch_cc_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_simple_squelch_cc_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_simple_squelch_cc_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'simple_squelch_cc_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_max_output_buffer(long)\n"
    "    gr_block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:simple_squelch_cc_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "simple_squelch_cc_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_simple_squelch_cc_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_simple_squelch_cc_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'simple_squelch_cc_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr_block::set_min_output_buffer(long)\n"
    "    gr_block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_block_detail_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_detail",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->detail();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_block_detail_sptr(static_cast< const gr_block_detail_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_set_detail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  gr_block_detail_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "detail", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:simple_squelch_cc_sptr_set_detail",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_set_detail" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr_block_detail_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "simple_squelch_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "simple_squelch_cc_sptr_set_detail" "', argument " "2"" of type '" "gr_block_detail_sptr""'");
    } else {
      gr_block_detail_sptr * temp = reinterpret_cast< gr_block_detail_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_detail(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_io_signature_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_io_signature_sptr(static_cast< const gr_io_signature_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr_basic_block_sptr(static_cast< const gr_basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr_basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:simple_squelch_cc_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "simple_squelch_cc_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "simple_squelch_cc_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:simple_squelch_cc_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "simple_squelch_cc_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:simple_squelch_cc_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "simple_squelch_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "simple_squelch_cc_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "simple_squelch_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "simple_squelch_cc_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_simple_squelch_cc_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::analog::simple_squelch_cc > *arg1 = (boost::shared_ptr< gr::analog::simple_squelch_cc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"simple_squelch_cc_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_squelch_cc_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::analog::simple_squelch_cc > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::analog::simple_squelch_cc > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *simple_squelch_cc_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, (char *)"delete_SwigPyIterator(SwigPyIterator self)"},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, (char *)"SwigPyIterator_value(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator_incr", (PyCFunction) _wrap_SwigPyIterator_incr, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator_incr(SwigPyIterator self, size_t n = 1) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_decr", (PyCFunction) _wrap_SwigPyIterator_decr, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator_decr(SwigPyIterator self, size_t n = 1) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_distance", (PyCFunction) _wrap_SwigPyIterator_distance, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
	 { (char *)"SwigPyIterator_equal", (PyCFunction) _wrap_SwigPyIterator_equal, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, (char *)"SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, (char *)"SwigPyIterator_next(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, (char *)"SwigPyIterator___next__(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, (char *)"SwigPyIterator_previous(SwigPyIterator self) -> PyObject"},
	 { (char *)"SwigPyIterator_advance", (PyCFunction) _wrap_SwigPyIterator_advance, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___eq__", (PyCFunction) _wrap_SwigPyIterator___eq__, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___ne__", (PyCFunction) _wrap_SwigPyIterator___ne__, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___iadd__", (PyCFunction) _wrap_SwigPyIterator___iadd__, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___isub__", (PyCFunction) _wrap_SwigPyIterator___isub__, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___add__", (PyCFunction) _wrap_SwigPyIterator___add__, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> SwigPyIterator\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		""},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"cpm_phase_response", (PyCFunction) _wrap_cpm_phase_response, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"cpm_phase_response(cpm_type type, unsigned int samples_per_sym, unsigned int L, \n"
		"    double beta = 0.3) -> __dummy_4__\n"
		""},
	 { (char *)"new_cpm", _wrap_new_cpm, METH_VARARGS, (char *)"new_cpm() -> cpm"},
	 { (char *)"delete_cpm", _wrap_delete_cpm, METH_VARARGS, (char *)"delete_cpm(cpm self)"},
	 { (char *)"cpm_swigregister", cpm_swigregister, METH_VARARGS, NULL},
	 { (char *)"agc_cc_make", (PyCFunction) _wrap_agc_cc_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"agc_cc_make(float rate = 1e-4, float reference = 1.0, float gain = 1.0, \n"
		"    float max_gain = 0.0) -> sptr\n"
		""},
	 { (char *)"agc_cc_rate", _wrap_agc_cc_rate, METH_VARARGS, (char *)"agc_cc_rate(agc_cc self) -> float"},
	 { (char *)"agc_cc_reference", _wrap_agc_cc_reference, METH_VARARGS, (char *)"agc_cc_reference(agc_cc self) -> float"},
	 { (char *)"agc_cc_gain", _wrap_agc_cc_gain, METH_VARARGS, (char *)"agc_cc_gain(agc_cc self) -> float"},
	 { (char *)"agc_cc_max_gain", _wrap_agc_cc_max_gain, METH_VARARGS, (char *)"agc_cc_max_gain(agc_cc self) -> float"},
	 { (char *)"agc_cc_set_rate", (PyCFunction) _wrap_agc_cc_set_rate, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_set_rate(agc_cc self, float rate)"},
	 { (char *)"agc_cc_set_reference", (PyCFunction) _wrap_agc_cc_set_reference, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_set_reference(agc_cc self, float reference)"},
	 { (char *)"agc_cc_set_gain", (PyCFunction) _wrap_agc_cc_set_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_set_gain(agc_cc self, float gain)"},
	 { (char *)"agc_cc_set_max_gain", (PyCFunction) _wrap_agc_cc_set_max_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_set_max_gain(agc_cc self, float max_gain)"},
	 { (char *)"delete_agc_cc", _wrap_delete_agc_cc, METH_VARARGS, (char *)"delete_agc_cc(agc_cc self)"},
	 { (char *)"agc_cc_swigregister", agc_cc_swigregister, METH_VARARGS, NULL},
	 { (char *)"agc_ff_make", (PyCFunction) _wrap_agc_ff_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"agc_ff_make(float rate = 1e-4, float reference = 1.0, float gain = 1.0, \n"
		"    float max_gain = 0.0) -> sptr\n"
		""},
	 { (char *)"agc_ff_rate", _wrap_agc_ff_rate, METH_VARARGS, (char *)"agc_ff_rate(agc_ff self) -> float"},
	 { (char *)"agc_ff_reference", _wrap_agc_ff_reference, METH_VARARGS, (char *)"agc_ff_reference(agc_ff self) -> float"},
	 { (char *)"agc_ff_gain", _wrap_agc_ff_gain, METH_VARARGS, (char *)"agc_ff_gain(agc_ff self) -> float"},
	 { (char *)"agc_ff_max_gain", _wrap_agc_ff_max_gain, METH_VARARGS, (char *)"agc_ff_max_gain(agc_ff self) -> float"},
	 { (char *)"agc_ff_set_rate", (PyCFunction) _wrap_agc_ff_set_rate, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_set_rate(agc_ff self, float rate)"},
	 { (char *)"agc_ff_set_reference", (PyCFunction) _wrap_agc_ff_set_reference, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_set_reference(agc_ff self, float reference)"},
	 { (char *)"agc_ff_set_gain", (PyCFunction) _wrap_agc_ff_set_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_set_gain(agc_ff self, float gain)"},
	 { (char *)"agc_ff_set_max_gain", (PyCFunction) _wrap_agc_ff_set_max_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_set_max_gain(agc_ff self, float max_gain)"},
	 { (char *)"delete_agc_ff", _wrap_delete_agc_ff, METH_VARARGS, (char *)"delete_agc_ff(agc_ff self)"},
	 { (char *)"agc_ff_swigregister", agc_ff_swigregister, METH_VARARGS, NULL},
	 { (char *)"agc2_cc_make", (PyCFunction) _wrap_agc2_cc_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"agc2_cc_make(float attack_rate = 1e-1, float decay_rate = 1e-2, \n"
		"    float reference = 1.0, float gain = 1.0, float max_gain = 0.0) -> sptr\n"
		""},
	 { (char *)"agc2_cc_attack_rate", _wrap_agc2_cc_attack_rate, METH_VARARGS, (char *)"agc2_cc_attack_rate(agc2_cc self) -> float"},
	 { (char *)"agc2_cc_decay_rate", _wrap_agc2_cc_decay_rate, METH_VARARGS, (char *)"agc2_cc_decay_rate(agc2_cc self) -> float"},
	 { (char *)"agc2_cc_reference", _wrap_agc2_cc_reference, METH_VARARGS, (char *)"agc2_cc_reference(agc2_cc self) -> float"},
	 { (char *)"agc2_cc_gain", _wrap_agc2_cc_gain, METH_VARARGS, (char *)"agc2_cc_gain(agc2_cc self) -> float"},
	 { (char *)"agc2_cc_max_gain", _wrap_agc2_cc_max_gain, METH_VARARGS, (char *)"agc2_cc_max_gain(agc2_cc self) -> float"},
	 { (char *)"agc2_cc_set_attack_rate", (PyCFunction) _wrap_agc2_cc_set_attack_rate, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_set_attack_rate(agc2_cc self, float rate)"},
	 { (char *)"agc2_cc_set_decay_rate", (PyCFunction) _wrap_agc2_cc_set_decay_rate, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_set_decay_rate(agc2_cc self, float rate)"},
	 { (char *)"agc2_cc_set_reference", (PyCFunction) _wrap_agc2_cc_set_reference, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_set_reference(agc2_cc self, float reference)"},
	 { (char *)"agc2_cc_set_gain", (PyCFunction) _wrap_agc2_cc_set_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_set_gain(agc2_cc self, float gain)"},
	 { (char *)"agc2_cc_set_max_gain", (PyCFunction) _wrap_agc2_cc_set_max_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_set_max_gain(agc2_cc self, float max_gain)"},
	 { (char *)"delete_agc2_cc", _wrap_delete_agc2_cc, METH_VARARGS, (char *)"delete_agc2_cc(agc2_cc self)"},
	 { (char *)"agc2_cc_swigregister", agc2_cc_swigregister, METH_VARARGS, NULL},
	 { (char *)"agc2_ff_make", (PyCFunction) _wrap_agc2_ff_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"agc2_ff_make(float attack_rate = 1e-1, float decay_rate = 1e-2, \n"
		"    float reference = 1.0, float gain = 1.0, float max_gain = 0.0) -> sptr\n"
		""},
	 { (char *)"agc2_ff_attack_rate", _wrap_agc2_ff_attack_rate, METH_VARARGS, (char *)"agc2_ff_attack_rate(agc2_ff self) -> float"},
	 { (char *)"agc2_ff_decay_rate", _wrap_agc2_ff_decay_rate, METH_VARARGS, (char *)"agc2_ff_decay_rate(agc2_ff self) -> float"},
	 { (char *)"agc2_ff_reference", _wrap_agc2_ff_reference, METH_VARARGS, (char *)"agc2_ff_reference(agc2_ff self) -> float"},
	 { (char *)"agc2_ff_gain", _wrap_agc2_ff_gain, METH_VARARGS, (char *)"agc2_ff_gain(agc2_ff self) -> float"},
	 { (char *)"agc2_ff_max_gain", _wrap_agc2_ff_max_gain, METH_VARARGS, (char *)"agc2_ff_max_gain(agc2_ff self) -> float"},
	 { (char *)"agc2_ff_set_attack_rate", (PyCFunction) _wrap_agc2_ff_set_attack_rate, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_set_attack_rate(agc2_ff self, float rate)"},
	 { (char *)"agc2_ff_set_decay_rate", (PyCFunction) _wrap_agc2_ff_set_decay_rate, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_set_decay_rate(agc2_ff self, float rate)"},
	 { (char *)"agc2_ff_set_reference", (PyCFunction) _wrap_agc2_ff_set_reference, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_set_reference(agc2_ff self, float reference)"},
	 { (char *)"agc2_ff_set_gain", (PyCFunction) _wrap_agc2_ff_set_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_set_gain(agc2_ff self, float gain)"},
	 { (char *)"agc2_ff_set_max_gain", (PyCFunction) _wrap_agc2_ff_set_max_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_set_max_gain(agc2_ff self, float max_gain)"},
	 { (char *)"delete_agc2_ff", _wrap_delete_agc2_ff, METH_VARARGS, (char *)"delete_agc2_ff(agc2_ff self)"},
	 { (char *)"agc2_ff_swigregister", agc2_ff_swigregister, METH_VARARGS, NULL},
	 { (char *)"cpfsk_bc_make", (PyCFunction) _wrap_cpfsk_bc_make, METH_VARARGS | METH_KEYWORDS, (char *)"cpfsk_bc_make(float k, float ampl, int samples_per_sym) -> sptr"},
	 { (char *)"cpfsk_bc_set_amplitude", (PyCFunction) _wrap_cpfsk_bc_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"cpfsk_bc_set_amplitude(cpfsk_bc self, float amplitude)"},
	 { (char *)"cpfsk_bc_amplitude", _wrap_cpfsk_bc_amplitude, METH_VARARGS, (char *)"cpfsk_bc_amplitude(cpfsk_bc self) -> float"},
	 { (char *)"cpfsk_bc_freq", _wrap_cpfsk_bc_freq, METH_VARARGS, (char *)"cpfsk_bc_freq(cpfsk_bc self) -> float"},
	 { (char *)"cpfsk_bc_phase", _wrap_cpfsk_bc_phase, METH_VARARGS, (char *)"cpfsk_bc_phase(cpfsk_bc self) -> float"},
	 { (char *)"delete_cpfsk_bc", _wrap_delete_cpfsk_bc, METH_VARARGS, (char *)"delete_cpfsk_bc(cpfsk_bc self)"},
	 { (char *)"cpfsk_bc_swigregister", cpfsk_bc_swigregister, METH_VARARGS, NULL},
	 { (char *)"ctcss_squelch_ff_make", (PyCFunction) _wrap_ctcss_squelch_ff_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ctcss_squelch_ff_make(int rate, float freq, float level, int len, int ramp, \n"
		"    bool gate) -> sptr\n"
		""},
	 { (char *)"ctcss_squelch_ff_squelch_range", _wrap_ctcss_squelch_ff_squelch_range, METH_VARARGS, (char *)"ctcss_squelch_ff_squelch_range(ctcss_squelch_ff self) -> __dummy_4__"},
	 { (char *)"ctcss_squelch_ff_level", _wrap_ctcss_squelch_ff_level, METH_VARARGS, (char *)"ctcss_squelch_ff_level(ctcss_squelch_ff self) -> float"},
	 { (char *)"ctcss_squelch_ff_set_level", (PyCFunction) _wrap_ctcss_squelch_ff_set_level, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_set_level(ctcss_squelch_ff self, float level)"},
	 { (char *)"ctcss_squelch_ff_len", _wrap_ctcss_squelch_ff_len, METH_VARARGS, (char *)"ctcss_squelch_ff_len(ctcss_squelch_ff self) -> int"},
	 { (char *)"ctcss_squelch_ff_ramp", _wrap_ctcss_squelch_ff_ramp, METH_VARARGS, (char *)"ctcss_squelch_ff_ramp(ctcss_squelch_ff self) -> int"},
	 { (char *)"ctcss_squelch_ff_set_ramp", (PyCFunction) _wrap_ctcss_squelch_ff_set_ramp, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_set_ramp(ctcss_squelch_ff self, int ramp)"},
	 { (char *)"ctcss_squelch_ff_gate", _wrap_ctcss_squelch_ff_gate, METH_VARARGS, (char *)"ctcss_squelch_ff_gate(ctcss_squelch_ff self) -> bool"},
	 { (char *)"ctcss_squelch_ff_set_gate", (PyCFunction) _wrap_ctcss_squelch_ff_set_gate, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_set_gate(ctcss_squelch_ff self, bool gate)"},
	 { (char *)"ctcss_squelch_ff_unmuted", _wrap_ctcss_squelch_ff_unmuted, METH_VARARGS, (char *)"ctcss_squelch_ff_unmuted(ctcss_squelch_ff self) -> bool"},
	 { (char *)"delete_ctcss_squelch_ff", _wrap_delete_ctcss_squelch_ff, METH_VARARGS, (char *)"delete_ctcss_squelch_ff(ctcss_squelch_ff self)"},
	 { (char *)"ctcss_squelch_ff_swigregister", ctcss_squelch_ff_swigregister, METH_VARARGS, NULL},
	 { (char *)"dpll_bb_make", (PyCFunction) _wrap_dpll_bb_make, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_make(float period, float gain) -> sptr"},
	 { (char *)"dpll_bb_set_gain", (PyCFunction) _wrap_dpll_bb_set_gain, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_set_gain(dpll_bb self, float gain)"},
	 { (char *)"dpll_bb_set_decision_threshold", (PyCFunction) _wrap_dpll_bb_set_decision_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_set_decision_threshold(dpll_bb self, float thresh)"},
	 { (char *)"dpll_bb_gain", _wrap_dpll_bb_gain, METH_VARARGS, (char *)"dpll_bb_gain(dpll_bb self) -> float"},
	 { (char *)"dpll_bb_freq", _wrap_dpll_bb_freq, METH_VARARGS, (char *)"dpll_bb_freq(dpll_bb self) -> float"},
	 { (char *)"dpll_bb_phase", _wrap_dpll_bb_phase, METH_VARARGS, (char *)"dpll_bb_phase(dpll_bb self) -> float"},
	 { (char *)"dpll_bb_decision_threshold", _wrap_dpll_bb_decision_threshold, METH_VARARGS, (char *)"dpll_bb_decision_threshold(dpll_bb self) -> float"},
	 { (char *)"delete_dpll_bb", _wrap_delete_dpll_bb, METH_VARARGS, (char *)"delete_dpll_bb(dpll_bb self)"},
	 { (char *)"dpll_bb_swigregister", dpll_bb_swigregister, METH_VARARGS, NULL},
	 { (char *)"feedforward_agc_cc_make", (PyCFunction) _wrap_feedforward_agc_cc_make, METH_VARARGS | METH_KEYWORDS, (char *)"feedforward_agc_cc_make(int nsamples, float reference) -> sptr"},
	 { (char *)"delete_feedforward_agc_cc", _wrap_delete_feedforward_agc_cc, METH_VARARGS, (char *)"delete_feedforward_agc_cc(feedforward_agc_cc self)"},
	 { (char *)"feedforward_agc_cc_swigregister", feedforward_agc_cc_swigregister, METH_VARARGS, NULL},
	 { (char *)"fmdet_cf_make", (PyCFunction) _wrap_fmdet_cf_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"fmdet_cf_make(float samplerate, float freq_low, float freq_high, \n"
		"    float scl) -> sptr\n"
		""},
	 { (char *)"fmdet_cf_set_scale", (PyCFunction) _wrap_fmdet_cf_set_scale, METH_VARARGS | METH_KEYWORDS, (char *)"fmdet_cf_set_scale(fmdet_cf self, float scl)"},
	 { (char *)"fmdet_cf_set_freq_range", (PyCFunction) _wrap_fmdet_cf_set_freq_range, METH_VARARGS | METH_KEYWORDS, (char *)"fmdet_cf_set_freq_range(fmdet_cf self, float freq_low, float freq_high)"},
	 { (char *)"fmdet_cf_freq", _wrap_fmdet_cf_freq, METH_VARARGS, (char *)"fmdet_cf_freq(fmdet_cf self) -> float"},
	 { (char *)"fmdet_cf_freq_high", _wrap_fmdet_cf_freq_high, METH_VARARGS, (char *)"fmdet_cf_freq_high(fmdet_cf self) -> float"},
	 { (char *)"fmdet_cf_freq_low", _wrap_fmdet_cf_freq_low, METH_VARARGS, (char *)"fmdet_cf_freq_low(fmdet_cf self) -> float"},
	 { (char *)"fmdet_cf_scale", _wrap_fmdet_cf_scale, METH_VARARGS, (char *)"fmdet_cf_scale(fmdet_cf self) -> float"},
	 { (char *)"fmdet_cf_bias", _wrap_fmdet_cf_bias, METH_VARARGS, (char *)"fmdet_cf_bias(fmdet_cf self) -> float"},
	 { (char *)"delete_fmdet_cf", _wrap_delete_fmdet_cf, METH_VARARGS, (char *)"delete_fmdet_cf(fmdet_cf self)"},
	 { (char *)"fmdet_cf_swigregister", fmdet_cf_swigregister, METH_VARARGS, NULL},
	 { (char *)"frequency_modulator_fc_make", (PyCFunction) _wrap_frequency_modulator_fc_make, METH_VARARGS | METH_KEYWORDS, (char *)"frequency_modulator_fc_make(double sensitivity) -> sptr"},
	 { (char *)"frequency_modulator_fc_set_sensitivity", (PyCFunction) _wrap_frequency_modulator_fc_set_sensitivity, METH_VARARGS | METH_KEYWORDS, (char *)"frequency_modulator_fc_set_sensitivity(frequency_modulator_fc self, float sens)"},
	 { (char *)"frequency_modulator_fc_sensitivity", _wrap_frequency_modulator_fc_sensitivity, METH_VARARGS, (char *)"frequency_modulator_fc_sensitivity(frequency_modulator_fc self) -> float"},
	 { (char *)"delete_frequency_modulator_fc", _wrap_delete_frequency_modulator_fc, METH_VARARGS, (char *)"delete_frequency_modulator_fc(frequency_modulator_fc self)"},
	 { (char *)"frequency_modulator_fc_swigregister", frequency_modulator_fc_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_lfsr", (PyCFunction) _wrap_new_lfsr, METH_VARARGS | METH_KEYWORDS, (char *)"new_lfsr(uint32_t mask, uint32_t seed, uint32_t reg_len) -> lfsr"},
	 { (char *)"lfsr_next_bit", _wrap_lfsr_next_bit, METH_VARARGS, (char *)"lfsr_next_bit(lfsr self) -> unsigned char"},
	 { (char *)"lfsr_next_bit_scramble", (PyCFunction) _wrap_lfsr_next_bit_scramble, METH_VARARGS | METH_KEYWORDS, (char *)"lfsr_next_bit_scramble(lfsr self, unsigned char input) -> unsigned char"},
	 { (char *)"lfsr_next_bit_descramble", (PyCFunction) _wrap_lfsr_next_bit_descramble, METH_VARARGS | METH_KEYWORDS, (char *)"lfsr_next_bit_descramble(lfsr self, unsigned char input) -> unsigned char"},
	 { (char *)"lfsr_reset", _wrap_lfsr_reset, METH_VARARGS, (char *)"lfsr_reset(lfsr self)"},
	 { (char *)"lfsr_pre_shift", (PyCFunction) _wrap_lfsr_pre_shift, METH_VARARGS | METH_KEYWORDS, (char *)"lfsr_pre_shift(lfsr self, int num)"},
	 { (char *)"lfsr_mask", _wrap_lfsr_mask, METH_VARARGS, (char *)"lfsr_mask(lfsr self) -> int"},
	 { (char *)"delete_lfsr", _wrap_delete_lfsr, METH_VARARGS, (char *)"delete_lfsr(lfsr self)"},
	 { (char *)"lfsr_swigregister", lfsr_swigregister, METH_VARARGS, NULL},
	 { (char *)"noise_source_s_make", (PyCFunction) _wrap_noise_source_s_make, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_make(noise_type_t type, float ampl, long seed) -> sptr"},
	 { (char *)"noise_source_s_set_type", (PyCFunction) _wrap_noise_source_s_set_type, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_set_type(noise_source_s self, noise_type_t type)"},
	 { (char *)"noise_source_s_set_amplitude", (PyCFunction) _wrap_noise_source_s_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_set_amplitude(noise_source_s self, float ampl)"},
	 { (char *)"noise_source_s_type", _wrap_noise_source_s_type, METH_VARARGS, (char *)"noise_source_s_type(noise_source_s self) -> noise_type_t"},
	 { (char *)"noise_source_s_amplitude", _wrap_noise_source_s_amplitude, METH_VARARGS, (char *)"noise_source_s_amplitude(noise_source_s self) -> float"},
	 { (char *)"delete_noise_source_s", _wrap_delete_noise_source_s, METH_VARARGS, (char *)"delete_noise_source_s(noise_source_s self)"},
	 { (char *)"noise_source_s_swigregister", noise_source_s_swigregister, METH_VARARGS, NULL},
	 { (char *)"noise_source_i_make", (PyCFunction) _wrap_noise_source_i_make, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_make(noise_type_t type, float ampl, long seed) -> sptr"},
	 { (char *)"noise_source_i_set_type", (PyCFunction) _wrap_noise_source_i_set_type, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_set_type(noise_source_i self, noise_type_t type)"},
	 { (char *)"noise_source_i_set_amplitude", (PyCFunction) _wrap_noise_source_i_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_set_amplitude(noise_source_i self, float ampl)"},
	 { (char *)"noise_source_i_type", _wrap_noise_source_i_type, METH_VARARGS, (char *)"noise_source_i_type(noise_source_i self) -> noise_type_t"},
	 { (char *)"noise_source_i_amplitude", _wrap_noise_source_i_amplitude, METH_VARARGS, (char *)"noise_source_i_amplitude(noise_source_i self) -> float"},
	 { (char *)"delete_noise_source_i", _wrap_delete_noise_source_i, METH_VARARGS, (char *)"delete_noise_source_i(noise_source_i self)"},
	 { (char *)"noise_source_i_swigregister", noise_source_i_swigregister, METH_VARARGS, NULL},
	 { (char *)"noise_source_f_make", (PyCFunction) _wrap_noise_source_f_make, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_make(noise_type_t type, float ampl, long seed) -> sptr"},
	 { (char *)"noise_source_f_set_type", (PyCFunction) _wrap_noise_source_f_set_type, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_set_type(noise_source_f self, noise_type_t type)"},
	 { (char *)"noise_source_f_set_amplitude", (PyCFunction) _wrap_noise_source_f_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_set_amplitude(noise_source_f self, float ampl)"},
	 { (char *)"noise_source_f_type", _wrap_noise_source_f_type, METH_VARARGS, (char *)"noise_source_f_type(noise_source_f self) -> noise_type_t"},
	 { (char *)"noise_source_f_amplitude", _wrap_noise_source_f_amplitude, METH_VARARGS, (char *)"noise_source_f_amplitude(noise_source_f self) -> float"},
	 { (char *)"delete_noise_source_f", _wrap_delete_noise_source_f, METH_VARARGS, (char *)"delete_noise_source_f(noise_source_f self)"},
	 { (char *)"noise_source_f_swigregister", noise_source_f_swigregister, METH_VARARGS, NULL},
	 { (char *)"noise_source_c_make", (PyCFunction) _wrap_noise_source_c_make, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_make(noise_type_t type, float ampl, long seed) -> sptr"},
	 { (char *)"noise_source_c_set_type", (PyCFunction) _wrap_noise_source_c_set_type, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_set_type(noise_source_c self, noise_type_t type)"},
	 { (char *)"noise_source_c_set_amplitude", (PyCFunction) _wrap_noise_source_c_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_set_amplitude(noise_source_c self, float ampl)"},
	 { (char *)"noise_source_c_type", _wrap_noise_source_c_type, METH_VARARGS, (char *)"noise_source_c_type(noise_source_c self) -> noise_type_t"},
	 { (char *)"noise_source_c_amplitude", _wrap_noise_source_c_amplitude, METH_VARARGS, (char *)"noise_source_c_amplitude(noise_source_c self) -> float"},
	 { (char *)"delete_noise_source_c", _wrap_delete_noise_source_c, METH_VARARGS, (char *)"delete_noise_source_c(noise_source_c self)"},
	 { (char *)"noise_source_c_swigregister", noise_source_c_swigregister, METH_VARARGS, NULL},
	 { (char *)"phase_modulator_fc_make", (PyCFunction) _wrap_phase_modulator_fc_make, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_make(double sensitivity) -> sptr"},
	 { (char *)"phase_modulator_fc_sensitivity", _wrap_phase_modulator_fc_sensitivity, METH_VARARGS, (char *)"phase_modulator_fc_sensitivity(phase_modulator_fc self) -> double"},
	 { (char *)"phase_modulator_fc_phase", _wrap_phase_modulator_fc_phase, METH_VARARGS, (char *)"phase_modulator_fc_phase(phase_modulator_fc self) -> double"},
	 { (char *)"phase_modulator_fc_set_sensitivity", (PyCFunction) _wrap_phase_modulator_fc_set_sensitivity, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_set_sensitivity(phase_modulator_fc self, double s)"},
	 { (char *)"phase_modulator_fc_set_phase", (PyCFunction) _wrap_phase_modulator_fc_set_phase, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_set_phase(phase_modulator_fc self, double p)"},
	 { (char *)"delete_phase_modulator_fc", _wrap_delete_phase_modulator_fc, METH_VARARGS, (char *)"delete_phase_modulator_fc(phase_modulator_fc self)"},
	 { (char *)"phase_modulator_fc_swigregister", phase_modulator_fc_swigregister, METH_VARARGS, NULL},
	 { (char *)"pll_carriertracking_cc_make", (PyCFunction) _wrap_pll_carriertracking_cc_make, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_make(float loop_bw, float max_freq, float min_freq) -> sptr"},
	 { (char *)"pll_carriertracking_cc_lock_detector", _wrap_pll_carriertracking_cc_lock_detector, METH_VARARGS, (char *)"pll_carriertracking_cc_lock_detector(pll_carriertracking_cc self) -> bool"},
	 { (char *)"pll_carriertracking_cc_squelch_enable", (PyCFunction) _wrap_pll_carriertracking_cc_squelch_enable, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_squelch_enable(pll_carriertracking_cc self, bool arg1) -> bool"},
	 { (char *)"pll_carriertracking_cc_set_lock_threshold", (PyCFunction) _wrap_pll_carriertracking_cc_set_lock_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_set_lock_threshold(pll_carriertracking_cc self, float arg1) -> float"},
	 { (char *)"pll_carriertracking_cc_set_loop_bandwidth", (PyCFunction) _wrap_pll_carriertracking_cc_set_loop_bandwidth, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_set_loop_bandwidth(pll_carriertracking_cc self, float bw)"},
	 { (char *)"pll_carriertracking_cc_set_damping_factor", (PyCFunction) _wrap_pll_carriertracking_cc_set_damping_factor, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_set_damping_factor(pll_carriertracking_cc self, float df)"},
	 { (char *)"pll_carriertracking_cc_set_alpha", (PyCFunction) _wrap_pll_carriertracking_cc_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_set_alpha(pll_carriertracking_cc self, float alpha)"},
	 { (char *)"pll_carriertracking_cc_set_beta", (PyCFunction) _wrap_pll_carriertracking_cc_set_beta, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_set_beta(pll_carriertracking_cc self, float beta)"},
	 { (char *)"pll_carriertracking_cc_set_frequency", (PyCFunction) _wrap_pll_carriertracking_cc_set_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_set_frequency(pll_carriertracking_cc self, float freq)"},
	 { (char *)"pll_carriertracking_cc_set_phase", (PyCFunction) _wrap_pll_carriertracking_cc_set_phase, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_set_phase(pll_carriertracking_cc self, float phase)"},
	 { (char *)"pll_carriertracking_cc_set_min_freq", (PyCFunction) _wrap_pll_carriertracking_cc_set_min_freq, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_set_min_freq(pll_carriertracking_cc self, float freq)"},
	 { (char *)"pll_carriertracking_cc_set_max_freq", (PyCFunction) _wrap_pll_carriertracking_cc_set_max_freq, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_set_max_freq(pll_carriertracking_cc self, float freq)"},
	 { (char *)"pll_carriertracking_cc_get_loop_bandwidth", _wrap_pll_carriertracking_cc_get_loop_bandwidth, METH_VARARGS, (char *)"pll_carriertracking_cc_get_loop_bandwidth(pll_carriertracking_cc self) -> float"},
	 { (char *)"pll_carriertracking_cc_get_damping_factor", _wrap_pll_carriertracking_cc_get_damping_factor, METH_VARARGS, (char *)"pll_carriertracking_cc_get_damping_factor(pll_carriertracking_cc self) -> float"},
	 { (char *)"pll_carriertracking_cc_get_alpha", _wrap_pll_carriertracking_cc_get_alpha, METH_VARARGS, (char *)"pll_carriertracking_cc_get_alpha(pll_carriertracking_cc self) -> float"},
	 { (char *)"pll_carriertracking_cc_get_beta", _wrap_pll_carriertracking_cc_get_beta, METH_VARARGS, (char *)"pll_carriertracking_cc_get_beta(pll_carriertracking_cc self) -> float"},
	 { (char *)"pll_carriertracking_cc_get_frequency", _wrap_pll_carriertracking_cc_get_frequency, METH_VARARGS, (char *)"pll_carriertracking_cc_get_frequency(pll_carriertracking_cc self) -> float"},
	 { (char *)"pll_carriertracking_cc_get_phase", _wrap_pll_carriertracking_cc_get_phase, METH_VARARGS, (char *)"pll_carriertracking_cc_get_phase(pll_carriertracking_cc self) -> float"},
	 { (char *)"pll_carriertracking_cc_get_min_freq", _wrap_pll_carriertracking_cc_get_min_freq, METH_VARARGS, (char *)"pll_carriertracking_cc_get_min_freq(pll_carriertracking_cc self) -> float"},
	 { (char *)"pll_carriertracking_cc_get_max_freq", _wrap_pll_carriertracking_cc_get_max_freq, METH_VARARGS, (char *)"pll_carriertracking_cc_get_max_freq(pll_carriertracking_cc self) -> float"},
	 { (char *)"delete_pll_carriertracking_cc", _wrap_delete_pll_carriertracking_cc, METH_VARARGS, (char *)"delete_pll_carriertracking_cc(pll_carriertracking_cc self)"},
	 { (char *)"pll_carriertracking_cc_swigregister", pll_carriertracking_cc_swigregister, METH_VARARGS, NULL},
	 { (char *)"pll_freqdet_cf_make", (PyCFunction) _wrap_pll_freqdet_cf_make, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_make(float loop_bw, float max_freq, float min_freq) -> sptr"},
	 { (char *)"pll_freqdet_cf_set_loop_bandwidth", (PyCFunction) _wrap_pll_freqdet_cf_set_loop_bandwidth, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_set_loop_bandwidth(pll_freqdet_cf self, float bw)"},
	 { (char *)"pll_freqdet_cf_set_damping_factor", (PyCFunction) _wrap_pll_freqdet_cf_set_damping_factor, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_set_damping_factor(pll_freqdet_cf self, float df)"},
	 { (char *)"pll_freqdet_cf_set_alpha", (PyCFunction) _wrap_pll_freqdet_cf_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_set_alpha(pll_freqdet_cf self, float alpha)"},
	 { (char *)"pll_freqdet_cf_set_beta", (PyCFunction) _wrap_pll_freqdet_cf_set_beta, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_set_beta(pll_freqdet_cf self, float beta)"},
	 { (char *)"pll_freqdet_cf_set_frequency", (PyCFunction) _wrap_pll_freqdet_cf_set_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_set_frequency(pll_freqdet_cf self, float freq)"},
	 { (char *)"pll_freqdet_cf_set_phase", (PyCFunction) _wrap_pll_freqdet_cf_set_phase, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_set_phase(pll_freqdet_cf self, float phase)"},
	 { (char *)"pll_freqdet_cf_set_min_freq", (PyCFunction) _wrap_pll_freqdet_cf_set_min_freq, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_set_min_freq(pll_freqdet_cf self, float freq)"},
	 { (char *)"pll_freqdet_cf_set_max_freq", (PyCFunction) _wrap_pll_freqdet_cf_set_max_freq, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_set_max_freq(pll_freqdet_cf self, float freq)"},
	 { (char *)"pll_freqdet_cf_get_loop_bandwidth", _wrap_pll_freqdet_cf_get_loop_bandwidth, METH_VARARGS, (char *)"pll_freqdet_cf_get_loop_bandwidth(pll_freqdet_cf self) -> float"},
	 { (char *)"pll_freqdet_cf_get_damping_factor", _wrap_pll_freqdet_cf_get_damping_factor, METH_VARARGS, (char *)"pll_freqdet_cf_get_damping_factor(pll_freqdet_cf self) -> float"},
	 { (char *)"pll_freqdet_cf_get_alpha", _wrap_pll_freqdet_cf_get_alpha, METH_VARARGS, (char *)"pll_freqdet_cf_get_alpha(pll_freqdet_cf self) -> float"},
	 { (char *)"pll_freqdet_cf_get_beta", _wrap_pll_freqdet_cf_get_beta, METH_VARARGS, (char *)"pll_freqdet_cf_get_beta(pll_freqdet_cf self) -> float"},
	 { (char *)"pll_freqdet_cf_get_frequency", _wrap_pll_freqdet_cf_get_frequency, METH_VARARGS, (char *)"pll_freqdet_cf_get_frequency(pll_freqdet_cf self) -> float"},
	 { (char *)"pll_freqdet_cf_get_phase", _wrap_pll_freqdet_cf_get_phase, METH_VARARGS, (char *)"pll_freqdet_cf_get_phase(pll_freqdet_cf self) -> float"},
	 { (char *)"pll_freqdet_cf_get_min_freq", _wrap_pll_freqdet_cf_get_min_freq, METH_VARARGS, (char *)"pll_freqdet_cf_get_min_freq(pll_freqdet_cf self) -> float"},
	 { (char *)"pll_freqdet_cf_get_max_freq", _wrap_pll_freqdet_cf_get_max_freq, METH_VARARGS, (char *)"pll_freqdet_cf_get_max_freq(pll_freqdet_cf self) -> float"},
	 { (char *)"delete_pll_freqdet_cf", _wrap_delete_pll_freqdet_cf, METH_VARARGS, (char *)"delete_pll_freqdet_cf(pll_freqdet_cf self)"},
	 { (char *)"pll_freqdet_cf_swigregister", pll_freqdet_cf_swigregister, METH_VARARGS, NULL},
	 { (char *)"pll_refout_cc_make", (PyCFunction) _wrap_pll_refout_cc_make, METH_VARARGS | METH_KEYWORDS, (char *)"pll_refout_cc_make(float loop_bw, float max_freq, float min_freq) -> sptr"},
	 { (char *)"delete_pll_refout_cc", _wrap_delete_pll_refout_cc, METH_VARARGS, (char *)"delete_pll_refout_cc(pll_refout_cc self)"},
	 { (char *)"pll_refout_cc_swigregister", pll_refout_cc_swigregister, METH_VARARGS, NULL},
	 { (char *)"probe_avg_mag_sqrd_c_make", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_make, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_make(double threshold_db, double alpha = 0.0001) -> sptr"},
	 { (char *)"probe_avg_mag_sqrd_c_unmuted", _wrap_probe_avg_mag_sqrd_c_unmuted, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_unmuted(probe_avg_mag_sqrd_c self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_c_level", _wrap_probe_avg_mag_sqrd_c_level, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_level(probe_avg_mag_sqrd_c self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_c_threshold", _wrap_probe_avg_mag_sqrd_c_threshold, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_threshold(probe_avg_mag_sqrd_c self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_c_set_alpha", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_set_alpha(probe_avg_mag_sqrd_c self, double alpha)"},
	 { (char *)"probe_avg_mag_sqrd_c_set_threshold", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_set_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_set_threshold(probe_avg_mag_sqrd_c self, double decibels)"},
	 { (char *)"delete_probe_avg_mag_sqrd_c", _wrap_delete_probe_avg_mag_sqrd_c, METH_VARARGS, (char *)"delete_probe_avg_mag_sqrd_c(probe_avg_mag_sqrd_c self)"},
	 { (char *)"probe_avg_mag_sqrd_c_swigregister", probe_avg_mag_sqrd_c_swigregister, METH_VARARGS, NULL},
	 { (char *)"probe_avg_mag_sqrd_cf_make", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_make, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_cf_make(double threshold_db, double alpha = 0.0001) -> sptr"},
	 { (char *)"probe_avg_mag_sqrd_cf_unmuted", _wrap_probe_avg_mag_sqrd_cf_unmuted, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_unmuted(probe_avg_mag_sqrd_cf self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_cf_level", _wrap_probe_avg_mag_sqrd_cf_level, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_level(probe_avg_mag_sqrd_cf self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_cf_threshold", _wrap_probe_avg_mag_sqrd_cf_threshold, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_threshold(probe_avg_mag_sqrd_cf self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_cf_set_alpha", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_cf_set_alpha(probe_avg_mag_sqrd_cf self, double alpha)"},
	 { (char *)"probe_avg_mag_sqrd_cf_set_threshold", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_set_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_cf_set_threshold(probe_avg_mag_sqrd_cf self, double decibels)"},
	 { (char *)"delete_probe_avg_mag_sqrd_cf", _wrap_delete_probe_avg_mag_sqrd_cf, METH_VARARGS, (char *)"delete_probe_avg_mag_sqrd_cf(probe_avg_mag_sqrd_cf self)"},
	 { (char *)"probe_avg_mag_sqrd_cf_swigregister", probe_avg_mag_sqrd_cf_swigregister, METH_VARARGS, NULL},
	 { (char *)"probe_avg_mag_sqrd_f_make", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_make, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_make(double threshold_db, double alpha = 0.0001) -> sptr"},
	 { (char *)"probe_avg_mag_sqrd_f_unmuted", _wrap_probe_avg_mag_sqrd_f_unmuted, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_unmuted(probe_avg_mag_sqrd_f self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_f_level", _wrap_probe_avg_mag_sqrd_f_level, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_level(probe_avg_mag_sqrd_f self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_f_threshold", _wrap_probe_avg_mag_sqrd_f_threshold, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_threshold(probe_avg_mag_sqrd_f self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_f_set_alpha", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_set_alpha(probe_avg_mag_sqrd_f self, double alpha)"},
	 { (char *)"probe_avg_mag_sqrd_f_set_threshold", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_set_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_set_threshold(probe_avg_mag_sqrd_f self, double decibels)"},
	 { (char *)"delete_probe_avg_mag_sqrd_f", _wrap_delete_probe_avg_mag_sqrd_f, METH_VARARGS, (char *)"delete_probe_avg_mag_sqrd_f(probe_avg_mag_sqrd_f self)"},
	 { (char *)"probe_avg_mag_sqrd_f_swigregister", probe_avg_mag_sqrd_f_swigregister, METH_VARARGS, NULL},
	 { (char *)"pwr_squelch_cc_make", (PyCFunction) _wrap_pwr_squelch_cc_make, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_make(double db, double alpha = 0.0001, int ramp = 0, bool gate = False) -> sptr"},
	 { (char *)"pwr_squelch_cc_squelch_range", _wrap_pwr_squelch_cc_squelch_range, METH_VARARGS, (char *)"pwr_squelch_cc_squelch_range(pwr_squelch_cc self) -> __dummy_4__"},
	 { (char *)"pwr_squelch_cc_threshold", _wrap_pwr_squelch_cc_threshold, METH_VARARGS, (char *)"pwr_squelch_cc_threshold(pwr_squelch_cc self) -> double"},
	 { (char *)"pwr_squelch_cc_set_threshold", (PyCFunction) _wrap_pwr_squelch_cc_set_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_set_threshold(pwr_squelch_cc self, double db)"},
	 { (char *)"pwr_squelch_cc_set_alpha", (PyCFunction) _wrap_pwr_squelch_cc_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_set_alpha(pwr_squelch_cc self, double alpha)"},
	 { (char *)"pwr_squelch_cc_ramp", _wrap_pwr_squelch_cc_ramp, METH_VARARGS, (char *)"pwr_squelch_cc_ramp(pwr_squelch_cc self) -> int"},
	 { (char *)"pwr_squelch_cc_set_ramp", (PyCFunction) _wrap_pwr_squelch_cc_set_ramp, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_set_ramp(pwr_squelch_cc self, int ramp)"},
	 { (char *)"pwr_squelch_cc_gate", _wrap_pwr_squelch_cc_gate, METH_VARARGS, (char *)"pwr_squelch_cc_gate(pwr_squelch_cc self) -> bool"},
	 { (char *)"pwr_squelch_cc_set_gate", (PyCFunction) _wrap_pwr_squelch_cc_set_gate, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_set_gate(pwr_squelch_cc self, bool gate)"},
	 { (char *)"pwr_squelch_cc_unmuted", _wrap_pwr_squelch_cc_unmuted, METH_VARARGS, (char *)"pwr_squelch_cc_unmuted(pwr_squelch_cc self) -> bool"},
	 { (char *)"delete_pwr_squelch_cc", _wrap_delete_pwr_squelch_cc, METH_VARARGS, (char *)"delete_pwr_squelch_cc(pwr_squelch_cc self)"},
	 { (char *)"pwr_squelch_cc_swigregister", pwr_squelch_cc_swigregister, METH_VARARGS, NULL},
	 { (char *)"pwr_squelch_ff_make", (PyCFunction) _wrap_pwr_squelch_ff_make, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_make(double db, double alpha = 0.0001, int ramp = 0, bool gate = False) -> sptr"},
	 { (char *)"pwr_squelch_ff_squelch_range", _wrap_pwr_squelch_ff_squelch_range, METH_VARARGS, (char *)"pwr_squelch_ff_squelch_range(pwr_squelch_ff self) -> __dummy_4__"},
	 { (char *)"pwr_squelch_ff_threshold", _wrap_pwr_squelch_ff_threshold, METH_VARARGS, (char *)"pwr_squelch_ff_threshold(pwr_squelch_ff self) -> double"},
	 { (char *)"pwr_squelch_ff_set_threshold", (PyCFunction) _wrap_pwr_squelch_ff_set_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_set_threshold(pwr_squelch_ff self, double db)"},
	 { (char *)"pwr_squelch_ff_set_alpha", (PyCFunction) _wrap_pwr_squelch_ff_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_set_alpha(pwr_squelch_ff self, double alpha)"},
	 { (char *)"pwr_squelch_ff_ramp", _wrap_pwr_squelch_ff_ramp, METH_VARARGS, (char *)"pwr_squelch_ff_ramp(pwr_squelch_ff self) -> int"},
	 { (char *)"pwr_squelch_ff_set_ramp", (PyCFunction) _wrap_pwr_squelch_ff_set_ramp, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_set_ramp(pwr_squelch_ff self, int ramp)"},
	 { (char *)"pwr_squelch_ff_gate", _wrap_pwr_squelch_ff_gate, METH_VARARGS, (char *)"pwr_squelch_ff_gate(pwr_squelch_ff self) -> bool"},
	 { (char *)"pwr_squelch_ff_set_gate", (PyCFunction) _wrap_pwr_squelch_ff_set_gate, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_set_gate(pwr_squelch_ff self, bool gate)"},
	 { (char *)"pwr_squelch_ff_unmuted", _wrap_pwr_squelch_ff_unmuted, METH_VARARGS, (char *)"pwr_squelch_ff_unmuted(pwr_squelch_ff self) -> bool"},
	 { (char *)"delete_pwr_squelch_ff", _wrap_delete_pwr_squelch_ff, METH_VARARGS, (char *)"delete_pwr_squelch_ff(pwr_squelch_ff self)"},
	 { (char *)"pwr_squelch_ff_swigregister", pwr_squelch_ff_swigregister, METH_VARARGS, NULL},
	 { (char *)"quadrature_demod_cf_make", (PyCFunction) _wrap_quadrature_demod_cf_make, METH_VARARGS | METH_KEYWORDS, (char *)"quadrature_demod_cf_make(float gain) -> sptr"},
	 { (char *)"quadrature_demod_cf_set_gain", (PyCFunction) _wrap_quadrature_demod_cf_set_gain, METH_VARARGS | METH_KEYWORDS, (char *)"quadrature_demod_cf_set_gain(quadrature_demod_cf self, float gain)"},
	 { (char *)"quadrature_demod_cf_gain", _wrap_quadrature_demod_cf_gain, METH_VARARGS, (char *)"quadrature_demod_cf_gain(quadrature_demod_cf self) -> float"},
	 { (char *)"delete_quadrature_demod_cf", _wrap_delete_quadrature_demod_cf, METH_VARARGS, (char *)"delete_quadrature_demod_cf(quadrature_demod_cf self)"},
	 { (char *)"quadrature_demod_cf_swigregister", quadrature_demod_cf_swigregister, METH_VARARGS, NULL},
	 { (char *)"rail_ff_make", (PyCFunction) _wrap_rail_ff_make, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_make(float lo, float hi) -> sptr"},
	 { (char *)"rail_ff_lo", _wrap_rail_ff_lo, METH_VARARGS, (char *)"rail_ff_lo(rail_ff self) -> float"},
	 { (char *)"rail_ff_hi", _wrap_rail_ff_hi, METH_VARARGS, (char *)"rail_ff_hi(rail_ff self) -> float"},
	 { (char *)"rail_ff_set_lo", (PyCFunction) _wrap_rail_ff_set_lo, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_set_lo(rail_ff self, float lo)"},
	 { (char *)"rail_ff_set_hi", (PyCFunction) _wrap_rail_ff_set_hi, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_set_hi(rail_ff self, float hi)"},
	 { (char *)"delete_rail_ff", _wrap_delete_rail_ff, METH_VARARGS, (char *)"delete_rail_ff(rail_ff self)"},
	 { (char *)"rail_ff_swigregister", rail_ff_swigregister, METH_VARARGS, NULL},
	 { (char *)"sincos", (PyCFunction) _wrap_sincos, METH_VARARGS | METH_KEYWORDS, (char *)"sincos(double x, double sin, double cos)"},
	 { (char *)"sincosf", (PyCFunction) _wrap_sincosf, METH_VARARGS | METH_KEYWORDS, (char *)"sincosf(float x, float sin, float cos)"},
	 { (char *)"sig_source_s_make", (PyCFunction) _wrap_sig_source_s_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"sig_source_s_make(double sampling_freq, gr_waveform_t waveform, double wave_freq, \n"
		"    double ampl, short offset = 0) -> sptr\n"
		""},
	 { (char *)"sig_source_s_sampling_freq", _wrap_sig_source_s_sampling_freq, METH_VARARGS, (char *)"sig_source_s_sampling_freq(sig_source_s self) -> double"},
	 { (char *)"sig_source_s_waveform", _wrap_sig_source_s_waveform, METH_VARARGS, (char *)"sig_source_s_waveform(sig_source_s self) -> gr_waveform_t"},
	 { (char *)"sig_source_s_frequency", _wrap_sig_source_s_frequency, METH_VARARGS, (char *)"sig_source_s_frequency(sig_source_s self) -> double"},
	 { (char *)"sig_source_s_amplitude", _wrap_sig_source_s_amplitude, METH_VARARGS, (char *)"sig_source_s_amplitude(sig_source_s self) -> double"},
	 { (char *)"sig_source_s_offset", _wrap_sig_source_s_offset, METH_VARARGS, (char *)"sig_source_s_offset(sig_source_s self) -> short"},
	 { (char *)"sig_source_s_set_sampling_freq", (PyCFunction) _wrap_sig_source_s_set_sampling_freq, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_set_sampling_freq(sig_source_s self, double sampling_freq)"},
	 { (char *)"sig_source_s_set_waveform", (PyCFunction) _wrap_sig_source_s_set_waveform, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_set_waveform(sig_source_s self, gr_waveform_t waveform)"},
	 { (char *)"sig_source_s_set_frequency", (PyCFunction) _wrap_sig_source_s_set_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_set_frequency(sig_source_s self, double frequency)"},
	 { (char *)"sig_source_s_set_amplitude", (PyCFunction) _wrap_sig_source_s_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_set_amplitude(sig_source_s self, double ampl)"},
	 { (char *)"sig_source_s_set_offset", (PyCFunction) _wrap_sig_source_s_set_offset, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_set_offset(sig_source_s self, short offset)"},
	 { (char *)"delete_sig_source_s", _wrap_delete_sig_source_s, METH_VARARGS, (char *)"delete_sig_source_s(sig_source_s self)"},
	 { (char *)"sig_source_s_swigregister", sig_source_s_swigregister, METH_VARARGS, NULL},
	 { (char *)"sig_source_i_make", (PyCFunction) _wrap_sig_source_i_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"sig_source_i_make(double sampling_freq, gr_waveform_t waveform, double wave_freq, \n"
		"    double ampl, int offset = 0) -> sptr\n"
		""},
	 { (char *)"sig_source_i_sampling_freq", _wrap_sig_source_i_sampling_freq, METH_VARARGS, (char *)"sig_source_i_sampling_freq(sig_source_i self) -> double"},
	 { (char *)"sig_source_i_waveform", _wrap_sig_source_i_waveform, METH_VARARGS, (char *)"sig_source_i_waveform(sig_source_i self) -> gr_waveform_t"},
	 { (char *)"sig_source_i_frequency", _wrap_sig_source_i_frequency, METH_VARARGS, (char *)"sig_source_i_frequency(sig_source_i self) -> double"},
	 { (char *)"sig_source_i_amplitude", _wrap_sig_source_i_amplitude, METH_VARARGS, (char *)"sig_source_i_amplitude(sig_source_i self) -> double"},
	 { (char *)"sig_source_i_offset", _wrap_sig_source_i_offset, METH_VARARGS, (char *)"sig_source_i_offset(sig_source_i self) -> int"},
	 { (char *)"sig_source_i_set_sampling_freq", (PyCFunction) _wrap_sig_source_i_set_sampling_freq, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_set_sampling_freq(sig_source_i self, double sampling_freq)"},
	 { (char *)"sig_source_i_set_waveform", (PyCFunction) _wrap_sig_source_i_set_waveform, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_set_waveform(sig_source_i self, gr_waveform_t waveform)"},
	 { (char *)"sig_source_i_set_frequency", (PyCFunction) _wrap_sig_source_i_set_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_set_frequency(sig_source_i self, double frequency)"},
	 { (char *)"sig_source_i_set_amplitude", (PyCFunction) _wrap_sig_source_i_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_set_amplitude(sig_source_i self, double ampl)"},
	 { (char *)"sig_source_i_set_offset", (PyCFunction) _wrap_sig_source_i_set_offset, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_set_offset(sig_source_i self, int offset)"},
	 { (char *)"delete_sig_source_i", _wrap_delete_sig_source_i, METH_VARARGS, (char *)"delete_sig_source_i(sig_source_i self)"},
	 { (char *)"sig_source_i_swigregister", sig_source_i_swigregister, METH_VARARGS, NULL},
	 { (char *)"sig_source_f_make", (PyCFunction) _wrap_sig_source_f_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"sig_source_f_make(double sampling_freq, gr_waveform_t waveform, double wave_freq, \n"
		"    double ampl, float offset = 0) -> sptr\n"
		""},
	 { (char *)"sig_source_f_sampling_freq", _wrap_sig_source_f_sampling_freq, METH_VARARGS, (char *)"sig_source_f_sampling_freq(sig_source_f self) -> double"},
	 { (char *)"sig_source_f_waveform", _wrap_sig_source_f_waveform, METH_VARARGS, (char *)"sig_source_f_waveform(sig_source_f self) -> gr_waveform_t"},
	 { (char *)"sig_source_f_frequency", _wrap_sig_source_f_frequency, METH_VARARGS, (char *)"sig_source_f_frequency(sig_source_f self) -> double"},
	 { (char *)"sig_source_f_amplitude", _wrap_sig_source_f_amplitude, METH_VARARGS, (char *)"sig_source_f_amplitude(sig_source_f self) -> double"},
	 { (char *)"sig_source_f_offset", _wrap_sig_source_f_offset, METH_VARARGS, (char *)"sig_source_f_offset(sig_source_f self) -> float"},
	 { (char *)"sig_source_f_set_sampling_freq", (PyCFunction) _wrap_sig_source_f_set_sampling_freq, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_set_sampling_freq(sig_source_f self, double sampling_freq)"},
	 { (char *)"sig_source_f_set_waveform", (PyCFunction) _wrap_sig_source_f_set_waveform, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_set_waveform(sig_source_f self, gr_waveform_t waveform)"},
	 { (char *)"sig_source_f_set_frequency", (PyCFunction) _wrap_sig_source_f_set_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_set_frequency(sig_source_f self, double frequency)"},
	 { (char *)"sig_source_f_set_amplitude", (PyCFunction) _wrap_sig_source_f_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_set_amplitude(sig_source_f self, double ampl)"},
	 { (char *)"sig_source_f_set_offset", (PyCFunction) _wrap_sig_source_f_set_offset, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_set_offset(sig_source_f self, float offset)"},
	 { (char *)"delete_sig_source_f", _wrap_delete_sig_source_f, METH_VARARGS, (char *)"delete_sig_source_f(sig_source_f self)"},
	 { (char *)"sig_source_f_swigregister", sig_source_f_swigregister, METH_VARARGS, NULL},
	 { (char *)"sig_source_c_make", (PyCFunction) _wrap_sig_source_c_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"sig_source_c_make(double sampling_freq, gr_waveform_t waveform, double wave_freq, \n"
		"    double ampl, gr_complex offset = 0) -> sptr\n"
		""},
	 { (char *)"sig_source_c_sampling_freq", _wrap_sig_source_c_sampling_freq, METH_VARARGS, (char *)"sig_source_c_sampling_freq(sig_source_c self) -> double"},
	 { (char *)"sig_source_c_waveform", _wrap_sig_source_c_waveform, METH_VARARGS, (char *)"sig_source_c_waveform(sig_source_c self) -> gr_waveform_t"},
	 { (char *)"sig_source_c_frequency", _wrap_sig_source_c_frequency, METH_VARARGS, (char *)"sig_source_c_frequency(sig_source_c self) -> double"},
	 { (char *)"sig_source_c_amplitude", _wrap_sig_source_c_amplitude, METH_VARARGS, (char *)"sig_source_c_amplitude(sig_source_c self) -> double"},
	 { (char *)"sig_source_c_offset", _wrap_sig_source_c_offset, METH_VARARGS, (char *)"sig_source_c_offset(sig_source_c self) -> gr_complex"},
	 { (char *)"sig_source_c_set_sampling_freq", (PyCFunction) _wrap_sig_source_c_set_sampling_freq, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_set_sampling_freq(sig_source_c self, double sampling_freq)"},
	 { (char *)"sig_source_c_set_waveform", (PyCFunction) _wrap_sig_source_c_set_waveform, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_set_waveform(sig_source_c self, gr_waveform_t waveform)"},
	 { (char *)"sig_source_c_set_frequency", (PyCFunction) _wrap_sig_source_c_set_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_set_frequency(sig_source_c self, double frequency)"},
	 { (char *)"sig_source_c_set_amplitude", (PyCFunction) _wrap_sig_source_c_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_set_amplitude(sig_source_c self, double ampl)"},
	 { (char *)"sig_source_c_set_offset", (PyCFunction) _wrap_sig_source_c_set_offset, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_set_offset(sig_source_c self, gr_complex offset)"},
	 { (char *)"delete_sig_source_c", _wrap_delete_sig_source_c, METH_VARARGS, (char *)"delete_sig_source_c(sig_source_c self)"},
	 { (char *)"sig_source_c_swigregister", sig_source_c_swigregister, METH_VARARGS, NULL},
	 { (char *)"simple_squelch_cc_make", (PyCFunction) _wrap_simple_squelch_cc_make, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_make(double threshold_db, double alpha) -> sptr"},
	 { (char *)"simple_squelch_cc_unmuted", _wrap_simple_squelch_cc_unmuted, METH_VARARGS, (char *)"simple_squelch_cc_unmuted(simple_squelch_cc self) -> bool"},
	 { (char *)"simple_squelch_cc_set_alpha", (PyCFunction) _wrap_simple_squelch_cc_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_set_alpha(simple_squelch_cc self, double alpha)"},
	 { (char *)"simple_squelch_cc_set_threshold", (PyCFunction) _wrap_simple_squelch_cc_set_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_set_threshold(simple_squelch_cc self, double decibels)"},
	 { (char *)"simple_squelch_cc_threshold", _wrap_simple_squelch_cc_threshold, METH_VARARGS, (char *)"simple_squelch_cc_threshold(simple_squelch_cc self) -> double"},
	 { (char *)"simple_squelch_cc_squelch_range", _wrap_simple_squelch_cc_squelch_range, METH_VARARGS, (char *)"simple_squelch_cc_squelch_range(simple_squelch_cc self) -> __dummy_4__"},
	 { (char *)"delete_simple_squelch_cc", _wrap_delete_simple_squelch_cc, METH_VARARGS, (char *)"delete_simple_squelch_cc(simple_squelch_cc self)"},
	 { (char *)"simple_squelch_cc_swigregister", simple_squelch_cc_swigregister, METH_VARARGS, NULL},
	 { (char *)"squelch_base_cc_ramp", _wrap_squelch_base_cc_ramp, METH_VARARGS, (char *)"squelch_base_cc_ramp(squelch_base_cc self) -> int"},
	 { (char *)"squelch_base_cc_set_ramp", (PyCFunction) _wrap_squelch_base_cc_set_ramp, METH_VARARGS | METH_KEYWORDS, (char *)"squelch_base_cc_set_ramp(squelch_base_cc self, int ramp)"},
	 { (char *)"squelch_base_cc_gate", _wrap_squelch_base_cc_gate, METH_VARARGS, (char *)"squelch_base_cc_gate(squelch_base_cc self) -> bool"},
	 { (char *)"squelch_base_cc_set_gate", (PyCFunction) _wrap_squelch_base_cc_set_gate, METH_VARARGS | METH_KEYWORDS, (char *)"squelch_base_cc_set_gate(squelch_base_cc self, bool gate)"},
	 { (char *)"squelch_base_cc_unmuted", _wrap_squelch_base_cc_unmuted, METH_VARARGS, (char *)"squelch_base_cc_unmuted(squelch_base_cc self) -> bool"},
	 { (char *)"squelch_base_cc_squelch_range", _wrap_squelch_base_cc_squelch_range, METH_VARARGS, (char *)"squelch_base_cc_squelch_range(squelch_base_cc self) -> __dummy_4__"},
	 { (char *)"delete_squelch_base_cc", _wrap_delete_squelch_base_cc, METH_VARARGS, (char *)"delete_squelch_base_cc(squelch_base_cc self)"},
	 { (char *)"squelch_base_cc_swigregister", squelch_base_cc_swigregister, METH_VARARGS, NULL},
	 { (char *)"squelch_base_ff_ramp", _wrap_squelch_base_ff_ramp, METH_VARARGS, (char *)"squelch_base_ff_ramp(squelch_base_ff self) -> int"},
	 { (char *)"squelch_base_ff_set_ramp", (PyCFunction) _wrap_squelch_base_ff_set_ramp, METH_VARARGS | METH_KEYWORDS, (char *)"squelch_base_ff_set_ramp(squelch_base_ff self, int ramp)"},
	 { (char *)"squelch_base_ff_gate", _wrap_squelch_base_ff_gate, METH_VARARGS, (char *)"squelch_base_ff_gate(squelch_base_ff self) -> bool"},
	 { (char *)"squelch_base_ff_set_gate", (PyCFunction) _wrap_squelch_base_ff_set_gate, METH_VARARGS | METH_KEYWORDS, (char *)"squelch_base_ff_set_gate(squelch_base_ff self, bool gate)"},
	 { (char *)"squelch_base_ff_unmuted", _wrap_squelch_base_ff_unmuted, METH_VARARGS, (char *)"squelch_base_ff_unmuted(squelch_base_ff self) -> bool"},
	 { (char *)"squelch_base_ff_squelch_range", _wrap_squelch_base_ff_squelch_range, METH_VARARGS, (char *)"squelch_base_ff_squelch_range(squelch_base_ff self) -> __dummy_4__"},
	 { (char *)"delete_squelch_base_ff", _wrap_delete_squelch_base_ff, METH_VARARGS, (char *)"delete_squelch_base_ff(squelch_base_ff self)"},
	 { (char *)"squelch_base_ff_swigregister", squelch_base_ff_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_agc_cc_sptr", _wrap_new_agc_cc_sptr, METH_VARARGS, (char *)"\n"
		"agc_cc_sptr()\n"
		"new_agc_cc_sptr(agc_cc p) -> agc_cc_sptr\n"
		""},
	 { (char *)"agc_cc_sptr___deref__", _wrap_agc_cc_sptr___deref__, METH_VARARGS, (char *)"agc_cc_sptr___deref__(agc_cc_sptr self) -> agc_cc"},
	 { (char *)"delete_agc_cc_sptr", _wrap_delete_agc_cc_sptr, METH_VARARGS, (char *)"delete_agc_cc_sptr(agc_cc_sptr self)"},
	 { (char *)"agc_cc_sptr_make", (PyCFunction) _wrap_agc_cc_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"agc_cc_sptr_make(agc_cc_sptr self, float rate = 1e-4, float reference = 1.0, \n"
		"    float gain = 1.0, float max_gain = 0.0) -> sptr\n"
		""},
	 { (char *)"agc_cc_sptr_rate", _wrap_agc_cc_sptr_rate, METH_VARARGS, (char *)"agc_cc_sptr_rate(agc_cc_sptr self) -> float"},
	 { (char *)"agc_cc_sptr_reference", _wrap_agc_cc_sptr_reference, METH_VARARGS, (char *)"agc_cc_sptr_reference(agc_cc_sptr self) -> float"},
	 { (char *)"agc_cc_sptr_gain", _wrap_agc_cc_sptr_gain, METH_VARARGS, (char *)"agc_cc_sptr_gain(agc_cc_sptr self) -> float"},
	 { (char *)"agc_cc_sptr_max_gain", _wrap_agc_cc_sptr_max_gain, METH_VARARGS, (char *)"agc_cc_sptr_max_gain(agc_cc_sptr self) -> float"},
	 { (char *)"agc_cc_sptr_set_rate", (PyCFunction) _wrap_agc_cc_sptr_set_rate, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_sptr_set_rate(agc_cc_sptr self, float rate)"},
	 { (char *)"agc_cc_sptr_set_reference", (PyCFunction) _wrap_agc_cc_sptr_set_reference, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_sptr_set_reference(agc_cc_sptr self, float reference)"},
	 { (char *)"agc_cc_sptr_set_gain", (PyCFunction) _wrap_agc_cc_sptr_set_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_sptr_set_gain(agc_cc_sptr self, float gain)"},
	 { (char *)"agc_cc_sptr_set_max_gain", (PyCFunction) _wrap_agc_cc_sptr_set_max_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_sptr_set_max_gain(agc_cc_sptr self, float max_gain)"},
	 { (char *)"agc_cc_sptr_history", _wrap_agc_cc_sptr_history, METH_VARARGS, (char *)"agc_cc_sptr_history(agc_cc_sptr self) -> unsigned int"},
	 { (char *)"agc_cc_sptr_output_multiple", _wrap_agc_cc_sptr_output_multiple, METH_VARARGS, (char *)"agc_cc_sptr_output_multiple(agc_cc_sptr self) -> int"},
	 { (char *)"agc_cc_sptr_relative_rate", _wrap_agc_cc_sptr_relative_rate, METH_VARARGS, (char *)"agc_cc_sptr_relative_rate(agc_cc_sptr self) -> double"},
	 { (char *)"agc_cc_sptr_start", _wrap_agc_cc_sptr_start, METH_VARARGS, (char *)"agc_cc_sptr_start(agc_cc_sptr self) -> bool"},
	 { (char *)"agc_cc_sptr_stop", _wrap_agc_cc_sptr_stop, METH_VARARGS, (char *)"agc_cc_sptr_stop(agc_cc_sptr self) -> bool"},
	 { (char *)"agc_cc_sptr_nitems_read", (PyCFunction) _wrap_agc_cc_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_sptr_nitems_read(agc_cc_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"agc_cc_sptr_nitems_written", (PyCFunction) _wrap_agc_cc_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_sptr_nitems_written(agc_cc_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"agc_cc_sptr_max_noutput_items", _wrap_agc_cc_sptr_max_noutput_items, METH_VARARGS, (char *)"agc_cc_sptr_max_noutput_items(agc_cc_sptr self) -> int"},
	 { (char *)"agc_cc_sptr_set_max_noutput_items", (PyCFunction) _wrap_agc_cc_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_sptr_set_max_noutput_items(agc_cc_sptr self, int m)"},
	 { (char *)"agc_cc_sptr_unset_max_noutput_items", _wrap_agc_cc_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"agc_cc_sptr_unset_max_noutput_items(agc_cc_sptr self)"},
	 { (char *)"agc_cc_sptr_is_set_max_noutput_items", _wrap_agc_cc_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"agc_cc_sptr_is_set_max_noutput_items(agc_cc_sptr self) -> bool"},
	 { (char *)"agc_cc_sptr_max_output_buffer", (PyCFunction) _wrap_agc_cc_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_sptr_max_output_buffer(agc_cc_sptr self, int i) -> long"},
	 { (char *)"agc_cc_sptr_set_max_output_buffer", _wrap_agc_cc_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"agc_cc_sptr_set_max_output_buffer(agc_cc_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"agc_cc_sptr_min_output_buffer", (PyCFunction) _wrap_agc_cc_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_sptr_min_output_buffer(agc_cc_sptr self, int i) -> long"},
	 { (char *)"agc_cc_sptr_set_min_output_buffer", _wrap_agc_cc_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"agc_cc_sptr_set_min_output_buffer(agc_cc_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"agc_cc_sptr_detail", _wrap_agc_cc_sptr_detail, METH_VARARGS, (char *)"agc_cc_sptr_detail(agc_cc_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"agc_cc_sptr_set_detail", (PyCFunction) _wrap_agc_cc_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_sptr_set_detail(agc_cc_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"agc_cc_sptr_name", _wrap_agc_cc_sptr_name, METH_VARARGS, (char *)"agc_cc_sptr_name(agc_cc_sptr self) -> string"},
	 { (char *)"agc_cc_sptr_symbol_name", _wrap_agc_cc_sptr_symbol_name, METH_VARARGS, (char *)"agc_cc_sptr_symbol_name(agc_cc_sptr self) -> string"},
	 { (char *)"agc_cc_sptr_input_signature", _wrap_agc_cc_sptr_input_signature, METH_VARARGS, (char *)"agc_cc_sptr_input_signature(agc_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"agc_cc_sptr_output_signature", _wrap_agc_cc_sptr_output_signature, METH_VARARGS, (char *)"agc_cc_sptr_output_signature(agc_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"agc_cc_sptr_unique_id", _wrap_agc_cc_sptr_unique_id, METH_VARARGS, (char *)"agc_cc_sptr_unique_id(agc_cc_sptr self) -> long"},
	 { (char *)"agc_cc_sptr_to_basic_block", _wrap_agc_cc_sptr_to_basic_block, METH_VARARGS, (char *)"agc_cc_sptr_to_basic_block(agc_cc_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"agc_cc_sptr_check_topology", (PyCFunction) _wrap_agc_cc_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_sptr_check_topology(agc_cc_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"agc_cc_sptr_alias", _wrap_agc_cc_sptr_alias, METH_VARARGS, (char *)"agc_cc_sptr_alias(agc_cc_sptr self) -> string"},
	 { (char *)"agc_cc_sptr_set_block_alias", (PyCFunction) _wrap_agc_cc_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_sptr_set_block_alias(agc_cc_sptr self, string name)"},
	 { (char *)"agc_cc_sptr__post", (PyCFunction) _wrap_agc_cc_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"agc_cc_sptr__post(agc_cc_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"agc_cc_sptr_message_ports_in", _wrap_agc_cc_sptr_message_ports_in, METH_VARARGS, (char *)"agc_cc_sptr_message_ports_in(agc_cc_sptr self) -> pmt_t"},
	 { (char *)"agc_cc_sptr_message_ports_out", _wrap_agc_cc_sptr_message_ports_out, METH_VARARGS, (char *)"agc_cc_sptr_message_ports_out(agc_cc_sptr self) -> pmt_t"},
	 { (char *)"agc_cc_sptr_swigregister", agc_cc_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_agc_ff_sptr", _wrap_new_agc_ff_sptr, METH_VARARGS, (char *)"\n"
		"agc_ff_sptr()\n"
		"new_agc_ff_sptr(agc_ff p) -> agc_ff_sptr\n"
		""},
	 { (char *)"agc_ff_sptr___deref__", _wrap_agc_ff_sptr___deref__, METH_VARARGS, (char *)"agc_ff_sptr___deref__(agc_ff_sptr self) -> agc_ff"},
	 { (char *)"delete_agc_ff_sptr", _wrap_delete_agc_ff_sptr, METH_VARARGS, (char *)"delete_agc_ff_sptr(agc_ff_sptr self)"},
	 { (char *)"agc_ff_sptr_make", (PyCFunction) _wrap_agc_ff_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"agc_ff_sptr_make(agc_ff_sptr self, float rate = 1e-4, float reference = 1.0, \n"
		"    float gain = 1.0, float max_gain = 0.0) -> sptr\n"
		""},
	 { (char *)"agc_ff_sptr_rate", _wrap_agc_ff_sptr_rate, METH_VARARGS, (char *)"agc_ff_sptr_rate(agc_ff_sptr self) -> float"},
	 { (char *)"agc_ff_sptr_reference", _wrap_agc_ff_sptr_reference, METH_VARARGS, (char *)"agc_ff_sptr_reference(agc_ff_sptr self) -> float"},
	 { (char *)"agc_ff_sptr_gain", _wrap_agc_ff_sptr_gain, METH_VARARGS, (char *)"agc_ff_sptr_gain(agc_ff_sptr self) -> float"},
	 { (char *)"agc_ff_sptr_max_gain", _wrap_agc_ff_sptr_max_gain, METH_VARARGS, (char *)"agc_ff_sptr_max_gain(agc_ff_sptr self) -> float"},
	 { (char *)"agc_ff_sptr_set_rate", (PyCFunction) _wrap_agc_ff_sptr_set_rate, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_sptr_set_rate(agc_ff_sptr self, float rate)"},
	 { (char *)"agc_ff_sptr_set_reference", (PyCFunction) _wrap_agc_ff_sptr_set_reference, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_sptr_set_reference(agc_ff_sptr self, float reference)"},
	 { (char *)"agc_ff_sptr_set_gain", (PyCFunction) _wrap_agc_ff_sptr_set_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_sptr_set_gain(agc_ff_sptr self, float gain)"},
	 { (char *)"agc_ff_sptr_set_max_gain", (PyCFunction) _wrap_agc_ff_sptr_set_max_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_sptr_set_max_gain(agc_ff_sptr self, float max_gain)"},
	 { (char *)"agc_ff_sptr_history", _wrap_agc_ff_sptr_history, METH_VARARGS, (char *)"agc_ff_sptr_history(agc_ff_sptr self) -> unsigned int"},
	 { (char *)"agc_ff_sptr_output_multiple", _wrap_agc_ff_sptr_output_multiple, METH_VARARGS, (char *)"agc_ff_sptr_output_multiple(agc_ff_sptr self) -> int"},
	 { (char *)"agc_ff_sptr_relative_rate", _wrap_agc_ff_sptr_relative_rate, METH_VARARGS, (char *)"agc_ff_sptr_relative_rate(agc_ff_sptr self) -> double"},
	 { (char *)"agc_ff_sptr_start", _wrap_agc_ff_sptr_start, METH_VARARGS, (char *)"agc_ff_sptr_start(agc_ff_sptr self) -> bool"},
	 { (char *)"agc_ff_sptr_stop", _wrap_agc_ff_sptr_stop, METH_VARARGS, (char *)"agc_ff_sptr_stop(agc_ff_sptr self) -> bool"},
	 { (char *)"agc_ff_sptr_nitems_read", (PyCFunction) _wrap_agc_ff_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_sptr_nitems_read(agc_ff_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"agc_ff_sptr_nitems_written", (PyCFunction) _wrap_agc_ff_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_sptr_nitems_written(agc_ff_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"agc_ff_sptr_max_noutput_items", _wrap_agc_ff_sptr_max_noutput_items, METH_VARARGS, (char *)"agc_ff_sptr_max_noutput_items(agc_ff_sptr self) -> int"},
	 { (char *)"agc_ff_sptr_set_max_noutput_items", (PyCFunction) _wrap_agc_ff_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_sptr_set_max_noutput_items(agc_ff_sptr self, int m)"},
	 { (char *)"agc_ff_sptr_unset_max_noutput_items", _wrap_agc_ff_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"agc_ff_sptr_unset_max_noutput_items(agc_ff_sptr self)"},
	 { (char *)"agc_ff_sptr_is_set_max_noutput_items", _wrap_agc_ff_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"agc_ff_sptr_is_set_max_noutput_items(agc_ff_sptr self) -> bool"},
	 { (char *)"agc_ff_sptr_max_output_buffer", (PyCFunction) _wrap_agc_ff_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_sptr_max_output_buffer(agc_ff_sptr self, int i) -> long"},
	 { (char *)"agc_ff_sptr_set_max_output_buffer", _wrap_agc_ff_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"agc_ff_sptr_set_max_output_buffer(agc_ff_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"agc_ff_sptr_min_output_buffer", (PyCFunction) _wrap_agc_ff_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_sptr_min_output_buffer(agc_ff_sptr self, int i) -> long"},
	 { (char *)"agc_ff_sptr_set_min_output_buffer", _wrap_agc_ff_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"agc_ff_sptr_set_min_output_buffer(agc_ff_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"agc_ff_sptr_detail", _wrap_agc_ff_sptr_detail, METH_VARARGS, (char *)"agc_ff_sptr_detail(agc_ff_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"agc_ff_sptr_set_detail", (PyCFunction) _wrap_agc_ff_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_sptr_set_detail(agc_ff_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"agc_ff_sptr_name", _wrap_agc_ff_sptr_name, METH_VARARGS, (char *)"agc_ff_sptr_name(agc_ff_sptr self) -> string"},
	 { (char *)"agc_ff_sptr_symbol_name", _wrap_agc_ff_sptr_symbol_name, METH_VARARGS, (char *)"agc_ff_sptr_symbol_name(agc_ff_sptr self) -> string"},
	 { (char *)"agc_ff_sptr_input_signature", _wrap_agc_ff_sptr_input_signature, METH_VARARGS, (char *)"agc_ff_sptr_input_signature(agc_ff_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"agc_ff_sptr_output_signature", _wrap_agc_ff_sptr_output_signature, METH_VARARGS, (char *)"agc_ff_sptr_output_signature(agc_ff_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"agc_ff_sptr_unique_id", _wrap_agc_ff_sptr_unique_id, METH_VARARGS, (char *)"agc_ff_sptr_unique_id(agc_ff_sptr self) -> long"},
	 { (char *)"agc_ff_sptr_to_basic_block", _wrap_agc_ff_sptr_to_basic_block, METH_VARARGS, (char *)"agc_ff_sptr_to_basic_block(agc_ff_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"agc_ff_sptr_check_topology", (PyCFunction) _wrap_agc_ff_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_sptr_check_topology(agc_ff_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"agc_ff_sptr_alias", _wrap_agc_ff_sptr_alias, METH_VARARGS, (char *)"agc_ff_sptr_alias(agc_ff_sptr self) -> string"},
	 { (char *)"agc_ff_sptr_set_block_alias", (PyCFunction) _wrap_agc_ff_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_sptr_set_block_alias(agc_ff_sptr self, string name)"},
	 { (char *)"agc_ff_sptr__post", (PyCFunction) _wrap_agc_ff_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"agc_ff_sptr__post(agc_ff_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"agc_ff_sptr_message_ports_in", _wrap_agc_ff_sptr_message_ports_in, METH_VARARGS, (char *)"agc_ff_sptr_message_ports_in(agc_ff_sptr self) -> pmt_t"},
	 { (char *)"agc_ff_sptr_message_ports_out", _wrap_agc_ff_sptr_message_ports_out, METH_VARARGS, (char *)"agc_ff_sptr_message_ports_out(agc_ff_sptr self) -> pmt_t"},
	 { (char *)"agc_ff_sptr_swigregister", agc_ff_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_agc2_cc_sptr", _wrap_new_agc2_cc_sptr, METH_VARARGS, (char *)"\n"
		"agc2_cc_sptr()\n"
		"new_agc2_cc_sptr(agc2_cc p) -> agc2_cc_sptr\n"
		""},
	 { (char *)"agc2_cc_sptr___deref__", _wrap_agc2_cc_sptr___deref__, METH_VARARGS, (char *)"agc2_cc_sptr___deref__(agc2_cc_sptr self) -> agc2_cc"},
	 { (char *)"delete_agc2_cc_sptr", _wrap_delete_agc2_cc_sptr, METH_VARARGS, (char *)"delete_agc2_cc_sptr(agc2_cc_sptr self)"},
	 { (char *)"agc2_cc_sptr_make", (PyCFunction) _wrap_agc2_cc_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"agc2_cc_sptr_make(agc2_cc_sptr self, float attack_rate = 1e-1, float decay_rate = 1e-2, \n"
		"    float reference = 1.0, float gain = 1.0, \n"
		"    float max_gain = 0.0) -> sptr\n"
		""},
	 { (char *)"agc2_cc_sptr_attack_rate", _wrap_agc2_cc_sptr_attack_rate, METH_VARARGS, (char *)"agc2_cc_sptr_attack_rate(agc2_cc_sptr self) -> float"},
	 { (char *)"agc2_cc_sptr_decay_rate", _wrap_agc2_cc_sptr_decay_rate, METH_VARARGS, (char *)"agc2_cc_sptr_decay_rate(agc2_cc_sptr self) -> float"},
	 { (char *)"agc2_cc_sptr_reference", _wrap_agc2_cc_sptr_reference, METH_VARARGS, (char *)"agc2_cc_sptr_reference(agc2_cc_sptr self) -> float"},
	 { (char *)"agc2_cc_sptr_gain", _wrap_agc2_cc_sptr_gain, METH_VARARGS, (char *)"agc2_cc_sptr_gain(agc2_cc_sptr self) -> float"},
	 { (char *)"agc2_cc_sptr_max_gain", _wrap_agc2_cc_sptr_max_gain, METH_VARARGS, (char *)"agc2_cc_sptr_max_gain(agc2_cc_sptr self) -> float"},
	 { (char *)"agc2_cc_sptr_set_attack_rate", (PyCFunction) _wrap_agc2_cc_sptr_set_attack_rate, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr_set_attack_rate(agc2_cc_sptr self, float rate)"},
	 { (char *)"agc2_cc_sptr_set_decay_rate", (PyCFunction) _wrap_agc2_cc_sptr_set_decay_rate, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr_set_decay_rate(agc2_cc_sptr self, float rate)"},
	 { (char *)"agc2_cc_sptr_set_reference", (PyCFunction) _wrap_agc2_cc_sptr_set_reference, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr_set_reference(agc2_cc_sptr self, float reference)"},
	 { (char *)"agc2_cc_sptr_set_gain", (PyCFunction) _wrap_agc2_cc_sptr_set_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr_set_gain(agc2_cc_sptr self, float gain)"},
	 { (char *)"agc2_cc_sptr_set_max_gain", (PyCFunction) _wrap_agc2_cc_sptr_set_max_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr_set_max_gain(agc2_cc_sptr self, float max_gain)"},
	 { (char *)"agc2_cc_sptr_history", _wrap_agc2_cc_sptr_history, METH_VARARGS, (char *)"agc2_cc_sptr_history(agc2_cc_sptr self) -> unsigned int"},
	 { (char *)"agc2_cc_sptr_output_multiple", _wrap_agc2_cc_sptr_output_multiple, METH_VARARGS, (char *)"agc2_cc_sptr_output_multiple(agc2_cc_sptr self) -> int"},
	 { (char *)"agc2_cc_sptr_relative_rate", _wrap_agc2_cc_sptr_relative_rate, METH_VARARGS, (char *)"agc2_cc_sptr_relative_rate(agc2_cc_sptr self) -> double"},
	 { (char *)"agc2_cc_sptr_start", _wrap_agc2_cc_sptr_start, METH_VARARGS, (char *)"agc2_cc_sptr_start(agc2_cc_sptr self) -> bool"},
	 { (char *)"agc2_cc_sptr_stop", _wrap_agc2_cc_sptr_stop, METH_VARARGS, (char *)"agc2_cc_sptr_stop(agc2_cc_sptr self) -> bool"},
	 { (char *)"agc2_cc_sptr_nitems_read", (PyCFunction) _wrap_agc2_cc_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr_nitems_read(agc2_cc_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"agc2_cc_sptr_nitems_written", (PyCFunction) _wrap_agc2_cc_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr_nitems_written(agc2_cc_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"agc2_cc_sptr_max_noutput_items", _wrap_agc2_cc_sptr_max_noutput_items, METH_VARARGS, (char *)"agc2_cc_sptr_max_noutput_items(agc2_cc_sptr self) -> int"},
	 { (char *)"agc2_cc_sptr_set_max_noutput_items", (PyCFunction) _wrap_agc2_cc_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr_set_max_noutput_items(agc2_cc_sptr self, int m)"},
	 { (char *)"agc2_cc_sptr_unset_max_noutput_items", _wrap_agc2_cc_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"agc2_cc_sptr_unset_max_noutput_items(agc2_cc_sptr self)"},
	 { (char *)"agc2_cc_sptr_is_set_max_noutput_items", _wrap_agc2_cc_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"agc2_cc_sptr_is_set_max_noutput_items(agc2_cc_sptr self) -> bool"},
	 { (char *)"agc2_cc_sptr_max_output_buffer", (PyCFunction) _wrap_agc2_cc_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr_max_output_buffer(agc2_cc_sptr self, int i) -> long"},
	 { (char *)"agc2_cc_sptr_set_max_output_buffer", _wrap_agc2_cc_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"agc2_cc_sptr_set_max_output_buffer(agc2_cc_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"agc2_cc_sptr_min_output_buffer", (PyCFunction) _wrap_agc2_cc_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr_min_output_buffer(agc2_cc_sptr self, int i) -> long"},
	 { (char *)"agc2_cc_sptr_set_min_output_buffer", _wrap_agc2_cc_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"agc2_cc_sptr_set_min_output_buffer(agc2_cc_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"agc2_cc_sptr_detail", _wrap_agc2_cc_sptr_detail, METH_VARARGS, (char *)"agc2_cc_sptr_detail(agc2_cc_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"agc2_cc_sptr_set_detail", (PyCFunction) _wrap_agc2_cc_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr_set_detail(agc2_cc_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"agc2_cc_sptr_name", _wrap_agc2_cc_sptr_name, METH_VARARGS, (char *)"agc2_cc_sptr_name(agc2_cc_sptr self) -> string"},
	 { (char *)"agc2_cc_sptr_symbol_name", _wrap_agc2_cc_sptr_symbol_name, METH_VARARGS, (char *)"agc2_cc_sptr_symbol_name(agc2_cc_sptr self) -> string"},
	 { (char *)"agc2_cc_sptr_input_signature", _wrap_agc2_cc_sptr_input_signature, METH_VARARGS, (char *)"agc2_cc_sptr_input_signature(agc2_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"agc2_cc_sptr_output_signature", _wrap_agc2_cc_sptr_output_signature, METH_VARARGS, (char *)"agc2_cc_sptr_output_signature(agc2_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"agc2_cc_sptr_unique_id", _wrap_agc2_cc_sptr_unique_id, METH_VARARGS, (char *)"agc2_cc_sptr_unique_id(agc2_cc_sptr self) -> long"},
	 { (char *)"agc2_cc_sptr_to_basic_block", _wrap_agc2_cc_sptr_to_basic_block, METH_VARARGS, (char *)"agc2_cc_sptr_to_basic_block(agc2_cc_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"agc2_cc_sptr_check_topology", (PyCFunction) _wrap_agc2_cc_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr_check_topology(agc2_cc_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"agc2_cc_sptr_alias", _wrap_agc2_cc_sptr_alias, METH_VARARGS, (char *)"agc2_cc_sptr_alias(agc2_cc_sptr self) -> string"},
	 { (char *)"agc2_cc_sptr_set_block_alias", (PyCFunction) _wrap_agc2_cc_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr_set_block_alias(agc2_cc_sptr self, string name)"},
	 { (char *)"agc2_cc_sptr__post", (PyCFunction) _wrap_agc2_cc_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_cc_sptr__post(agc2_cc_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"agc2_cc_sptr_message_ports_in", _wrap_agc2_cc_sptr_message_ports_in, METH_VARARGS, (char *)"agc2_cc_sptr_message_ports_in(agc2_cc_sptr self) -> pmt_t"},
	 { (char *)"agc2_cc_sptr_message_ports_out", _wrap_agc2_cc_sptr_message_ports_out, METH_VARARGS, (char *)"agc2_cc_sptr_message_ports_out(agc2_cc_sptr self) -> pmt_t"},
	 { (char *)"agc2_cc_sptr_swigregister", agc2_cc_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_agc2_ff_sptr", _wrap_new_agc2_ff_sptr, METH_VARARGS, (char *)"\n"
		"agc2_ff_sptr()\n"
		"new_agc2_ff_sptr(agc2_ff p) -> agc2_ff_sptr\n"
		""},
	 { (char *)"agc2_ff_sptr___deref__", _wrap_agc2_ff_sptr___deref__, METH_VARARGS, (char *)"agc2_ff_sptr___deref__(agc2_ff_sptr self) -> agc2_ff"},
	 { (char *)"delete_agc2_ff_sptr", _wrap_delete_agc2_ff_sptr, METH_VARARGS, (char *)"delete_agc2_ff_sptr(agc2_ff_sptr self)"},
	 { (char *)"agc2_ff_sptr_make", (PyCFunction) _wrap_agc2_ff_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"agc2_ff_sptr_make(agc2_ff_sptr self, float attack_rate = 1e-1, float decay_rate = 1e-2, \n"
		"    float reference = 1.0, float gain = 1.0, \n"
		"    float max_gain = 0.0) -> sptr\n"
		""},
	 { (char *)"agc2_ff_sptr_attack_rate", _wrap_agc2_ff_sptr_attack_rate, METH_VARARGS, (char *)"agc2_ff_sptr_attack_rate(agc2_ff_sptr self) -> float"},
	 { (char *)"agc2_ff_sptr_decay_rate", _wrap_agc2_ff_sptr_decay_rate, METH_VARARGS, (char *)"agc2_ff_sptr_decay_rate(agc2_ff_sptr self) -> float"},
	 { (char *)"agc2_ff_sptr_reference", _wrap_agc2_ff_sptr_reference, METH_VARARGS, (char *)"agc2_ff_sptr_reference(agc2_ff_sptr self) -> float"},
	 { (char *)"agc2_ff_sptr_gain", _wrap_agc2_ff_sptr_gain, METH_VARARGS, (char *)"agc2_ff_sptr_gain(agc2_ff_sptr self) -> float"},
	 { (char *)"agc2_ff_sptr_max_gain", _wrap_agc2_ff_sptr_max_gain, METH_VARARGS, (char *)"agc2_ff_sptr_max_gain(agc2_ff_sptr self) -> float"},
	 { (char *)"agc2_ff_sptr_set_attack_rate", (PyCFunction) _wrap_agc2_ff_sptr_set_attack_rate, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr_set_attack_rate(agc2_ff_sptr self, float rate)"},
	 { (char *)"agc2_ff_sptr_set_decay_rate", (PyCFunction) _wrap_agc2_ff_sptr_set_decay_rate, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr_set_decay_rate(agc2_ff_sptr self, float rate)"},
	 { (char *)"agc2_ff_sptr_set_reference", (PyCFunction) _wrap_agc2_ff_sptr_set_reference, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr_set_reference(agc2_ff_sptr self, float reference)"},
	 { (char *)"agc2_ff_sptr_set_gain", (PyCFunction) _wrap_agc2_ff_sptr_set_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr_set_gain(agc2_ff_sptr self, float gain)"},
	 { (char *)"agc2_ff_sptr_set_max_gain", (PyCFunction) _wrap_agc2_ff_sptr_set_max_gain, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr_set_max_gain(agc2_ff_sptr self, float max_gain)"},
	 { (char *)"agc2_ff_sptr_history", _wrap_agc2_ff_sptr_history, METH_VARARGS, (char *)"agc2_ff_sptr_history(agc2_ff_sptr self) -> unsigned int"},
	 { (char *)"agc2_ff_sptr_output_multiple", _wrap_agc2_ff_sptr_output_multiple, METH_VARARGS, (char *)"agc2_ff_sptr_output_multiple(agc2_ff_sptr self) -> int"},
	 { (char *)"agc2_ff_sptr_relative_rate", _wrap_agc2_ff_sptr_relative_rate, METH_VARARGS, (char *)"agc2_ff_sptr_relative_rate(agc2_ff_sptr self) -> double"},
	 { (char *)"agc2_ff_sptr_start", _wrap_agc2_ff_sptr_start, METH_VARARGS, (char *)"agc2_ff_sptr_start(agc2_ff_sptr self) -> bool"},
	 { (char *)"agc2_ff_sptr_stop", _wrap_agc2_ff_sptr_stop, METH_VARARGS, (char *)"agc2_ff_sptr_stop(agc2_ff_sptr self) -> bool"},
	 { (char *)"agc2_ff_sptr_nitems_read", (PyCFunction) _wrap_agc2_ff_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr_nitems_read(agc2_ff_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"agc2_ff_sptr_nitems_written", (PyCFunction) _wrap_agc2_ff_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr_nitems_written(agc2_ff_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"agc2_ff_sptr_max_noutput_items", _wrap_agc2_ff_sptr_max_noutput_items, METH_VARARGS, (char *)"agc2_ff_sptr_max_noutput_items(agc2_ff_sptr self) -> int"},
	 { (char *)"agc2_ff_sptr_set_max_noutput_items", (PyCFunction) _wrap_agc2_ff_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr_set_max_noutput_items(agc2_ff_sptr self, int m)"},
	 { (char *)"agc2_ff_sptr_unset_max_noutput_items", _wrap_agc2_ff_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"agc2_ff_sptr_unset_max_noutput_items(agc2_ff_sptr self)"},
	 { (char *)"agc2_ff_sptr_is_set_max_noutput_items", _wrap_agc2_ff_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"agc2_ff_sptr_is_set_max_noutput_items(agc2_ff_sptr self) -> bool"},
	 { (char *)"agc2_ff_sptr_max_output_buffer", (PyCFunction) _wrap_agc2_ff_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr_max_output_buffer(agc2_ff_sptr self, int i) -> long"},
	 { (char *)"agc2_ff_sptr_set_max_output_buffer", _wrap_agc2_ff_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"agc2_ff_sptr_set_max_output_buffer(agc2_ff_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"agc2_ff_sptr_min_output_buffer", (PyCFunction) _wrap_agc2_ff_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr_min_output_buffer(agc2_ff_sptr self, int i) -> long"},
	 { (char *)"agc2_ff_sptr_set_min_output_buffer", _wrap_agc2_ff_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"agc2_ff_sptr_set_min_output_buffer(agc2_ff_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"agc2_ff_sptr_detail", _wrap_agc2_ff_sptr_detail, METH_VARARGS, (char *)"agc2_ff_sptr_detail(agc2_ff_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"agc2_ff_sptr_set_detail", (PyCFunction) _wrap_agc2_ff_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr_set_detail(agc2_ff_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"agc2_ff_sptr_name", _wrap_agc2_ff_sptr_name, METH_VARARGS, (char *)"agc2_ff_sptr_name(agc2_ff_sptr self) -> string"},
	 { (char *)"agc2_ff_sptr_symbol_name", _wrap_agc2_ff_sptr_symbol_name, METH_VARARGS, (char *)"agc2_ff_sptr_symbol_name(agc2_ff_sptr self) -> string"},
	 { (char *)"agc2_ff_sptr_input_signature", _wrap_agc2_ff_sptr_input_signature, METH_VARARGS, (char *)"agc2_ff_sptr_input_signature(agc2_ff_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"agc2_ff_sptr_output_signature", _wrap_agc2_ff_sptr_output_signature, METH_VARARGS, (char *)"agc2_ff_sptr_output_signature(agc2_ff_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"agc2_ff_sptr_unique_id", _wrap_agc2_ff_sptr_unique_id, METH_VARARGS, (char *)"agc2_ff_sptr_unique_id(agc2_ff_sptr self) -> long"},
	 { (char *)"agc2_ff_sptr_to_basic_block", _wrap_agc2_ff_sptr_to_basic_block, METH_VARARGS, (char *)"agc2_ff_sptr_to_basic_block(agc2_ff_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"agc2_ff_sptr_check_topology", (PyCFunction) _wrap_agc2_ff_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr_check_topology(agc2_ff_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"agc2_ff_sptr_alias", _wrap_agc2_ff_sptr_alias, METH_VARARGS, (char *)"agc2_ff_sptr_alias(agc2_ff_sptr self) -> string"},
	 { (char *)"agc2_ff_sptr_set_block_alias", (PyCFunction) _wrap_agc2_ff_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr_set_block_alias(agc2_ff_sptr self, string name)"},
	 { (char *)"agc2_ff_sptr__post", (PyCFunction) _wrap_agc2_ff_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"agc2_ff_sptr__post(agc2_ff_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"agc2_ff_sptr_message_ports_in", _wrap_agc2_ff_sptr_message_ports_in, METH_VARARGS, (char *)"agc2_ff_sptr_message_ports_in(agc2_ff_sptr self) -> pmt_t"},
	 { (char *)"agc2_ff_sptr_message_ports_out", _wrap_agc2_ff_sptr_message_ports_out, METH_VARARGS, (char *)"agc2_ff_sptr_message_ports_out(agc2_ff_sptr self) -> pmt_t"},
	 { (char *)"agc2_ff_sptr_swigregister", agc2_ff_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_cpfsk_bc_sptr", _wrap_new_cpfsk_bc_sptr, METH_VARARGS, (char *)"\n"
		"cpfsk_bc_sptr()\n"
		"new_cpfsk_bc_sptr(cpfsk_bc p) -> cpfsk_bc_sptr\n"
		""},
	 { (char *)"cpfsk_bc_sptr___deref__", _wrap_cpfsk_bc_sptr___deref__, METH_VARARGS, (char *)"cpfsk_bc_sptr___deref__(cpfsk_bc_sptr self) -> cpfsk_bc"},
	 { (char *)"delete_cpfsk_bc_sptr", _wrap_delete_cpfsk_bc_sptr, METH_VARARGS, (char *)"delete_cpfsk_bc_sptr(cpfsk_bc_sptr self)"},
	 { (char *)"cpfsk_bc_sptr_make", (PyCFunction) _wrap_cpfsk_bc_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"cpfsk_bc_sptr_make(cpfsk_bc_sptr self, float k, float ampl, int samples_per_sym) -> sptr"},
	 { (char *)"cpfsk_bc_sptr_set_amplitude", (PyCFunction) _wrap_cpfsk_bc_sptr_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"cpfsk_bc_sptr_set_amplitude(cpfsk_bc_sptr self, float amplitude)"},
	 { (char *)"cpfsk_bc_sptr_amplitude", _wrap_cpfsk_bc_sptr_amplitude, METH_VARARGS, (char *)"cpfsk_bc_sptr_amplitude(cpfsk_bc_sptr self) -> float"},
	 { (char *)"cpfsk_bc_sptr_freq", _wrap_cpfsk_bc_sptr_freq, METH_VARARGS, (char *)"cpfsk_bc_sptr_freq(cpfsk_bc_sptr self) -> float"},
	 { (char *)"cpfsk_bc_sptr_phase", _wrap_cpfsk_bc_sptr_phase, METH_VARARGS, (char *)"cpfsk_bc_sptr_phase(cpfsk_bc_sptr self) -> float"},
	 { (char *)"cpfsk_bc_sptr_history", _wrap_cpfsk_bc_sptr_history, METH_VARARGS, (char *)"cpfsk_bc_sptr_history(cpfsk_bc_sptr self) -> unsigned int"},
	 { (char *)"cpfsk_bc_sptr_output_multiple", _wrap_cpfsk_bc_sptr_output_multiple, METH_VARARGS, (char *)"cpfsk_bc_sptr_output_multiple(cpfsk_bc_sptr self) -> int"},
	 { (char *)"cpfsk_bc_sptr_relative_rate", _wrap_cpfsk_bc_sptr_relative_rate, METH_VARARGS, (char *)"cpfsk_bc_sptr_relative_rate(cpfsk_bc_sptr self) -> double"},
	 { (char *)"cpfsk_bc_sptr_start", _wrap_cpfsk_bc_sptr_start, METH_VARARGS, (char *)"cpfsk_bc_sptr_start(cpfsk_bc_sptr self) -> bool"},
	 { (char *)"cpfsk_bc_sptr_stop", _wrap_cpfsk_bc_sptr_stop, METH_VARARGS, (char *)"cpfsk_bc_sptr_stop(cpfsk_bc_sptr self) -> bool"},
	 { (char *)"cpfsk_bc_sptr_nitems_read", (PyCFunction) _wrap_cpfsk_bc_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"cpfsk_bc_sptr_nitems_read(cpfsk_bc_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"cpfsk_bc_sptr_nitems_written", (PyCFunction) _wrap_cpfsk_bc_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"cpfsk_bc_sptr_nitems_written(cpfsk_bc_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"cpfsk_bc_sptr_max_noutput_items", _wrap_cpfsk_bc_sptr_max_noutput_items, METH_VARARGS, (char *)"cpfsk_bc_sptr_max_noutput_items(cpfsk_bc_sptr self) -> int"},
	 { (char *)"cpfsk_bc_sptr_set_max_noutput_items", (PyCFunction) _wrap_cpfsk_bc_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"cpfsk_bc_sptr_set_max_noutput_items(cpfsk_bc_sptr self, int m)"},
	 { (char *)"cpfsk_bc_sptr_unset_max_noutput_items", _wrap_cpfsk_bc_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"cpfsk_bc_sptr_unset_max_noutput_items(cpfsk_bc_sptr self)"},
	 { (char *)"cpfsk_bc_sptr_is_set_max_noutput_items", _wrap_cpfsk_bc_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"cpfsk_bc_sptr_is_set_max_noutput_items(cpfsk_bc_sptr self) -> bool"},
	 { (char *)"cpfsk_bc_sptr_max_output_buffer", (PyCFunction) _wrap_cpfsk_bc_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"cpfsk_bc_sptr_max_output_buffer(cpfsk_bc_sptr self, int i) -> long"},
	 { (char *)"cpfsk_bc_sptr_set_max_output_buffer", _wrap_cpfsk_bc_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"cpfsk_bc_sptr_set_max_output_buffer(cpfsk_bc_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"cpfsk_bc_sptr_min_output_buffer", (PyCFunction) _wrap_cpfsk_bc_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"cpfsk_bc_sptr_min_output_buffer(cpfsk_bc_sptr self, int i) -> long"},
	 { (char *)"cpfsk_bc_sptr_set_min_output_buffer", _wrap_cpfsk_bc_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"cpfsk_bc_sptr_set_min_output_buffer(cpfsk_bc_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"cpfsk_bc_sptr_detail", _wrap_cpfsk_bc_sptr_detail, METH_VARARGS, (char *)"cpfsk_bc_sptr_detail(cpfsk_bc_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"cpfsk_bc_sptr_set_detail", (PyCFunction) _wrap_cpfsk_bc_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"cpfsk_bc_sptr_set_detail(cpfsk_bc_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"cpfsk_bc_sptr_name", _wrap_cpfsk_bc_sptr_name, METH_VARARGS, (char *)"cpfsk_bc_sptr_name(cpfsk_bc_sptr self) -> string"},
	 { (char *)"cpfsk_bc_sptr_symbol_name", _wrap_cpfsk_bc_sptr_symbol_name, METH_VARARGS, (char *)"cpfsk_bc_sptr_symbol_name(cpfsk_bc_sptr self) -> string"},
	 { (char *)"cpfsk_bc_sptr_input_signature", _wrap_cpfsk_bc_sptr_input_signature, METH_VARARGS, (char *)"cpfsk_bc_sptr_input_signature(cpfsk_bc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"cpfsk_bc_sptr_output_signature", _wrap_cpfsk_bc_sptr_output_signature, METH_VARARGS, (char *)"cpfsk_bc_sptr_output_signature(cpfsk_bc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"cpfsk_bc_sptr_unique_id", _wrap_cpfsk_bc_sptr_unique_id, METH_VARARGS, (char *)"cpfsk_bc_sptr_unique_id(cpfsk_bc_sptr self) -> long"},
	 { (char *)"cpfsk_bc_sptr_to_basic_block", _wrap_cpfsk_bc_sptr_to_basic_block, METH_VARARGS, (char *)"cpfsk_bc_sptr_to_basic_block(cpfsk_bc_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"cpfsk_bc_sptr_check_topology", (PyCFunction) _wrap_cpfsk_bc_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"cpfsk_bc_sptr_check_topology(cpfsk_bc_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"cpfsk_bc_sptr_alias", _wrap_cpfsk_bc_sptr_alias, METH_VARARGS, (char *)"cpfsk_bc_sptr_alias(cpfsk_bc_sptr self) -> string"},
	 { (char *)"cpfsk_bc_sptr_set_block_alias", (PyCFunction) _wrap_cpfsk_bc_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"cpfsk_bc_sptr_set_block_alias(cpfsk_bc_sptr self, string name)"},
	 { (char *)"cpfsk_bc_sptr__post", (PyCFunction) _wrap_cpfsk_bc_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"cpfsk_bc_sptr__post(cpfsk_bc_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"cpfsk_bc_sptr_message_ports_in", _wrap_cpfsk_bc_sptr_message_ports_in, METH_VARARGS, (char *)"cpfsk_bc_sptr_message_ports_in(cpfsk_bc_sptr self) -> pmt_t"},
	 { (char *)"cpfsk_bc_sptr_message_ports_out", _wrap_cpfsk_bc_sptr_message_ports_out, METH_VARARGS, (char *)"cpfsk_bc_sptr_message_ports_out(cpfsk_bc_sptr self) -> pmt_t"},
	 { (char *)"cpfsk_bc_sptr_swigregister", cpfsk_bc_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ctcss_squelch_ff_sptr", _wrap_new_ctcss_squelch_ff_sptr, METH_VARARGS, (char *)"\n"
		"ctcss_squelch_ff_sptr()\n"
		"new_ctcss_squelch_ff_sptr(ctcss_squelch_ff p) -> ctcss_squelch_ff_sptr\n"
		""},
	 { (char *)"ctcss_squelch_ff_sptr___deref__", _wrap_ctcss_squelch_ff_sptr___deref__, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr___deref__(ctcss_squelch_ff_sptr self) -> ctcss_squelch_ff"},
	 { (char *)"delete_ctcss_squelch_ff_sptr", _wrap_delete_ctcss_squelch_ff_sptr, METH_VARARGS, (char *)"delete_ctcss_squelch_ff_sptr(ctcss_squelch_ff_sptr self)"},
	 { (char *)"ctcss_squelch_ff_sptr_make", (PyCFunction) _wrap_ctcss_squelch_ff_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ctcss_squelch_ff_sptr_make(ctcss_squelch_ff_sptr self, int rate, float freq, float level, \n"
		"    int len, int ramp, bool gate) -> sptr\n"
		""},
	 { (char *)"ctcss_squelch_ff_sptr_squelch_range", _wrap_ctcss_squelch_ff_sptr_squelch_range, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_squelch_range(ctcss_squelch_ff_sptr self) -> __dummy_4__"},
	 { (char *)"ctcss_squelch_ff_sptr_level", _wrap_ctcss_squelch_ff_sptr_level, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_level(ctcss_squelch_ff_sptr self) -> float"},
	 { (char *)"ctcss_squelch_ff_sptr_set_level", (PyCFunction) _wrap_ctcss_squelch_ff_sptr_set_level, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_sptr_set_level(ctcss_squelch_ff_sptr self, float level)"},
	 { (char *)"ctcss_squelch_ff_sptr_len", _wrap_ctcss_squelch_ff_sptr_len, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_len(ctcss_squelch_ff_sptr self) -> int"},
	 { (char *)"ctcss_squelch_ff_sptr_ramp", _wrap_ctcss_squelch_ff_sptr_ramp, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_ramp(ctcss_squelch_ff_sptr self) -> int"},
	 { (char *)"ctcss_squelch_ff_sptr_set_ramp", (PyCFunction) _wrap_ctcss_squelch_ff_sptr_set_ramp, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_sptr_set_ramp(ctcss_squelch_ff_sptr self, int ramp)"},
	 { (char *)"ctcss_squelch_ff_sptr_gate", _wrap_ctcss_squelch_ff_sptr_gate, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_gate(ctcss_squelch_ff_sptr self) -> bool"},
	 { (char *)"ctcss_squelch_ff_sptr_set_gate", (PyCFunction) _wrap_ctcss_squelch_ff_sptr_set_gate, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_sptr_set_gate(ctcss_squelch_ff_sptr self, bool gate)"},
	 { (char *)"ctcss_squelch_ff_sptr_unmuted", _wrap_ctcss_squelch_ff_sptr_unmuted, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_unmuted(ctcss_squelch_ff_sptr self) -> bool"},
	 { (char *)"ctcss_squelch_ff_sptr_history", _wrap_ctcss_squelch_ff_sptr_history, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_history(ctcss_squelch_ff_sptr self) -> unsigned int"},
	 { (char *)"ctcss_squelch_ff_sptr_output_multiple", _wrap_ctcss_squelch_ff_sptr_output_multiple, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_output_multiple(ctcss_squelch_ff_sptr self) -> int"},
	 { (char *)"ctcss_squelch_ff_sptr_relative_rate", _wrap_ctcss_squelch_ff_sptr_relative_rate, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_relative_rate(ctcss_squelch_ff_sptr self) -> double"},
	 { (char *)"ctcss_squelch_ff_sptr_start", _wrap_ctcss_squelch_ff_sptr_start, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_start(ctcss_squelch_ff_sptr self) -> bool"},
	 { (char *)"ctcss_squelch_ff_sptr_stop", _wrap_ctcss_squelch_ff_sptr_stop, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_stop(ctcss_squelch_ff_sptr self) -> bool"},
	 { (char *)"ctcss_squelch_ff_sptr_nitems_read", (PyCFunction) _wrap_ctcss_squelch_ff_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_sptr_nitems_read(ctcss_squelch_ff_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"ctcss_squelch_ff_sptr_nitems_written", (PyCFunction) _wrap_ctcss_squelch_ff_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_sptr_nitems_written(ctcss_squelch_ff_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"ctcss_squelch_ff_sptr_max_noutput_items", _wrap_ctcss_squelch_ff_sptr_max_noutput_items, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_max_noutput_items(ctcss_squelch_ff_sptr self) -> int"},
	 { (char *)"ctcss_squelch_ff_sptr_set_max_noutput_items", (PyCFunction) _wrap_ctcss_squelch_ff_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_sptr_set_max_noutput_items(ctcss_squelch_ff_sptr self, int m)"},
	 { (char *)"ctcss_squelch_ff_sptr_unset_max_noutput_items", _wrap_ctcss_squelch_ff_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_unset_max_noutput_items(ctcss_squelch_ff_sptr self)"},
	 { (char *)"ctcss_squelch_ff_sptr_is_set_max_noutput_items", _wrap_ctcss_squelch_ff_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_is_set_max_noutput_items(ctcss_squelch_ff_sptr self) -> bool"},
	 { (char *)"ctcss_squelch_ff_sptr_max_output_buffer", (PyCFunction) _wrap_ctcss_squelch_ff_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_sptr_max_output_buffer(ctcss_squelch_ff_sptr self, int i) -> long"},
	 { (char *)"ctcss_squelch_ff_sptr_set_max_output_buffer", _wrap_ctcss_squelch_ff_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"ctcss_squelch_ff_sptr_set_max_output_buffer(ctcss_squelch_ff_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"ctcss_squelch_ff_sptr_min_output_buffer", (PyCFunction) _wrap_ctcss_squelch_ff_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_sptr_min_output_buffer(ctcss_squelch_ff_sptr self, int i) -> long"},
	 { (char *)"ctcss_squelch_ff_sptr_set_min_output_buffer", _wrap_ctcss_squelch_ff_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"ctcss_squelch_ff_sptr_set_min_output_buffer(ctcss_squelch_ff_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"ctcss_squelch_ff_sptr_detail", _wrap_ctcss_squelch_ff_sptr_detail, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_detail(ctcss_squelch_ff_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"ctcss_squelch_ff_sptr_set_detail", (PyCFunction) _wrap_ctcss_squelch_ff_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_sptr_set_detail(ctcss_squelch_ff_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"ctcss_squelch_ff_sptr_name", _wrap_ctcss_squelch_ff_sptr_name, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_name(ctcss_squelch_ff_sptr self) -> string"},
	 { (char *)"ctcss_squelch_ff_sptr_symbol_name", _wrap_ctcss_squelch_ff_sptr_symbol_name, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_symbol_name(ctcss_squelch_ff_sptr self) -> string"},
	 { (char *)"ctcss_squelch_ff_sptr_input_signature", _wrap_ctcss_squelch_ff_sptr_input_signature, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_input_signature(ctcss_squelch_ff_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"ctcss_squelch_ff_sptr_output_signature", _wrap_ctcss_squelch_ff_sptr_output_signature, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_output_signature(ctcss_squelch_ff_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"ctcss_squelch_ff_sptr_unique_id", _wrap_ctcss_squelch_ff_sptr_unique_id, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_unique_id(ctcss_squelch_ff_sptr self) -> long"},
	 { (char *)"ctcss_squelch_ff_sptr_to_basic_block", _wrap_ctcss_squelch_ff_sptr_to_basic_block, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_to_basic_block(ctcss_squelch_ff_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"ctcss_squelch_ff_sptr_check_topology", (PyCFunction) _wrap_ctcss_squelch_ff_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_sptr_check_topology(ctcss_squelch_ff_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"ctcss_squelch_ff_sptr_alias", _wrap_ctcss_squelch_ff_sptr_alias, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_alias(ctcss_squelch_ff_sptr self) -> string"},
	 { (char *)"ctcss_squelch_ff_sptr_set_block_alias", (PyCFunction) _wrap_ctcss_squelch_ff_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_sptr_set_block_alias(ctcss_squelch_ff_sptr self, string name)"},
	 { (char *)"ctcss_squelch_ff_sptr__post", (PyCFunction) _wrap_ctcss_squelch_ff_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"ctcss_squelch_ff_sptr__post(ctcss_squelch_ff_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"ctcss_squelch_ff_sptr_message_ports_in", _wrap_ctcss_squelch_ff_sptr_message_ports_in, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_message_ports_in(ctcss_squelch_ff_sptr self) -> pmt_t"},
	 { (char *)"ctcss_squelch_ff_sptr_message_ports_out", _wrap_ctcss_squelch_ff_sptr_message_ports_out, METH_VARARGS, (char *)"ctcss_squelch_ff_sptr_message_ports_out(ctcss_squelch_ff_sptr self) -> pmt_t"},
	 { (char *)"ctcss_squelch_ff_sptr_swigregister", ctcss_squelch_ff_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_dpll_bb_sptr", _wrap_new_dpll_bb_sptr, METH_VARARGS, (char *)"\n"
		"dpll_bb_sptr()\n"
		"new_dpll_bb_sptr(dpll_bb p) -> dpll_bb_sptr\n"
		""},
	 { (char *)"dpll_bb_sptr___deref__", _wrap_dpll_bb_sptr___deref__, METH_VARARGS, (char *)"dpll_bb_sptr___deref__(dpll_bb_sptr self) -> dpll_bb"},
	 { (char *)"delete_dpll_bb_sptr", _wrap_delete_dpll_bb_sptr, METH_VARARGS, (char *)"delete_dpll_bb_sptr(dpll_bb_sptr self)"},
	 { (char *)"dpll_bb_sptr_make", (PyCFunction) _wrap_dpll_bb_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_sptr_make(dpll_bb_sptr self, float period, float gain) -> sptr"},
	 { (char *)"dpll_bb_sptr_set_gain", (PyCFunction) _wrap_dpll_bb_sptr_set_gain, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_sptr_set_gain(dpll_bb_sptr self, float gain)"},
	 { (char *)"dpll_bb_sptr_set_decision_threshold", (PyCFunction) _wrap_dpll_bb_sptr_set_decision_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_sptr_set_decision_threshold(dpll_bb_sptr self, float thresh)"},
	 { (char *)"dpll_bb_sptr_gain", _wrap_dpll_bb_sptr_gain, METH_VARARGS, (char *)"dpll_bb_sptr_gain(dpll_bb_sptr self) -> float"},
	 { (char *)"dpll_bb_sptr_freq", _wrap_dpll_bb_sptr_freq, METH_VARARGS, (char *)"dpll_bb_sptr_freq(dpll_bb_sptr self) -> float"},
	 { (char *)"dpll_bb_sptr_phase", _wrap_dpll_bb_sptr_phase, METH_VARARGS, (char *)"dpll_bb_sptr_phase(dpll_bb_sptr self) -> float"},
	 { (char *)"dpll_bb_sptr_decision_threshold", _wrap_dpll_bb_sptr_decision_threshold, METH_VARARGS, (char *)"dpll_bb_sptr_decision_threshold(dpll_bb_sptr self) -> float"},
	 { (char *)"dpll_bb_sptr_history", _wrap_dpll_bb_sptr_history, METH_VARARGS, (char *)"dpll_bb_sptr_history(dpll_bb_sptr self) -> unsigned int"},
	 { (char *)"dpll_bb_sptr_output_multiple", _wrap_dpll_bb_sptr_output_multiple, METH_VARARGS, (char *)"dpll_bb_sptr_output_multiple(dpll_bb_sptr self) -> int"},
	 { (char *)"dpll_bb_sptr_relative_rate", _wrap_dpll_bb_sptr_relative_rate, METH_VARARGS, (char *)"dpll_bb_sptr_relative_rate(dpll_bb_sptr self) -> double"},
	 { (char *)"dpll_bb_sptr_start", _wrap_dpll_bb_sptr_start, METH_VARARGS, (char *)"dpll_bb_sptr_start(dpll_bb_sptr self) -> bool"},
	 { (char *)"dpll_bb_sptr_stop", _wrap_dpll_bb_sptr_stop, METH_VARARGS, (char *)"dpll_bb_sptr_stop(dpll_bb_sptr self) -> bool"},
	 { (char *)"dpll_bb_sptr_nitems_read", (PyCFunction) _wrap_dpll_bb_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_sptr_nitems_read(dpll_bb_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"dpll_bb_sptr_nitems_written", (PyCFunction) _wrap_dpll_bb_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_sptr_nitems_written(dpll_bb_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"dpll_bb_sptr_max_noutput_items", _wrap_dpll_bb_sptr_max_noutput_items, METH_VARARGS, (char *)"dpll_bb_sptr_max_noutput_items(dpll_bb_sptr self) -> int"},
	 { (char *)"dpll_bb_sptr_set_max_noutput_items", (PyCFunction) _wrap_dpll_bb_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_sptr_set_max_noutput_items(dpll_bb_sptr self, int m)"},
	 { (char *)"dpll_bb_sptr_unset_max_noutput_items", _wrap_dpll_bb_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"dpll_bb_sptr_unset_max_noutput_items(dpll_bb_sptr self)"},
	 { (char *)"dpll_bb_sptr_is_set_max_noutput_items", _wrap_dpll_bb_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"dpll_bb_sptr_is_set_max_noutput_items(dpll_bb_sptr self) -> bool"},
	 { (char *)"dpll_bb_sptr_max_output_buffer", (PyCFunction) _wrap_dpll_bb_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_sptr_max_output_buffer(dpll_bb_sptr self, int i) -> long"},
	 { (char *)"dpll_bb_sptr_set_max_output_buffer", _wrap_dpll_bb_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"dpll_bb_sptr_set_max_output_buffer(dpll_bb_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"dpll_bb_sptr_min_output_buffer", (PyCFunction) _wrap_dpll_bb_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_sptr_min_output_buffer(dpll_bb_sptr self, int i) -> long"},
	 { (char *)"dpll_bb_sptr_set_min_output_buffer", _wrap_dpll_bb_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"dpll_bb_sptr_set_min_output_buffer(dpll_bb_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"dpll_bb_sptr_detail", _wrap_dpll_bb_sptr_detail, METH_VARARGS, (char *)"dpll_bb_sptr_detail(dpll_bb_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"dpll_bb_sptr_set_detail", (PyCFunction) _wrap_dpll_bb_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_sptr_set_detail(dpll_bb_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"dpll_bb_sptr_name", _wrap_dpll_bb_sptr_name, METH_VARARGS, (char *)"dpll_bb_sptr_name(dpll_bb_sptr self) -> string"},
	 { (char *)"dpll_bb_sptr_symbol_name", _wrap_dpll_bb_sptr_symbol_name, METH_VARARGS, (char *)"dpll_bb_sptr_symbol_name(dpll_bb_sptr self) -> string"},
	 { (char *)"dpll_bb_sptr_input_signature", _wrap_dpll_bb_sptr_input_signature, METH_VARARGS, (char *)"dpll_bb_sptr_input_signature(dpll_bb_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"dpll_bb_sptr_output_signature", _wrap_dpll_bb_sptr_output_signature, METH_VARARGS, (char *)"dpll_bb_sptr_output_signature(dpll_bb_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"dpll_bb_sptr_unique_id", _wrap_dpll_bb_sptr_unique_id, METH_VARARGS, (char *)"dpll_bb_sptr_unique_id(dpll_bb_sptr self) -> long"},
	 { (char *)"dpll_bb_sptr_to_basic_block", _wrap_dpll_bb_sptr_to_basic_block, METH_VARARGS, (char *)"dpll_bb_sptr_to_basic_block(dpll_bb_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"dpll_bb_sptr_check_topology", (PyCFunction) _wrap_dpll_bb_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_sptr_check_topology(dpll_bb_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"dpll_bb_sptr_alias", _wrap_dpll_bb_sptr_alias, METH_VARARGS, (char *)"dpll_bb_sptr_alias(dpll_bb_sptr self) -> string"},
	 { (char *)"dpll_bb_sptr_set_block_alias", (PyCFunction) _wrap_dpll_bb_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_sptr_set_block_alias(dpll_bb_sptr self, string name)"},
	 { (char *)"dpll_bb_sptr__post", (PyCFunction) _wrap_dpll_bb_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"dpll_bb_sptr__post(dpll_bb_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"dpll_bb_sptr_message_ports_in", _wrap_dpll_bb_sptr_message_ports_in, METH_VARARGS, (char *)"dpll_bb_sptr_message_ports_in(dpll_bb_sptr self) -> pmt_t"},
	 { (char *)"dpll_bb_sptr_message_ports_out", _wrap_dpll_bb_sptr_message_ports_out, METH_VARARGS, (char *)"dpll_bb_sptr_message_ports_out(dpll_bb_sptr self) -> pmt_t"},
	 { (char *)"dpll_bb_sptr_swigregister", dpll_bb_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_feedforward_agc_cc_sptr", _wrap_new_feedforward_agc_cc_sptr, METH_VARARGS, (char *)"\n"
		"feedforward_agc_cc_sptr()\n"
		"new_feedforward_agc_cc_sptr(feedforward_agc_cc p) -> feedforward_agc_cc_sptr\n"
		""},
	 { (char *)"feedforward_agc_cc_sptr___deref__", _wrap_feedforward_agc_cc_sptr___deref__, METH_VARARGS, (char *)"feedforward_agc_cc_sptr___deref__(feedforward_agc_cc_sptr self) -> feedforward_agc_cc"},
	 { (char *)"delete_feedforward_agc_cc_sptr", _wrap_delete_feedforward_agc_cc_sptr, METH_VARARGS, (char *)"delete_feedforward_agc_cc_sptr(feedforward_agc_cc_sptr self)"},
	 { (char *)"feedforward_agc_cc_sptr_make", (PyCFunction) _wrap_feedforward_agc_cc_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"feedforward_agc_cc_sptr_make(feedforward_agc_cc_sptr self, int nsamples, float reference) -> sptr"},
	 { (char *)"feedforward_agc_cc_sptr_history", _wrap_feedforward_agc_cc_sptr_history, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_history(feedforward_agc_cc_sptr self) -> unsigned int"},
	 { (char *)"feedforward_agc_cc_sptr_output_multiple", _wrap_feedforward_agc_cc_sptr_output_multiple, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_output_multiple(feedforward_agc_cc_sptr self) -> int"},
	 { (char *)"feedforward_agc_cc_sptr_relative_rate", _wrap_feedforward_agc_cc_sptr_relative_rate, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_relative_rate(feedforward_agc_cc_sptr self) -> double"},
	 { (char *)"feedforward_agc_cc_sptr_start", _wrap_feedforward_agc_cc_sptr_start, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_start(feedforward_agc_cc_sptr self) -> bool"},
	 { (char *)"feedforward_agc_cc_sptr_stop", _wrap_feedforward_agc_cc_sptr_stop, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_stop(feedforward_agc_cc_sptr self) -> bool"},
	 { (char *)"feedforward_agc_cc_sptr_nitems_read", (PyCFunction) _wrap_feedforward_agc_cc_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"feedforward_agc_cc_sptr_nitems_read(feedforward_agc_cc_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"feedforward_agc_cc_sptr_nitems_written", (PyCFunction) _wrap_feedforward_agc_cc_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"feedforward_agc_cc_sptr_nitems_written(feedforward_agc_cc_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"feedforward_agc_cc_sptr_max_noutput_items", _wrap_feedforward_agc_cc_sptr_max_noutput_items, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_max_noutput_items(feedforward_agc_cc_sptr self) -> int"},
	 { (char *)"feedforward_agc_cc_sptr_set_max_noutput_items", (PyCFunction) _wrap_feedforward_agc_cc_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"feedforward_agc_cc_sptr_set_max_noutput_items(feedforward_agc_cc_sptr self, int m)"},
	 { (char *)"feedforward_agc_cc_sptr_unset_max_noutput_items", _wrap_feedforward_agc_cc_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_unset_max_noutput_items(feedforward_agc_cc_sptr self)"},
	 { (char *)"feedforward_agc_cc_sptr_is_set_max_noutput_items", _wrap_feedforward_agc_cc_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_is_set_max_noutput_items(feedforward_agc_cc_sptr self) -> bool"},
	 { (char *)"feedforward_agc_cc_sptr_max_output_buffer", (PyCFunction) _wrap_feedforward_agc_cc_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"feedforward_agc_cc_sptr_max_output_buffer(feedforward_agc_cc_sptr self, int i) -> long"},
	 { (char *)"feedforward_agc_cc_sptr_set_max_output_buffer", _wrap_feedforward_agc_cc_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"feedforward_agc_cc_sptr_set_max_output_buffer(feedforward_agc_cc_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"feedforward_agc_cc_sptr_min_output_buffer", (PyCFunction) _wrap_feedforward_agc_cc_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"feedforward_agc_cc_sptr_min_output_buffer(feedforward_agc_cc_sptr self, int i) -> long"},
	 { (char *)"feedforward_agc_cc_sptr_set_min_output_buffer", _wrap_feedforward_agc_cc_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"feedforward_agc_cc_sptr_set_min_output_buffer(feedforward_agc_cc_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"feedforward_agc_cc_sptr_detail", _wrap_feedforward_agc_cc_sptr_detail, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_detail(feedforward_agc_cc_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"feedforward_agc_cc_sptr_set_detail", (PyCFunction) _wrap_feedforward_agc_cc_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"feedforward_agc_cc_sptr_set_detail(feedforward_agc_cc_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"feedforward_agc_cc_sptr_name", _wrap_feedforward_agc_cc_sptr_name, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_name(feedforward_agc_cc_sptr self) -> string"},
	 { (char *)"feedforward_agc_cc_sptr_symbol_name", _wrap_feedforward_agc_cc_sptr_symbol_name, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_symbol_name(feedforward_agc_cc_sptr self) -> string"},
	 { (char *)"feedforward_agc_cc_sptr_input_signature", _wrap_feedforward_agc_cc_sptr_input_signature, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_input_signature(feedforward_agc_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"feedforward_agc_cc_sptr_output_signature", _wrap_feedforward_agc_cc_sptr_output_signature, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_output_signature(feedforward_agc_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"feedforward_agc_cc_sptr_unique_id", _wrap_feedforward_agc_cc_sptr_unique_id, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_unique_id(feedforward_agc_cc_sptr self) -> long"},
	 { (char *)"feedforward_agc_cc_sptr_to_basic_block", _wrap_feedforward_agc_cc_sptr_to_basic_block, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_to_basic_block(feedforward_agc_cc_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"feedforward_agc_cc_sptr_check_topology", (PyCFunction) _wrap_feedforward_agc_cc_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"feedforward_agc_cc_sptr_check_topology(feedforward_agc_cc_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"feedforward_agc_cc_sptr_alias", _wrap_feedforward_agc_cc_sptr_alias, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_alias(feedforward_agc_cc_sptr self) -> string"},
	 { (char *)"feedforward_agc_cc_sptr_set_block_alias", (PyCFunction) _wrap_feedforward_agc_cc_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"feedforward_agc_cc_sptr_set_block_alias(feedforward_agc_cc_sptr self, string name)"},
	 { (char *)"feedforward_agc_cc_sptr__post", (PyCFunction) _wrap_feedforward_agc_cc_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"feedforward_agc_cc_sptr__post(feedforward_agc_cc_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"feedforward_agc_cc_sptr_message_ports_in", _wrap_feedforward_agc_cc_sptr_message_ports_in, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_message_ports_in(feedforward_agc_cc_sptr self) -> pmt_t"},
	 { (char *)"feedforward_agc_cc_sptr_message_ports_out", _wrap_feedforward_agc_cc_sptr_message_ports_out, METH_VARARGS, (char *)"feedforward_agc_cc_sptr_message_ports_out(feedforward_agc_cc_sptr self) -> pmt_t"},
	 { (char *)"feedforward_agc_cc_sptr_swigregister", feedforward_agc_cc_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_fmdet_cf_sptr", _wrap_new_fmdet_cf_sptr, METH_VARARGS, (char *)"\n"
		"fmdet_cf_sptr()\n"
		"new_fmdet_cf_sptr(fmdet_cf p) -> fmdet_cf_sptr\n"
		""},
	 { (char *)"fmdet_cf_sptr___deref__", _wrap_fmdet_cf_sptr___deref__, METH_VARARGS, (char *)"fmdet_cf_sptr___deref__(fmdet_cf_sptr self) -> fmdet_cf"},
	 { (char *)"delete_fmdet_cf_sptr", _wrap_delete_fmdet_cf_sptr, METH_VARARGS, (char *)"delete_fmdet_cf_sptr(fmdet_cf_sptr self)"},
	 { (char *)"fmdet_cf_sptr_make", (PyCFunction) _wrap_fmdet_cf_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"fmdet_cf_sptr_make(fmdet_cf_sptr self, float samplerate, float freq_low, \n"
		"    float freq_high, float scl) -> sptr\n"
		""},
	 { (char *)"fmdet_cf_sptr_set_scale", (PyCFunction) _wrap_fmdet_cf_sptr_set_scale, METH_VARARGS | METH_KEYWORDS, (char *)"fmdet_cf_sptr_set_scale(fmdet_cf_sptr self, float scl)"},
	 { (char *)"fmdet_cf_sptr_set_freq_range", (PyCFunction) _wrap_fmdet_cf_sptr_set_freq_range, METH_VARARGS | METH_KEYWORDS, (char *)"fmdet_cf_sptr_set_freq_range(fmdet_cf_sptr self, float freq_low, float freq_high)"},
	 { (char *)"fmdet_cf_sptr_freq", _wrap_fmdet_cf_sptr_freq, METH_VARARGS, (char *)"fmdet_cf_sptr_freq(fmdet_cf_sptr self) -> float"},
	 { (char *)"fmdet_cf_sptr_freq_high", _wrap_fmdet_cf_sptr_freq_high, METH_VARARGS, (char *)"fmdet_cf_sptr_freq_high(fmdet_cf_sptr self) -> float"},
	 { (char *)"fmdet_cf_sptr_freq_low", _wrap_fmdet_cf_sptr_freq_low, METH_VARARGS, (char *)"fmdet_cf_sptr_freq_low(fmdet_cf_sptr self) -> float"},
	 { (char *)"fmdet_cf_sptr_scale", _wrap_fmdet_cf_sptr_scale, METH_VARARGS, (char *)"fmdet_cf_sptr_scale(fmdet_cf_sptr self) -> float"},
	 { (char *)"fmdet_cf_sptr_bias", _wrap_fmdet_cf_sptr_bias, METH_VARARGS, (char *)"fmdet_cf_sptr_bias(fmdet_cf_sptr self) -> float"},
	 { (char *)"fmdet_cf_sptr_history", _wrap_fmdet_cf_sptr_history, METH_VARARGS, (char *)"fmdet_cf_sptr_history(fmdet_cf_sptr self) -> unsigned int"},
	 { (char *)"fmdet_cf_sptr_output_multiple", _wrap_fmdet_cf_sptr_output_multiple, METH_VARARGS, (char *)"fmdet_cf_sptr_output_multiple(fmdet_cf_sptr self) -> int"},
	 { (char *)"fmdet_cf_sptr_relative_rate", _wrap_fmdet_cf_sptr_relative_rate, METH_VARARGS, (char *)"fmdet_cf_sptr_relative_rate(fmdet_cf_sptr self) -> double"},
	 { (char *)"fmdet_cf_sptr_start", _wrap_fmdet_cf_sptr_start, METH_VARARGS, (char *)"fmdet_cf_sptr_start(fmdet_cf_sptr self) -> bool"},
	 { (char *)"fmdet_cf_sptr_stop", _wrap_fmdet_cf_sptr_stop, METH_VARARGS, (char *)"fmdet_cf_sptr_stop(fmdet_cf_sptr self) -> bool"},
	 { (char *)"fmdet_cf_sptr_nitems_read", (PyCFunction) _wrap_fmdet_cf_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"fmdet_cf_sptr_nitems_read(fmdet_cf_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"fmdet_cf_sptr_nitems_written", (PyCFunction) _wrap_fmdet_cf_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"fmdet_cf_sptr_nitems_written(fmdet_cf_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"fmdet_cf_sptr_max_noutput_items", _wrap_fmdet_cf_sptr_max_noutput_items, METH_VARARGS, (char *)"fmdet_cf_sptr_max_noutput_items(fmdet_cf_sptr self) -> int"},
	 { (char *)"fmdet_cf_sptr_set_max_noutput_items", (PyCFunction) _wrap_fmdet_cf_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"fmdet_cf_sptr_set_max_noutput_items(fmdet_cf_sptr self, int m)"},
	 { (char *)"fmdet_cf_sptr_unset_max_noutput_items", _wrap_fmdet_cf_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"fmdet_cf_sptr_unset_max_noutput_items(fmdet_cf_sptr self)"},
	 { (char *)"fmdet_cf_sptr_is_set_max_noutput_items", _wrap_fmdet_cf_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"fmdet_cf_sptr_is_set_max_noutput_items(fmdet_cf_sptr self) -> bool"},
	 { (char *)"fmdet_cf_sptr_max_output_buffer", (PyCFunction) _wrap_fmdet_cf_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"fmdet_cf_sptr_max_output_buffer(fmdet_cf_sptr self, int i) -> long"},
	 { (char *)"fmdet_cf_sptr_set_max_output_buffer", _wrap_fmdet_cf_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"fmdet_cf_sptr_set_max_output_buffer(fmdet_cf_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"fmdet_cf_sptr_min_output_buffer", (PyCFunction) _wrap_fmdet_cf_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"fmdet_cf_sptr_min_output_buffer(fmdet_cf_sptr self, int i) -> long"},
	 { (char *)"fmdet_cf_sptr_set_min_output_buffer", _wrap_fmdet_cf_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"fmdet_cf_sptr_set_min_output_buffer(fmdet_cf_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"fmdet_cf_sptr_detail", _wrap_fmdet_cf_sptr_detail, METH_VARARGS, (char *)"fmdet_cf_sptr_detail(fmdet_cf_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"fmdet_cf_sptr_set_detail", (PyCFunction) _wrap_fmdet_cf_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"fmdet_cf_sptr_set_detail(fmdet_cf_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"fmdet_cf_sptr_name", _wrap_fmdet_cf_sptr_name, METH_VARARGS, (char *)"fmdet_cf_sptr_name(fmdet_cf_sptr self) -> string"},
	 { (char *)"fmdet_cf_sptr_symbol_name", _wrap_fmdet_cf_sptr_symbol_name, METH_VARARGS, (char *)"fmdet_cf_sptr_symbol_name(fmdet_cf_sptr self) -> string"},
	 { (char *)"fmdet_cf_sptr_input_signature", _wrap_fmdet_cf_sptr_input_signature, METH_VARARGS, (char *)"fmdet_cf_sptr_input_signature(fmdet_cf_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"fmdet_cf_sptr_output_signature", _wrap_fmdet_cf_sptr_output_signature, METH_VARARGS, (char *)"fmdet_cf_sptr_output_signature(fmdet_cf_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"fmdet_cf_sptr_unique_id", _wrap_fmdet_cf_sptr_unique_id, METH_VARARGS, (char *)"fmdet_cf_sptr_unique_id(fmdet_cf_sptr self) -> long"},
	 { (char *)"fmdet_cf_sptr_to_basic_block", _wrap_fmdet_cf_sptr_to_basic_block, METH_VARARGS, (char *)"fmdet_cf_sptr_to_basic_block(fmdet_cf_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"fmdet_cf_sptr_check_topology", (PyCFunction) _wrap_fmdet_cf_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"fmdet_cf_sptr_check_topology(fmdet_cf_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"fmdet_cf_sptr_alias", _wrap_fmdet_cf_sptr_alias, METH_VARARGS, (char *)"fmdet_cf_sptr_alias(fmdet_cf_sptr self) -> string"},
	 { (char *)"fmdet_cf_sptr_set_block_alias", (PyCFunction) _wrap_fmdet_cf_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"fmdet_cf_sptr_set_block_alias(fmdet_cf_sptr self, string name)"},
	 { (char *)"fmdet_cf_sptr__post", (PyCFunction) _wrap_fmdet_cf_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"fmdet_cf_sptr__post(fmdet_cf_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"fmdet_cf_sptr_message_ports_in", _wrap_fmdet_cf_sptr_message_ports_in, METH_VARARGS, (char *)"fmdet_cf_sptr_message_ports_in(fmdet_cf_sptr self) -> pmt_t"},
	 { (char *)"fmdet_cf_sptr_message_ports_out", _wrap_fmdet_cf_sptr_message_ports_out, METH_VARARGS, (char *)"fmdet_cf_sptr_message_ports_out(fmdet_cf_sptr self) -> pmt_t"},
	 { (char *)"fmdet_cf_sptr_swigregister", fmdet_cf_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_frequency_modulator_fc_sptr", _wrap_new_frequency_modulator_fc_sptr, METH_VARARGS, (char *)"\n"
		"frequency_modulator_fc_sptr()\n"
		"new_frequency_modulator_fc_sptr(frequency_modulator_fc p) -> frequency_modulator_fc_sptr\n"
		""},
	 { (char *)"frequency_modulator_fc_sptr___deref__", _wrap_frequency_modulator_fc_sptr___deref__, METH_VARARGS, (char *)"frequency_modulator_fc_sptr___deref__(frequency_modulator_fc_sptr self) -> frequency_modulator_fc"},
	 { (char *)"delete_frequency_modulator_fc_sptr", _wrap_delete_frequency_modulator_fc_sptr, METH_VARARGS, (char *)"delete_frequency_modulator_fc_sptr(frequency_modulator_fc_sptr self)"},
	 { (char *)"frequency_modulator_fc_sptr_make", (PyCFunction) _wrap_frequency_modulator_fc_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"frequency_modulator_fc_sptr_make(frequency_modulator_fc_sptr self, double sensitivity) -> sptr"},
	 { (char *)"frequency_modulator_fc_sptr_set_sensitivity", (PyCFunction) _wrap_frequency_modulator_fc_sptr_set_sensitivity, METH_VARARGS | METH_KEYWORDS, (char *)"frequency_modulator_fc_sptr_set_sensitivity(frequency_modulator_fc_sptr self, float sens)"},
	 { (char *)"frequency_modulator_fc_sptr_sensitivity", _wrap_frequency_modulator_fc_sptr_sensitivity, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_sensitivity(frequency_modulator_fc_sptr self) -> float"},
	 { (char *)"frequency_modulator_fc_sptr_history", _wrap_frequency_modulator_fc_sptr_history, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_history(frequency_modulator_fc_sptr self) -> unsigned int"},
	 { (char *)"frequency_modulator_fc_sptr_output_multiple", _wrap_frequency_modulator_fc_sptr_output_multiple, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_output_multiple(frequency_modulator_fc_sptr self) -> int"},
	 { (char *)"frequency_modulator_fc_sptr_relative_rate", _wrap_frequency_modulator_fc_sptr_relative_rate, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_relative_rate(frequency_modulator_fc_sptr self) -> double"},
	 { (char *)"frequency_modulator_fc_sptr_start", _wrap_frequency_modulator_fc_sptr_start, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_start(frequency_modulator_fc_sptr self) -> bool"},
	 { (char *)"frequency_modulator_fc_sptr_stop", _wrap_frequency_modulator_fc_sptr_stop, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_stop(frequency_modulator_fc_sptr self) -> bool"},
	 { (char *)"frequency_modulator_fc_sptr_nitems_read", (PyCFunction) _wrap_frequency_modulator_fc_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"frequency_modulator_fc_sptr_nitems_read(frequency_modulator_fc_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"frequency_modulator_fc_sptr_nitems_written", (PyCFunction) _wrap_frequency_modulator_fc_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"frequency_modulator_fc_sptr_nitems_written(frequency_modulator_fc_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"frequency_modulator_fc_sptr_max_noutput_items", _wrap_frequency_modulator_fc_sptr_max_noutput_items, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_max_noutput_items(frequency_modulator_fc_sptr self) -> int"},
	 { (char *)"frequency_modulator_fc_sptr_set_max_noutput_items", (PyCFunction) _wrap_frequency_modulator_fc_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"frequency_modulator_fc_sptr_set_max_noutput_items(frequency_modulator_fc_sptr self, int m)"},
	 { (char *)"frequency_modulator_fc_sptr_unset_max_noutput_items", _wrap_frequency_modulator_fc_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_unset_max_noutput_items(frequency_modulator_fc_sptr self)"},
	 { (char *)"frequency_modulator_fc_sptr_is_set_max_noutput_items", _wrap_frequency_modulator_fc_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_is_set_max_noutput_items(frequency_modulator_fc_sptr self) -> bool"},
	 { (char *)"frequency_modulator_fc_sptr_max_output_buffer", (PyCFunction) _wrap_frequency_modulator_fc_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"frequency_modulator_fc_sptr_max_output_buffer(frequency_modulator_fc_sptr self, int i) -> long"},
	 { (char *)"frequency_modulator_fc_sptr_set_max_output_buffer", _wrap_frequency_modulator_fc_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"frequency_modulator_fc_sptr_set_max_output_buffer(frequency_modulator_fc_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"frequency_modulator_fc_sptr_min_output_buffer", (PyCFunction) _wrap_frequency_modulator_fc_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"frequency_modulator_fc_sptr_min_output_buffer(frequency_modulator_fc_sptr self, int i) -> long"},
	 { (char *)"frequency_modulator_fc_sptr_set_min_output_buffer", _wrap_frequency_modulator_fc_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"frequency_modulator_fc_sptr_set_min_output_buffer(frequency_modulator_fc_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"frequency_modulator_fc_sptr_detail", _wrap_frequency_modulator_fc_sptr_detail, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_detail(frequency_modulator_fc_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"frequency_modulator_fc_sptr_set_detail", (PyCFunction) _wrap_frequency_modulator_fc_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"frequency_modulator_fc_sptr_set_detail(frequency_modulator_fc_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"frequency_modulator_fc_sptr_name", _wrap_frequency_modulator_fc_sptr_name, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_name(frequency_modulator_fc_sptr self) -> string"},
	 { (char *)"frequency_modulator_fc_sptr_symbol_name", _wrap_frequency_modulator_fc_sptr_symbol_name, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_symbol_name(frequency_modulator_fc_sptr self) -> string"},
	 { (char *)"frequency_modulator_fc_sptr_input_signature", _wrap_frequency_modulator_fc_sptr_input_signature, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_input_signature(frequency_modulator_fc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"frequency_modulator_fc_sptr_output_signature", _wrap_frequency_modulator_fc_sptr_output_signature, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_output_signature(frequency_modulator_fc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"frequency_modulator_fc_sptr_unique_id", _wrap_frequency_modulator_fc_sptr_unique_id, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_unique_id(frequency_modulator_fc_sptr self) -> long"},
	 { (char *)"frequency_modulator_fc_sptr_to_basic_block", _wrap_frequency_modulator_fc_sptr_to_basic_block, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_to_basic_block(frequency_modulator_fc_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"frequency_modulator_fc_sptr_check_topology", (PyCFunction) _wrap_frequency_modulator_fc_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"frequency_modulator_fc_sptr_check_topology(frequency_modulator_fc_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"frequency_modulator_fc_sptr_alias", _wrap_frequency_modulator_fc_sptr_alias, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_alias(frequency_modulator_fc_sptr self) -> string"},
	 { (char *)"frequency_modulator_fc_sptr_set_block_alias", (PyCFunction) _wrap_frequency_modulator_fc_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"frequency_modulator_fc_sptr_set_block_alias(frequency_modulator_fc_sptr self, string name)"},
	 { (char *)"frequency_modulator_fc_sptr__post", (PyCFunction) _wrap_frequency_modulator_fc_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"frequency_modulator_fc_sptr__post(frequency_modulator_fc_sptr self, pmt_t which_port, \n"
		"    pmt_t msg)\n"
		""},
	 { (char *)"frequency_modulator_fc_sptr_message_ports_in", _wrap_frequency_modulator_fc_sptr_message_ports_in, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_message_ports_in(frequency_modulator_fc_sptr self) -> pmt_t"},
	 { (char *)"frequency_modulator_fc_sptr_message_ports_out", _wrap_frequency_modulator_fc_sptr_message_ports_out, METH_VARARGS, (char *)"frequency_modulator_fc_sptr_message_ports_out(frequency_modulator_fc_sptr self) -> pmt_t"},
	 { (char *)"frequency_modulator_fc_sptr_swigregister", frequency_modulator_fc_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_noise_source_s_sptr", _wrap_new_noise_source_s_sptr, METH_VARARGS, (char *)"\n"
		"noise_source_s_sptr()\n"
		"new_noise_source_s_sptr(noise_source_s p) -> noise_source_s_sptr\n"
		""},
	 { (char *)"noise_source_s_sptr___deref__", _wrap_noise_source_s_sptr___deref__, METH_VARARGS, (char *)"noise_source_s_sptr___deref__(noise_source_s_sptr self) -> noise_source_s"},
	 { (char *)"delete_noise_source_s_sptr", _wrap_delete_noise_source_s_sptr, METH_VARARGS, (char *)"delete_noise_source_s_sptr(noise_source_s_sptr self)"},
	 { (char *)"noise_source_s_sptr_make", (PyCFunction) _wrap_noise_source_s_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"noise_source_s_sptr_make(noise_source_s_sptr self, noise_type_t type, float ampl, \n"
		"    long seed) -> sptr\n"
		""},
	 { (char *)"noise_source_s_sptr_set_type", (PyCFunction) _wrap_noise_source_s_sptr_set_type, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_sptr_set_type(noise_source_s_sptr self, noise_type_t type)"},
	 { (char *)"noise_source_s_sptr_set_amplitude", (PyCFunction) _wrap_noise_source_s_sptr_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_sptr_set_amplitude(noise_source_s_sptr self, float ampl)"},
	 { (char *)"noise_source_s_sptr_type", _wrap_noise_source_s_sptr_type, METH_VARARGS, (char *)"noise_source_s_sptr_type(noise_source_s_sptr self) -> noise_type_t"},
	 { (char *)"noise_source_s_sptr_amplitude", _wrap_noise_source_s_sptr_amplitude, METH_VARARGS, (char *)"noise_source_s_sptr_amplitude(noise_source_s_sptr self) -> float"},
	 { (char *)"noise_source_s_sptr_history", _wrap_noise_source_s_sptr_history, METH_VARARGS, (char *)"noise_source_s_sptr_history(noise_source_s_sptr self) -> unsigned int"},
	 { (char *)"noise_source_s_sptr_output_multiple", _wrap_noise_source_s_sptr_output_multiple, METH_VARARGS, (char *)"noise_source_s_sptr_output_multiple(noise_source_s_sptr self) -> int"},
	 { (char *)"noise_source_s_sptr_relative_rate", _wrap_noise_source_s_sptr_relative_rate, METH_VARARGS, (char *)"noise_source_s_sptr_relative_rate(noise_source_s_sptr self) -> double"},
	 { (char *)"noise_source_s_sptr_start", _wrap_noise_source_s_sptr_start, METH_VARARGS, (char *)"noise_source_s_sptr_start(noise_source_s_sptr self) -> bool"},
	 { (char *)"noise_source_s_sptr_stop", _wrap_noise_source_s_sptr_stop, METH_VARARGS, (char *)"noise_source_s_sptr_stop(noise_source_s_sptr self) -> bool"},
	 { (char *)"noise_source_s_sptr_nitems_read", (PyCFunction) _wrap_noise_source_s_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_sptr_nitems_read(noise_source_s_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"noise_source_s_sptr_nitems_written", (PyCFunction) _wrap_noise_source_s_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_sptr_nitems_written(noise_source_s_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"noise_source_s_sptr_max_noutput_items", _wrap_noise_source_s_sptr_max_noutput_items, METH_VARARGS, (char *)"noise_source_s_sptr_max_noutput_items(noise_source_s_sptr self) -> int"},
	 { (char *)"noise_source_s_sptr_set_max_noutput_items", (PyCFunction) _wrap_noise_source_s_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_sptr_set_max_noutput_items(noise_source_s_sptr self, int m)"},
	 { (char *)"noise_source_s_sptr_unset_max_noutput_items", _wrap_noise_source_s_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"noise_source_s_sptr_unset_max_noutput_items(noise_source_s_sptr self)"},
	 { (char *)"noise_source_s_sptr_is_set_max_noutput_items", _wrap_noise_source_s_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"noise_source_s_sptr_is_set_max_noutput_items(noise_source_s_sptr self) -> bool"},
	 { (char *)"noise_source_s_sptr_max_output_buffer", (PyCFunction) _wrap_noise_source_s_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_sptr_max_output_buffer(noise_source_s_sptr self, int i) -> long"},
	 { (char *)"noise_source_s_sptr_set_max_output_buffer", _wrap_noise_source_s_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"noise_source_s_sptr_set_max_output_buffer(noise_source_s_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"noise_source_s_sptr_min_output_buffer", (PyCFunction) _wrap_noise_source_s_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_sptr_min_output_buffer(noise_source_s_sptr self, int i) -> long"},
	 { (char *)"noise_source_s_sptr_set_min_output_buffer", _wrap_noise_source_s_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"noise_source_s_sptr_set_min_output_buffer(noise_source_s_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"noise_source_s_sptr_detail", _wrap_noise_source_s_sptr_detail, METH_VARARGS, (char *)"noise_source_s_sptr_detail(noise_source_s_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"noise_source_s_sptr_set_detail", (PyCFunction) _wrap_noise_source_s_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_sptr_set_detail(noise_source_s_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"noise_source_s_sptr_name", _wrap_noise_source_s_sptr_name, METH_VARARGS, (char *)"noise_source_s_sptr_name(noise_source_s_sptr self) -> string"},
	 { (char *)"noise_source_s_sptr_symbol_name", _wrap_noise_source_s_sptr_symbol_name, METH_VARARGS, (char *)"noise_source_s_sptr_symbol_name(noise_source_s_sptr self) -> string"},
	 { (char *)"noise_source_s_sptr_input_signature", _wrap_noise_source_s_sptr_input_signature, METH_VARARGS, (char *)"noise_source_s_sptr_input_signature(noise_source_s_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"noise_source_s_sptr_output_signature", _wrap_noise_source_s_sptr_output_signature, METH_VARARGS, (char *)"noise_source_s_sptr_output_signature(noise_source_s_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"noise_source_s_sptr_unique_id", _wrap_noise_source_s_sptr_unique_id, METH_VARARGS, (char *)"noise_source_s_sptr_unique_id(noise_source_s_sptr self) -> long"},
	 { (char *)"noise_source_s_sptr_to_basic_block", _wrap_noise_source_s_sptr_to_basic_block, METH_VARARGS, (char *)"noise_source_s_sptr_to_basic_block(noise_source_s_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"noise_source_s_sptr_check_topology", (PyCFunction) _wrap_noise_source_s_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_sptr_check_topology(noise_source_s_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"noise_source_s_sptr_alias", _wrap_noise_source_s_sptr_alias, METH_VARARGS, (char *)"noise_source_s_sptr_alias(noise_source_s_sptr self) -> string"},
	 { (char *)"noise_source_s_sptr_set_block_alias", (PyCFunction) _wrap_noise_source_s_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_sptr_set_block_alias(noise_source_s_sptr self, string name)"},
	 { (char *)"noise_source_s_sptr__post", (PyCFunction) _wrap_noise_source_s_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_s_sptr__post(noise_source_s_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"noise_source_s_sptr_message_ports_in", _wrap_noise_source_s_sptr_message_ports_in, METH_VARARGS, (char *)"noise_source_s_sptr_message_ports_in(noise_source_s_sptr self) -> pmt_t"},
	 { (char *)"noise_source_s_sptr_message_ports_out", _wrap_noise_source_s_sptr_message_ports_out, METH_VARARGS, (char *)"noise_source_s_sptr_message_ports_out(noise_source_s_sptr self) -> pmt_t"},
	 { (char *)"noise_source_s_sptr_swigregister", noise_source_s_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_noise_source_i_sptr", _wrap_new_noise_source_i_sptr, METH_VARARGS, (char *)"\n"
		"noise_source_i_sptr()\n"
		"new_noise_source_i_sptr(noise_source_i p) -> noise_source_i_sptr\n"
		""},
	 { (char *)"noise_source_i_sptr___deref__", _wrap_noise_source_i_sptr___deref__, METH_VARARGS, (char *)"noise_source_i_sptr___deref__(noise_source_i_sptr self) -> noise_source_i"},
	 { (char *)"delete_noise_source_i_sptr", _wrap_delete_noise_source_i_sptr, METH_VARARGS, (char *)"delete_noise_source_i_sptr(noise_source_i_sptr self)"},
	 { (char *)"noise_source_i_sptr_make", (PyCFunction) _wrap_noise_source_i_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"noise_source_i_sptr_make(noise_source_i_sptr self, noise_type_t type, float ampl, \n"
		"    long seed) -> sptr\n"
		""},
	 { (char *)"noise_source_i_sptr_set_type", (PyCFunction) _wrap_noise_source_i_sptr_set_type, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_sptr_set_type(noise_source_i_sptr self, noise_type_t type)"},
	 { (char *)"noise_source_i_sptr_set_amplitude", (PyCFunction) _wrap_noise_source_i_sptr_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_sptr_set_amplitude(noise_source_i_sptr self, float ampl)"},
	 { (char *)"noise_source_i_sptr_type", _wrap_noise_source_i_sptr_type, METH_VARARGS, (char *)"noise_source_i_sptr_type(noise_source_i_sptr self) -> noise_type_t"},
	 { (char *)"noise_source_i_sptr_amplitude", _wrap_noise_source_i_sptr_amplitude, METH_VARARGS, (char *)"noise_source_i_sptr_amplitude(noise_source_i_sptr self) -> float"},
	 { (char *)"noise_source_i_sptr_history", _wrap_noise_source_i_sptr_history, METH_VARARGS, (char *)"noise_source_i_sptr_history(noise_source_i_sptr self) -> unsigned int"},
	 { (char *)"noise_source_i_sptr_output_multiple", _wrap_noise_source_i_sptr_output_multiple, METH_VARARGS, (char *)"noise_source_i_sptr_output_multiple(noise_source_i_sptr self) -> int"},
	 { (char *)"noise_source_i_sptr_relative_rate", _wrap_noise_source_i_sptr_relative_rate, METH_VARARGS, (char *)"noise_source_i_sptr_relative_rate(noise_source_i_sptr self) -> double"},
	 { (char *)"noise_source_i_sptr_start", _wrap_noise_source_i_sptr_start, METH_VARARGS, (char *)"noise_source_i_sptr_start(noise_source_i_sptr self) -> bool"},
	 { (char *)"noise_source_i_sptr_stop", _wrap_noise_source_i_sptr_stop, METH_VARARGS, (char *)"noise_source_i_sptr_stop(noise_source_i_sptr self) -> bool"},
	 { (char *)"noise_source_i_sptr_nitems_read", (PyCFunction) _wrap_noise_source_i_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_sptr_nitems_read(noise_source_i_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"noise_source_i_sptr_nitems_written", (PyCFunction) _wrap_noise_source_i_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_sptr_nitems_written(noise_source_i_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"noise_source_i_sptr_max_noutput_items", _wrap_noise_source_i_sptr_max_noutput_items, METH_VARARGS, (char *)"noise_source_i_sptr_max_noutput_items(noise_source_i_sptr self) -> int"},
	 { (char *)"noise_source_i_sptr_set_max_noutput_items", (PyCFunction) _wrap_noise_source_i_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_sptr_set_max_noutput_items(noise_source_i_sptr self, int m)"},
	 { (char *)"noise_source_i_sptr_unset_max_noutput_items", _wrap_noise_source_i_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"noise_source_i_sptr_unset_max_noutput_items(noise_source_i_sptr self)"},
	 { (char *)"noise_source_i_sptr_is_set_max_noutput_items", _wrap_noise_source_i_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"noise_source_i_sptr_is_set_max_noutput_items(noise_source_i_sptr self) -> bool"},
	 { (char *)"noise_source_i_sptr_max_output_buffer", (PyCFunction) _wrap_noise_source_i_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_sptr_max_output_buffer(noise_source_i_sptr self, int i) -> long"},
	 { (char *)"noise_source_i_sptr_set_max_output_buffer", _wrap_noise_source_i_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"noise_source_i_sptr_set_max_output_buffer(noise_source_i_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"noise_source_i_sptr_min_output_buffer", (PyCFunction) _wrap_noise_source_i_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_sptr_min_output_buffer(noise_source_i_sptr self, int i) -> long"},
	 { (char *)"noise_source_i_sptr_set_min_output_buffer", _wrap_noise_source_i_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"noise_source_i_sptr_set_min_output_buffer(noise_source_i_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"noise_source_i_sptr_detail", _wrap_noise_source_i_sptr_detail, METH_VARARGS, (char *)"noise_source_i_sptr_detail(noise_source_i_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"noise_source_i_sptr_set_detail", (PyCFunction) _wrap_noise_source_i_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_sptr_set_detail(noise_source_i_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"noise_source_i_sptr_name", _wrap_noise_source_i_sptr_name, METH_VARARGS, (char *)"noise_source_i_sptr_name(noise_source_i_sptr self) -> string"},
	 { (char *)"noise_source_i_sptr_symbol_name", _wrap_noise_source_i_sptr_symbol_name, METH_VARARGS, (char *)"noise_source_i_sptr_symbol_name(noise_source_i_sptr self) -> string"},
	 { (char *)"noise_source_i_sptr_input_signature", _wrap_noise_source_i_sptr_input_signature, METH_VARARGS, (char *)"noise_source_i_sptr_input_signature(noise_source_i_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"noise_source_i_sptr_output_signature", _wrap_noise_source_i_sptr_output_signature, METH_VARARGS, (char *)"noise_source_i_sptr_output_signature(noise_source_i_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"noise_source_i_sptr_unique_id", _wrap_noise_source_i_sptr_unique_id, METH_VARARGS, (char *)"noise_source_i_sptr_unique_id(noise_source_i_sptr self) -> long"},
	 { (char *)"noise_source_i_sptr_to_basic_block", _wrap_noise_source_i_sptr_to_basic_block, METH_VARARGS, (char *)"noise_source_i_sptr_to_basic_block(noise_source_i_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"noise_source_i_sptr_check_topology", (PyCFunction) _wrap_noise_source_i_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_sptr_check_topology(noise_source_i_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"noise_source_i_sptr_alias", _wrap_noise_source_i_sptr_alias, METH_VARARGS, (char *)"noise_source_i_sptr_alias(noise_source_i_sptr self) -> string"},
	 { (char *)"noise_source_i_sptr_set_block_alias", (PyCFunction) _wrap_noise_source_i_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_sptr_set_block_alias(noise_source_i_sptr self, string name)"},
	 { (char *)"noise_source_i_sptr__post", (PyCFunction) _wrap_noise_source_i_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_i_sptr__post(noise_source_i_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"noise_source_i_sptr_message_ports_in", _wrap_noise_source_i_sptr_message_ports_in, METH_VARARGS, (char *)"noise_source_i_sptr_message_ports_in(noise_source_i_sptr self) -> pmt_t"},
	 { (char *)"noise_source_i_sptr_message_ports_out", _wrap_noise_source_i_sptr_message_ports_out, METH_VARARGS, (char *)"noise_source_i_sptr_message_ports_out(noise_source_i_sptr self) -> pmt_t"},
	 { (char *)"noise_source_i_sptr_swigregister", noise_source_i_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_noise_source_f_sptr", _wrap_new_noise_source_f_sptr, METH_VARARGS, (char *)"\n"
		"noise_source_f_sptr()\n"
		"new_noise_source_f_sptr(noise_source_f p) -> noise_source_f_sptr\n"
		""},
	 { (char *)"noise_source_f_sptr___deref__", _wrap_noise_source_f_sptr___deref__, METH_VARARGS, (char *)"noise_source_f_sptr___deref__(noise_source_f_sptr self) -> noise_source_f"},
	 { (char *)"delete_noise_source_f_sptr", _wrap_delete_noise_source_f_sptr, METH_VARARGS, (char *)"delete_noise_source_f_sptr(noise_source_f_sptr self)"},
	 { (char *)"noise_source_f_sptr_make", (PyCFunction) _wrap_noise_source_f_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"noise_source_f_sptr_make(noise_source_f_sptr self, noise_type_t type, float ampl, \n"
		"    long seed) -> sptr\n"
		""},
	 { (char *)"noise_source_f_sptr_set_type", (PyCFunction) _wrap_noise_source_f_sptr_set_type, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_sptr_set_type(noise_source_f_sptr self, noise_type_t type)"},
	 { (char *)"noise_source_f_sptr_set_amplitude", (PyCFunction) _wrap_noise_source_f_sptr_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_sptr_set_amplitude(noise_source_f_sptr self, float ampl)"},
	 { (char *)"noise_source_f_sptr_type", _wrap_noise_source_f_sptr_type, METH_VARARGS, (char *)"noise_source_f_sptr_type(noise_source_f_sptr self) -> noise_type_t"},
	 { (char *)"noise_source_f_sptr_amplitude", _wrap_noise_source_f_sptr_amplitude, METH_VARARGS, (char *)"noise_source_f_sptr_amplitude(noise_source_f_sptr self) -> float"},
	 { (char *)"noise_source_f_sptr_history", _wrap_noise_source_f_sptr_history, METH_VARARGS, (char *)"noise_source_f_sptr_history(noise_source_f_sptr self) -> unsigned int"},
	 { (char *)"noise_source_f_sptr_output_multiple", _wrap_noise_source_f_sptr_output_multiple, METH_VARARGS, (char *)"noise_source_f_sptr_output_multiple(noise_source_f_sptr self) -> int"},
	 { (char *)"noise_source_f_sptr_relative_rate", _wrap_noise_source_f_sptr_relative_rate, METH_VARARGS, (char *)"noise_source_f_sptr_relative_rate(noise_source_f_sptr self) -> double"},
	 { (char *)"noise_source_f_sptr_start", _wrap_noise_source_f_sptr_start, METH_VARARGS, (char *)"noise_source_f_sptr_start(noise_source_f_sptr self) -> bool"},
	 { (char *)"noise_source_f_sptr_stop", _wrap_noise_source_f_sptr_stop, METH_VARARGS, (char *)"noise_source_f_sptr_stop(noise_source_f_sptr self) -> bool"},
	 { (char *)"noise_source_f_sptr_nitems_read", (PyCFunction) _wrap_noise_source_f_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_sptr_nitems_read(noise_source_f_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"noise_source_f_sptr_nitems_written", (PyCFunction) _wrap_noise_source_f_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_sptr_nitems_written(noise_source_f_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"noise_source_f_sptr_max_noutput_items", _wrap_noise_source_f_sptr_max_noutput_items, METH_VARARGS, (char *)"noise_source_f_sptr_max_noutput_items(noise_source_f_sptr self) -> int"},
	 { (char *)"noise_source_f_sptr_set_max_noutput_items", (PyCFunction) _wrap_noise_source_f_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_sptr_set_max_noutput_items(noise_source_f_sptr self, int m)"},
	 { (char *)"noise_source_f_sptr_unset_max_noutput_items", _wrap_noise_source_f_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"noise_source_f_sptr_unset_max_noutput_items(noise_source_f_sptr self)"},
	 { (char *)"noise_source_f_sptr_is_set_max_noutput_items", _wrap_noise_source_f_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"noise_source_f_sptr_is_set_max_noutput_items(noise_source_f_sptr self) -> bool"},
	 { (char *)"noise_source_f_sptr_max_output_buffer", (PyCFunction) _wrap_noise_source_f_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_sptr_max_output_buffer(noise_source_f_sptr self, int i) -> long"},
	 { (char *)"noise_source_f_sptr_set_max_output_buffer", _wrap_noise_source_f_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"noise_source_f_sptr_set_max_output_buffer(noise_source_f_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"noise_source_f_sptr_min_output_buffer", (PyCFunction) _wrap_noise_source_f_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_sptr_min_output_buffer(noise_source_f_sptr self, int i) -> long"},
	 { (char *)"noise_source_f_sptr_set_min_output_buffer", _wrap_noise_source_f_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"noise_source_f_sptr_set_min_output_buffer(noise_source_f_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"noise_source_f_sptr_detail", _wrap_noise_source_f_sptr_detail, METH_VARARGS, (char *)"noise_source_f_sptr_detail(noise_source_f_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"noise_source_f_sptr_set_detail", (PyCFunction) _wrap_noise_source_f_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_sptr_set_detail(noise_source_f_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"noise_source_f_sptr_name", _wrap_noise_source_f_sptr_name, METH_VARARGS, (char *)"noise_source_f_sptr_name(noise_source_f_sptr self) -> string"},
	 { (char *)"noise_source_f_sptr_symbol_name", _wrap_noise_source_f_sptr_symbol_name, METH_VARARGS, (char *)"noise_source_f_sptr_symbol_name(noise_source_f_sptr self) -> string"},
	 { (char *)"noise_source_f_sptr_input_signature", _wrap_noise_source_f_sptr_input_signature, METH_VARARGS, (char *)"noise_source_f_sptr_input_signature(noise_source_f_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"noise_source_f_sptr_output_signature", _wrap_noise_source_f_sptr_output_signature, METH_VARARGS, (char *)"noise_source_f_sptr_output_signature(noise_source_f_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"noise_source_f_sptr_unique_id", _wrap_noise_source_f_sptr_unique_id, METH_VARARGS, (char *)"noise_source_f_sptr_unique_id(noise_source_f_sptr self) -> long"},
	 { (char *)"noise_source_f_sptr_to_basic_block", _wrap_noise_source_f_sptr_to_basic_block, METH_VARARGS, (char *)"noise_source_f_sptr_to_basic_block(noise_source_f_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"noise_source_f_sptr_check_topology", (PyCFunction) _wrap_noise_source_f_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_sptr_check_topology(noise_source_f_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"noise_source_f_sptr_alias", _wrap_noise_source_f_sptr_alias, METH_VARARGS, (char *)"noise_source_f_sptr_alias(noise_source_f_sptr self) -> string"},
	 { (char *)"noise_source_f_sptr_set_block_alias", (PyCFunction) _wrap_noise_source_f_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_sptr_set_block_alias(noise_source_f_sptr self, string name)"},
	 { (char *)"noise_source_f_sptr__post", (PyCFunction) _wrap_noise_source_f_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_f_sptr__post(noise_source_f_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"noise_source_f_sptr_message_ports_in", _wrap_noise_source_f_sptr_message_ports_in, METH_VARARGS, (char *)"noise_source_f_sptr_message_ports_in(noise_source_f_sptr self) -> pmt_t"},
	 { (char *)"noise_source_f_sptr_message_ports_out", _wrap_noise_source_f_sptr_message_ports_out, METH_VARARGS, (char *)"noise_source_f_sptr_message_ports_out(noise_source_f_sptr self) -> pmt_t"},
	 { (char *)"noise_source_f_sptr_swigregister", noise_source_f_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_noise_source_c_sptr", _wrap_new_noise_source_c_sptr, METH_VARARGS, (char *)"\n"
		"noise_source_c_sptr()\n"
		"new_noise_source_c_sptr(noise_source_c p) -> noise_source_c_sptr\n"
		""},
	 { (char *)"noise_source_c_sptr___deref__", _wrap_noise_source_c_sptr___deref__, METH_VARARGS, (char *)"noise_source_c_sptr___deref__(noise_source_c_sptr self) -> noise_source_c"},
	 { (char *)"delete_noise_source_c_sptr", _wrap_delete_noise_source_c_sptr, METH_VARARGS, (char *)"delete_noise_source_c_sptr(noise_source_c_sptr self)"},
	 { (char *)"noise_source_c_sptr_make", (PyCFunction) _wrap_noise_source_c_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"noise_source_c_sptr_make(noise_source_c_sptr self, noise_type_t type, float ampl, \n"
		"    long seed) -> sptr\n"
		""},
	 { (char *)"noise_source_c_sptr_set_type", (PyCFunction) _wrap_noise_source_c_sptr_set_type, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_sptr_set_type(noise_source_c_sptr self, noise_type_t type)"},
	 { (char *)"noise_source_c_sptr_set_amplitude", (PyCFunction) _wrap_noise_source_c_sptr_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_sptr_set_amplitude(noise_source_c_sptr self, float ampl)"},
	 { (char *)"noise_source_c_sptr_type", _wrap_noise_source_c_sptr_type, METH_VARARGS, (char *)"noise_source_c_sptr_type(noise_source_c_sptr self) -> noise_type_t"},
	 { (char *)"noise_source_c_sptr_amplitude", _wrap_noise_source_c_sptr_amplitude, METH_VARARGS, (char *)"noise_source_c_sptr_amplitude(noise_source_c_sptr self) -> float"},
	 { (char *)"noise_source_c_sptr_history", _wrap_noise_source_c_sptr_history, METH_VARARGS, (char *)"noise_source_c_sptr_history(noise_source_c_sptr self) -> unsigned int"},
	 { (char *)"noise_source_c_sptr_output_multiple", _wrap_noise_source_c_sptr_output_multiple, METH_VARARGS, (char *)"noise_source_c_sptr_output_multiple(noise_source_c_sptr self) -> int"},
	 { (char *)"noise_source_c_sptr_relative_rate", _wrap_noise_source_c_sptr_relative_rate, METH_VARARGS, (char *)"noise_source_c_sptr_relative_rate(noise_source_c_sptr self) -> double"},
	 { (char *)"noise_source_c_sptr_start", _wrap_noise_source_c_sptr_start, METH_VARARGS, (char *)"noise_source_c_sptr_start(noise_source_c_sptr self) -> bool"},
	 { (char *)"noise_source_c_sptr_stop", _wrap_noise_source_c_sptr_stop, METH_VARARGS, (char *)"noise_source_c_sptr_stop(noise_source_c_sptr self) -> bool"},
	 { (char *)"noise_source_c_sptr_nitems_read", (PyCFunction) _wrap_noise_source_c_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_sptr_nitems_read(noise_source_c_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"noise_source_c_sptr_nitems_written", (PyCFunction) _wrap_noise_source_c_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_sptr_nitems_written(noise_source_c_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"noise_source_c_sptr_max_noutput_items", _wrap_noise_source_c_sptr_max_noutput_items, METH_VARARGS, (char *)"noise_source_c_sptr_max_noutput_items(noise_source_c_sptr self) -> int"},
	 { (char *)"noise_source_c_sptr_set_max_noutput_items", (PyCFunction) _wrap_noise_source_c_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_sptr_set_max_noutput_items(noise_source_c_sptr self, int m)"},
	 { (char *)"noise_source_c_sptr_unset_max_noutput_items", _wrap_noise_source_c_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"noise_source_c_sptr_unset_max_noutput_items(noise_source_c_sptr self)"},
	 { (char *)"noise_source_c_sptr_is_set_max_noutput_items", _wrap_noise_source_c_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"noise_source_c_sptr_is_set_max_noutput_items(noise_source_c_sptr self) -> bool"},
	 { (char *)"noise_source_c_sptr_max_output_buffer", (PyCFunction) _wrap_noise_source_c_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_sptr_max_output_buffer(noise_source_c_sptr self, int i) -> long"},
	 { (char *)"noise_source_c_sptr_set_max_output_buffer", _wrap_noise_source_c_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"noise_source_c_sptr_set_max_output_buffer(noise_source_c_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"noise_source_c_sptr_min_output_buffer", (PyCFunction) _wrap_noise_source_c_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_sptr_min_output_buffer(noise_source_c_sptr self, int i) -> long"},
	 { (char *)"noise_source_c_sptr_set_min_output_buffer", _wrap_noise_source_c_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"noise_source_c_sptr_set_min_output_buffer(noise_source_c_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"noise_source_c_sptr_detail", _wrap_noise_source_c_sptr_detail, METH_VARARGS, (char *)"noise_source_c_sptr_detail(noise_source_c_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"noise_source_c_sptr_set_detail", (PyCFunction) _wrap_noise_source_c_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_sptr_set_detail(noise_source_c_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"noise_source_c_sptr_name", _wrap_noise_source_c_sptr_name, METH_VARARGS, (char *)"noise_source_c_sptr_name(noise_source_c_sptr self) -> string"},
	 { (char *)"noise_source_c_sptr_symbol_name", _wrap_noise_source_c_sptr_symbol_name, METH_VARARGS, (char *)"noise_source_c_sptr_symbol_name(noise_source_c_sptr self) -> string"},
	 { (char *)"noise_source_c_sptr_input_signature", _wrap_noise_source_c_sptr_input_signature, METH_VARARGS, (char *)"noise_source_c_sptr_input_signature(noise_source_c_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"noise_source_c_sptr_output_signature", _wrap_noise_source_c_sptr_output_signature, METH_VARARGS, (char *)"noise_source_c_sptr_output_signature(noise_source_c_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"noise_source_c_sptr_unique_id", _wrap_noise_source_c_sptr_unique_id, METH_VARARGS, (char *)"noise_source_c_sptr_unique_id(noise_source_c_sptr self) -> long"},
	 { (char *)"noise_source_c_sptr_to_basic_block", _wrap_noise_source_c_sptr_to_basic_block, METH_VARARGS, (char *)"noise_source_c_sptr_to_basic_block(noise_source_c_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"noise_source_c_sptr_check_topology", (PyCFunction) _wrap_noise_source_c_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_sptr_check_topology(noise_source_c_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"noise_source_c_sptr_alias", _wrap_noise_source_c_sptr_alias, METH_VARARGS, (char *)"noise_source_c_sptr_alias(noise_source_c_sptr self) -> string"},
	 { (char *)"noise_source_c_sptr_set_block_alias", (PyCFunction) _wrap_noise_source_c_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_sptr_set_block_alias(noise_source_c_sptr self, string name)"},
	 { (char *)"noise_source_c_sptr__post", (PyCFunction) _wrap_noise_source_c_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"noise_source_c_sptr__post(noise_source_c_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"noise_source_c_sptr_message_ports_in", _wrap_noise_source_c_sptr_message_ports_in, METH_VARARGS, (char *)"noise_source_c_sptr_message_ports_in(noise_source_c_sptr self) -> pmt_t"},
	 { (char *)"noise_source_c_sptr_message_ports_out", _wrap_noise_source_c_sptr_message_ports_out, METH_VARARGS, (char *)"noise_source_c_sptr_message_ports_out(noise_source_c_sptr self) -> pmt_t"},
	 { (char *)"noise_source_c_sptr_swigregister", noise_source_c_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_phase_modulator_fc_sptr", _wrap_new_phase_modulator_fc_sptr, METH_VARARGS, (char *)"\n"
		"phase_modulator_fc_sptr()\n"
		"new_phase_modulator_fc_sptr(phase_modulator_fc p) -> phase_modulator_fc_sptr\n"
		""},
	 { (char *)"phase_modulator_fc_sptr___deref__", _wrap_phase_modulator_fc_sptr___deref__, METH_VARARGS, (char *)"phase_modulator_fc_sptr___deref__(phase_modulator_fc_sptr self) -> phase_modulator_fc"},
	 { (char *)"delete_phase_modulator_fc_sptr", _wrap_delete_phase_modulator_fc_sptr, METH_VARARGS, (char *)"delete_phase_modulator_fc_sptr(phase_modulator_fc_sptr self)"},
	 { (char *)"phase_modulator_fc_sptr_make", (PyCFunction) _wrap_phase_modulator_fc_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_sptr_make(phase_modulator_fc_sptr self, double sensitivity) -> sptr"},
	 { (char *)"phase_modulator_fc_sptr_sensitivity", _wrap_phase_modulator_fc_sptr_sensitivity, METH_VARARGS, (char *)"phase_modulator_fc_sptr_sensitivity(phase_modulator_fc_sptr self) -> double"},
	 { (char *)"phase_modulator_fc_sptr_phase", _wrap_phase_modulator_fc_sptr_phase, METH_VARARGS, (char *)"phase_modulator_fc_sptr_phase(phase_modulator_fc_sptr self) -> double"},
	 { (char *)"phase_modulator_fc_sptr_set_sensitivity", (PyCFunction) _wrap_phase_modulator_fc_sptr_set_sensitivity, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_sptr_set_sensitivity(phase_modulator_fc_sptr self, double s)"},
	 { (char *)"phase_modulator_fc_sptr_set_phase", (PyCFunction) _wrap_phase_modulator_fc_sptr_set_phase, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_sptr_set_phase(phase_modulator_fc_sptr self, double p)"},
	 { (char *)"phase_modulator_fc_sptr_history", _wrap_phase_modulator_fc_sptr_history, METH_VARARGS, (char *)"phase_modulator_fc_sptr_history(phase_modulator_fc_sptr self) -> unsigned int"},
	 { (char *)"phase_modulator_fc_sptr_output_multiple", _wrap_phase_modulator_fc_sptr_output_multiple, METH_VARARGS, (char *)"phase_modulator_fc_sptr_output_multiple(phase_modulator_fc_sptr self) -> int"},
	 { (char *)"phase_modulator_fc_sptr_relative_rate", _wrap_phase_modulator_fc_sptr_relative_rate, METH_VARARGS, (char *)"phase_modulator_fc_sptr_relative_rate(phase_modulator_fc_sptr self) -> double"},
	 { (char *)"phase_modulator_fc_sptr_start", _wrap_phase_modulator_fc_sptr_start, METH_VARARGS, (char *)"phase_modulator_fc_sptr_start(phase_modulator_fc_sptr self) -> bool"},
	 { (char *)"phase_modulator_fc_sptr_stop", _wrap_phase_modulator_fc_sptr_stop, METH_VARARGS, (char *)"phase_modulator_fc_sptr_stop(phase_modulator_fc_sptr self) -> bool"},
	 { (char *)"phase_modulator_fc_sptr_nitems_read", (PyCFunction) _wrap_phase_modulator_fc_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_sptr_nitems_read(phase_modulator_fc_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"phase_modulator_fc_sptr_nitems_written", (PyCFunction) _wrap_phase_modulator_fc_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_sptr_nitems_written(phase_modulator_fc_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"phase_modulator_fc_sptr_max_noutput_items", _wrap_phase_modulator_fc_sptr_max_noutput_items, METH_VARARGS, (char *)"phase_modulator_fc_sptr_max_noutput_items(phase_modulator_fc_sptr self) -> int"},
	 { (char *)"phase_modulator_fc_sptr_set_max_noutput_items", (PyCFunction) _wrap_phase_modulator_fc_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_sptr_set_max_noutput_items(phase_modulator_fc_sptr self, int m)"},
	 { (char *)"phase_modulator_fc_sptr_unset_max_noutput_items", _wrap_phase_modulator_fc_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"phase_modulator_fc_sptr_unset_max_noutput_items(phase_modulator_fc_sptr self)"},
	 { (char *)"phase_modulator_fc_sptr_is_set_max_noutput_items", _wrap_phase_modulator_fc_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"phase_modulator_fc_sptr_is_set_max_noutput_items(phase_modulator_fc_sptr self) -> bool"},
	 { (char *)"phase_modulator_fc_sptr_max_output_buffer", (PyCFunction) _wrap_phase_modulator_fc_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_sptr_max_output_buffer(phase_modulator_fc_sptr self, int i) -> long"},
	 { (char *)"phase_modulator_fc_sptr_set_max_output_buffer", _wrap_phase_modulator_fc_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"phase_modulator_fc_sptr_set_max_output_buffer(phase_modulator_fc_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"phase_modulator_fc_sptr_min_output_buffer", (PyCFunction) _wrap_phase_modulator_fc_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_sptr_min_output_buffer(phase_modulator_fc_sptr self, int i) -> long"},
	 { (char *)"phase_modulator_fc_sptr_set_min_output_buffer", _wrap_phase_modulator_fc_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"phase_modulator_fc_sptr_set_min_output_buffer(phase_modulator_fc_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"phase_modulator_fc_sptr_detail", _wrap_phase_modulator_fc_sptr_detail, METH_VARARGS, (char *)"phase_modulator_fc_sptr_detail(phase_modulator_fc_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"phase_modulator_fc_sptr_set_detail", (PyCFunction) _wrap_phase_modulator_fc_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_sptr_set_detail(phase_modulator_fc_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"phase_modulator_fc_sptr_name", _wrap_phase_modulator_fc_sptr_name, METH_VARARGS, (char *)"phase_modulator_fc_sptr_name(phase_modulator_fc_sptr self) -> string"},
	 { (char *)"phase_modulator_fc_sptr_symbol_name", _wrap_phase_modulator_fc_sptr_symbol_name, METH_VARARGS, (char *)"phase_modulator_fc_sptr_symbol_name(phase_modulator_fc_sptr self) -> string"},
	 { (char *)"phase_modulator_fc_sptr_input_signature", _wrap_phase_modulator_fc_sptr_input_signature, METH_VARARGS, (char *)"phase_modulator_fc_sptr_input_signature(phase_modulator_fc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"phase_modulator_fc_sptr_output_signature", _wrap_phase_modulator_fc_sptr_output_signature, METH_VARARGS, (char *)"phase_modulator_fc_sptr_output_signature(phase_modulator_fc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"phase_modulator_fc_sptr_unique_id", _wrap_phase_modulator_fc_sptr_unique_id, METH_VARARGS, (char *)"phase_modulator_fc_sptr_unique_id(phase_modulator_fc_sptr self) -> long"},
	 { (char *)"phase_modulator_fc_sptr_to_basic_block", _wrap_phase_modulator_fc_sptr_to_basic_block, METH_VARARGS, (char *)"phase_modulator_fc_sptr_to_basic_block(phase_modulator_fc_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"phase_modulator_fc_sptr_check_topology", (PyCFunction) _wrap_phase_modulator_fc_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_sptr_check_topology(phase_modulator_fc_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"phase_modulator_fc_sptr_alias", _wrap_phase_modulator_fc_sptr_alias, METH_VARARGS, (char *)"phase_modulator_fc_sptr_alias(phase_modulator_fc_sptr self) -> string"},
	 { (char *)"phase_modulator_fc_sptr_set_block_alias", (PyCFunction) _wrap_phase_modulator_fc_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_sptr_set_block_alias(phase_modulator_fc_sptr self, string name)"},
	 { (char *)"phase_modulator_fc_sptr__post", (PyCFunction) _wrap_phase_modulator_fc_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"phase_modulator_fc_sptr__post(phase_modulator_fc_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"phase_modulator_fc_sptr_message_ports_in", _wrap_phase_modulator_fc_sptr_message_ports_in, METH_VARARGS, (char *)"phase_modulator_fc_sptr_message_ports_in(phase_modulator_fc_sptr self) -> pmt_t"},
	 { (char *)"phase_modulator_fc_sptr_message_ports_out", _wrap_phase_modulator_fc_sptr_message_ports_out, METH_VARARGS, (char *)"phase_modulator_fc_sptr_message_ports_out(phase_modulator_fc_sptr self) -> pmt_t"},
	 { (char *)"phase_modulator_fc_sptr_swigregister", phase_modulator_fc_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pll_carriertracking_cc_sptr", _wrap_new_pll_carriertracking_cc_sptr, METH_VARARGS, (char *)"\n"
		"pll_carriertracking_cc_sptr()\n"
		"new_pll_carriertracking_cc_sptr(pll_carriertracking_cc p) -> pll_carriertracking_cc_sptr\n"
		""},
	 { (char *)"pll_carriertracking_cc_sptr___deref__", _wrap_pll_carriertracking_cc_sptr___deref__, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr___deref__(pll_carriertracking_cc_sptr self) -> pll_carriertracking_cc"},
	 { (char *)"delete_pll_carriertracking_cc_sptr", _wrap_delete_pll_carriertracking_cc_sptr, METH_VARARGS, (char *)"delete_pll_carriertracking_cc_sptr(pll_carriertracking_cc_sptr self)"},
	 { (char *)"pll_carriertracking_cc_sptr_make", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"pll_carriertracking_cc_sptr_make(pll_carriertracking_cc_sptr self, float loop_bw, float max_freq, \n"
		"    float min_freq) -> sptr\n"
		""},
	 { (char *)"pll_carriertracking_cc_sptr_lock_detector", _wrap_pll_carriertracking_cc_sptr_lock_detector, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_lock_detector(pll_carriertracking_cc_sptr self) -> bool"},
	 { (char *)"pll_carriertracking_cc_sptr_squelch_enable", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_squelch_enable, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_squelch_enable(pll_carriertracking_cc_sptr self, bool arg1) -> bool"},
	 { (char *)"pll_carriertracking_cc_sptr_set_lock_threshold", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_set_lock_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_set_lock_threshold(pll_carriertracking_cc_sptr self, float arg1) -> float"},
	 { (char *)"pll_carriertracking_cc_sptr_set_loop_bandwidth", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_set_loop_bandwidth, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_set_loop_bandwidth(pll_carriertracking_cc_sptr self, float bw)"},
	 { (char *)"pll_carriertracking_cc_sptr_set_damping_factor", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_set_damping_factor, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_set_damping_factor(pll_carriertracking_cc_sptr self, float df)"},
	 { (char *)"pll_carriertracking_cc_sptr_set_alpha", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_set_alpha(pll_carriertracking_cc_sptr self, float alpha)"},
	 { (char *)"pll_carriertracking_cc_sptr_set_beta", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_set_beta, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_set_beta(pll_carriertracking_cc_sptr self, float beta)"},
	 { (char *)"pll_carriertracking_cc_sptr_set_frequency", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_set_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_set_frequency(pll_carriertracking_cc_sptr self, float freq)"},
	 { (char *)"pll_carriertracking_cc_sptr_set_phase", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_set_phase, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_set_phase(pll_carriertracking_cc_sptr self, float phase)"},
	 { (char *)"pll_carriertracking_cc_sptr_set_min_freq", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_set_min_freq, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_set_min_freq(pll_carriertracking_cc_sptr self, float freq)"},
	 { (char *)"pll_carriertracking_cc_sptr_set_max_freq", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_set_max_freq, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_set_max_freq(pll_carriertracking_cc_sptr self, float freq)"},
	 { (char *)"pll_carriertracking_cc_sptr_get_loop_bandwidth", _wrap_pll_carriertracking_cc_sptr_get_loop_bandwidth, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_get_loop_bandwidth(pll_carriertracking_cc_sptr self) -> float"},
	 { (char *)"pll_carriertracking_cc_sptr_get_damping_factor", _wrap_pll_carriertracking_cc_sptr_get_damping_factor, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_get_damping_factor(pll_carriertracking_cc_sptr self) -> float"},
	 { (char *)"pll_carriertracking_cc_sptr_get_alpha", _wrap_pll_carriertracking_cc_sptr_get_alpha, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_get_alpha(pll_carriertracking_cc_sptr self) -> float"},
	 { (char *)"pll_carriertracking_cc_sptr_get_beta", _wrap_pll_carriertracking_cc_sptr_get_beta, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_get_beta(pll_carriertracking_cc_sptr self) -> float"},
	 { (char *)"pll_carriertracking_cc_sptr_get_frequency", _wrap_pll_carriertracking_cc_sptr_get_frequency, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_get_frequency(pll_carriertracking_cc_sptr self) -> float"},
	 { (char *)"pll_carriertracking_cc_sptr_get_phase", _wrap_pll_carriertracking_cc_sptr_get_phase, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_get_phase(pll_carriertracking_cc_sptr self) -> float"},
	 { (char *)"pll_carriertracking_cc_sptr_get_min_freq", _wrap_pll_carriertracking_cc_sptr_get_min_freq, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_get_min_freq(pll_carriertracking_cc_sptr self) -> float"},
	 { (char *)"pll_carriertracking_cc_sptr_get_max_freq", _wrap_pll_carriertracking_cc_sptr_get_max_freq, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_get_max_freq(pll_carriertracking_cc_sptr self) -> float"},
	 { (char *)"pll_carriertracking_cc_sptr_history", _wrap_pll_carriertracking_cc_sptr_history, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_history(pll_carriertracking_cc_sptr self) -> unsigned int"},
	 { (char *)"pll_carriertracking_cc_sptr_output_multiple", _wrap_pll_carriertracking_cc_sptr_output_multiple, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_output_multiple(pll_carriertracking_cc_sptr self) -> int"},
	 { (char *)"pll_carriertracking_cc_sptr_relative_rate", _wrap_pll_carriertracking_cc_sptr_relative_rate, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_relative_rate(pll_carriertracking_cc_sptr self) -> double"},
	 { (char *)"pll_carriertracking_cc_sptr_start", _wrap_pll_carriertracking_cc_sptr_start, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_start(pll_carriertracking_cc_sptr self) -> bool"},
	 { (char *)"pll_carriertracking_cc_sptr_stop", _wrap_pll_carriertracking_cc_sptr_stop, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_stop(pll_carriertracking_cc_sptr self) -> bool"},
	 { (char *)"pll_carriertracking_cc_sptr_nitems_read", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_nitems_read(pll_carriertracking_cc_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"pll_carriertracking_cc_sptr_nitems_written", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_nitems_written(pll_carriertracking_cc_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"pll_carriertracking_cc_sptr_max_noutput_items", _wrap_pll_carriertracking_cc_sptr_max_noutput_items, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_max_noutput_items(pll_carriertracking_cc_sptr self) -> int"},
	 { (char *)"pll_carriertracking_cc_sptr_set_max_noutput_items", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_set_max_noutput_items(pll_carriertracking_cc_sptr self, int m)"},
	 { (char *)"pll_carriertracking_cc_sptr_unset_max_noutput_items", _wrap_pll_carriertracking_cc_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_unset_max_noutput_items(pll_carriertracking_cc_sptr self)"},
	 { (char *)"pll_carriertracking_cc_sptr_is_set_max_noutput_items", _wrap_pll_carriertracking_cc_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_is_set_max_noutput_items(pll_carriertracking_cc_sptr self) -> bool"},
	 { (char *)"pll_carriertracking_cc_sptr_max_output_buffer", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_max_output_buffer(pll_carriertracking_cc_sptr self, int i) -> long"},
	 { (char *)"pll_carriertracking_cc_sptr_set_max_output_buffer", _wrap_pll_carriertracking_cc_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"pll_carriertracking_cc_sptr_set_max_output_buffer(pll_carriertracking_cc_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"pll_carriertracking_cc_sptr_min_output_buffer", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_min_output_buffer(pll_carriertracking_cc_sptr self, int i) -> long"},
	 { (char *)"pll_carriertracking_cc_sptr_set_min_output_buffer", _wrap_pll_carriertracking_cc_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"pll_carriertracking_cc_sptr_set_min_output_buffer(pll_carriertracking_cc_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"pll_carriertracking_cc_sptr_detail", _wrap_pll_carriertracking_cc_sptr_detail, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_detail(pll_carriertracking_cc_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"pll_carriertracking_cc_sptr_set_detail", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_set_detail(pll_carriertracking_cc_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"pll_carriertracking_cc_sptr_name", _wrap_pll_carriertracking_cc_sptr_name, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_name(pll_carriertracking_cc_sptr self) -> string"},
	 { (char *)"pll_carriertracking_cc_sptr_symbol_name", _wrap_pll_carriertracking_cc_sptr_symbol_name, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_symbol_name(pll_carriertracking_cc_sptr self) -> string"},
	 { (char *)"pll_carriertracking_cc_sptr_input_signature", _wrap_pll_carriertracking_cc_sptr_input_signature, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_input_signature(pll_carriertracking_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"pll_carriertracking_cc_sptr_output_signature", _wrap_pll_carriertracking_cc_sptr_output_signature, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_output_signature(pll_carriertracking_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"pll_carriertracking_cc_sptr_unique_id", _wrap_pll_carriertracking_cc_sptr_unique_id, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_unique_id(pll_carriertracking_cc_sptr self) -> long"},
	 { (char *)"pll_carriertracking_cc_sptr_to_basic_block", _wrap_pll_carriertracking_cc_sptr_to_basic_block, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_to_basic_block(pll_carriertracking_cc_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"pll_carriertracking_cc_sptr_check_topology", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_check_topology(pll_carriertracking_cc_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"pll_carriertracking_cc_sptr_alias", _wrap_pll_carriertracking_cc_sptr_alias, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_alias(pll_carriertracking_cc_sptr self) -> string"},
	 { (char *)"pll_carriertracking_cc_sptr_set_block_alias", (PyCFunction) _wrap_pll_carriertracking_cc_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"pll_carriertracking_cc_sptr_set_block_alias(pll_carriertracking_cc_sptr self, string name)"},
	 { (char *)"pll_carriertracking_cc_sptr__post", (PyCFunction) _wrap_pll_carriertracking_cc_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"pll_carriertracking_cc_sptr__post(pll_carriertracking_cc_sptr self, pmt_t which_port, \n"
		"    pmt_t msg)\n"
		""},
	 { (char *)"pll_carriertracking_cc_sptr_message_ports_in", _wrap_pll_carriertracking_cc_sptr_message_ports_in, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_message_ports_in(pll_carriertracking_cc_sptr self) -> pmt_t"},
	 { (char *)"pll_carriertracking_cc_sptr_message_ports_out", _wrap_pll_carriertracking_cc_sptr_message_ports_out, METH_VARARGS, (char *)"pll_carriertracking_cc_sptr_message_ports_out(pll_carriertracking_cc_sptr self) -> pmt_t"},
	 { (char *)"pll_carriertracking_cc_sptr_swigregister", pll_carriertracking_cc_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pll_freqdet_cf_sptr", _wrap_new_pll_freqdet_cf_sptr, METH_VARARGS, (char *)"\n"
		"pll_freqdet_cf_sptr()\n"
		"new_pll_freqdet_cf_sptr(pll_freqdet_cf p) -> pll_freqdet_cf_sptr\n"
		""},
	 { (char *)"pll_freqdet_cf_sptr___deref__", _wrap_pll_freqdet_cf_sptr___deref__, METH_VARARGS, (char *)"pll_freqdet_cf_sptr___deref__(pll_freqdet_cf_sptr self) -> pll_freqdet_cf"},
	 { (char *)"delete_pll_freqdet_cf_sptr", _wrap_delete_pll_freqdet_cf_sptr, METH_VARARGS, (char *)"delete_pll_freqdet_cf_sptr(pll_freqdet_cf_sptr self)"},
	 { (char *)"pll_freqdet_cf_sptr_make", (PyCFunction) _wrap_pll_freqdet_cf_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"pll_freqdet_cf_sptr_make(pll_freqdet_cf_sptr self, float loop_bw, float max_freq, \n"
		"    float min_freq) -> sptr\n"
		""},
	 { (char *)"pll_freqdet_cf_sptr_set_loop_bandwidth", (PyCFunction) _wrap_pll_freqdet_cf_sptr_set_loop_bandwidth, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_set_loop_bandwidth(pll_freqdet_cf_sptr self, float bw)"},
	 { (char *)"pll_freqdet_cf_sptr_set_damping_factor", (PyCFunction) _wrap_pll_freqdet_cf_sptr_set_damping_factor, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_set_damping_factor(pll_freqdet_cf_sptr self, float df)"},
	 { (char *)"pll_freqdet_cf_sptr_set_alpha", (PyCFunction) _wrap_pll_freqdet_cf_sptr_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_set_alpha(pll_freqdet_cf_sptr self, float alpha)"},
	 { (char *)"pll_freqdet_cf_sptr_set_beta", (PyCFunction) _wrap_pll_freqdet_cf_sptr_set_beta, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_set_beta(pll_freqdet_cf_sptr self, float beta)"},
	 { (char *)"pll_freqdet_cf_sptr_set_frequency", (PyCFunction) _wrap_pll_freqdet_cf_sptr_set_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_set_frequency(pll_freqdet_cf_sptr self, float freq)"},
	 { (char *)"pll_freqdet_cf_sptr_set_phase", (PyCFunction) _wrap_pll_freqdet_cf_sptr_set_phase, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_set_phase(pll_freqdet_cf_sptr self, float phase)"},
	 { (char *)"pll_freqdet_cf_sptr_set_min_freq", (PyCFunction) _wrap_pll_freqdet_cf_sptr_set_min_freq, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_set_min_freq(pll_freqdet_cf_sptr self, float freq)"},
	 { (char *)"pll_freqdet_cf_sptr_set_max_freq", (PyCFunction) _wrap_pll_freqdet_cf_sptr_set_max_freq, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_set_max_freq(pll_freqdet_cf_sptr self, float freq)"},
	 { (char *)"pll_freqdet_cf_sptr_get_loop_bandwidth", _wrap_pll_freqdet_cf_sptr_get_loop_bandwidth, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_get_loop_bandwidth(pll_freqdet_cf_sptr self) -> float"},
	 { (char *)"pll_freqdet_cf_sptr_get_damping_factor", _wrap_pll_freqdet_cf_sptr_get_damping_factor, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_get_damping_factor(pll_freqdet_cf_sptr self) -> float"},
	 { (char *)"pll_freqdet_cf_sptr_get_alpha", _wrap_pll_freqdet_cf_sptr_get_alpha, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_get_alpha(pll_freqdet_cf_sptr self) -> float"},
	 { (char *)"pll_freqdet_cf_sptr_get_beta", _wrap_pll_freqdet_cf_sptr_get_beta, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_get_beta(pll_freqdet_cf_sptr self) -> float"},
	 { (char *)"pll_freqdet_cf_sptr_get_frequency", _wrap_pll_freqdet_cf_sptr_get_frequency, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_get_frequency(pll_freqdet_cf_sptr self) -> float"},
	 { (char *)"pll_freqdet_cf_sptr_get_phase", _wrap_pll_freqdet_cf_sptr_get_phase, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_get_phase(pll_freqdet_cf_sptr self) -> float"},
	 { (char *)"pll_freqdet_cf_sptr_get_min_freq", _wrap_pll_freqdet_cf_sptr_get_min_freq, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_get_min_freq(pll_freqdet_cf_sptr self) -> float"},
	 { (char *)"pll_freqdet_cf_sptr_get_max_freq", _wrap_pll_freqdet_cf_sptr_get_max_freq, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_get_max_freq(pll_freqdet_cf_sptr self) -> float"},
	 { (char *)"pll_freqdet_cf_sptr_history", _wrap_pll_freqdet_cf_sptr_history, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_history(pll_freqdet_cf_sptr self) -> unsigned int"},
	 { (char *)"pll_freqdet_cf_sptr_output_multiple", _wrap_pll_freqdet_cf_sptr_output_multiple, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_output_multiple(pll_freqdet_cf_sptr self) -> int"},
	 { (char *)"pll_freqdet_cf_sptr_relative_rate", _wrap_pll_freqdet_cf_sptr_relative_rate, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_relative_rate(pll_freqdet_cf_sptr self) -> double"},
	 { (char *)"pll_freqdet_cf_sptr_start", _wrap_pll_freqdet_cf_sptr_start, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_start(pll_freqdet_cf_sptr self) -> bool"},
	 { (char *)"pll_freqdet_cf_sptr_stop", _wrap_pll_freqdet_cf_sptr_stop, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_stop(pll_freqdet_cf_sptr self) -> bool"},
	 { (char *)"pll_freqdet_cf_sptr_nitems_read", (PyCFunction) _wrap_pll_freqdet_cf_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_nitems_read(pll_freqdet_cf_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"pll_freqdet_cf_sptr_nitems_written", (PyCFunction) _wrap_pll_freqdet_cf_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_nitems_written(pll_freqdet_cf_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"pll_freqdet_cf_sptr_max_noutput_items", _wrap_pll_freqdet_cf_sptr_max_noutput_items, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_max_noutput_items(pll_freqdet_cf_sptr self) -> int"},
	 { (char *)"pll_freqdet_cf_sptr_set_max_noutput_items", (PyCFunction) _wrap_pll_freqdet_cf_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_set_max_noutput_items(pll_freqdet_cf_sptr self, int m)"},
	 { (char *)"pll_freqdet_cf_sptr_unset_max_noutput_items", _wrap_pll_freqdet_cf_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_unset_max_noutput_items(pll_freqdet_cf_sptr self)"},
	 { (char *)"pll_freqdet_cf_sptr_is_set_max_noutput_items", _wrap_pll_freqdet_cf_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_is_set_max_noutput_items(pll_freqdet_cf_sptr self) -> bool"},
	 { (char *)"pll_freqdet_cf_sptr_max_output_buffer", (PyCFunction) _wrap_pll_freqdet_cf_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_max_output_buffer(pll_freqdet_cf_sptr self, int i) -> long"},
	 { (char *)"pll_freqdet_cf_sptr_set_max_output_buffer", _wrap_pll_freqdet_cf_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"pll_freqdet_cf_sptr_set_max_output_buffer(pll_freqdet_cf_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"pll_freqdet_cf_sptr_min_output_buffer", (PyCFunction) _wrap_pll_freqdet_cf_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_min_output_buffer(pll_freqdet_cf_sptr self, int i) -> long"},
	 { (char *)"pll_freqdet_cf_sptr_set_min_output_buffer", _wrap_pll_freqdet_cf_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"pll_freqdet_cf_sptr_set_min_output_buffer(pll_freqdet_cf_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"pll_freqdet_cf_sptr_detail", _wrap_pll_freqdet_cf_sptr_detail, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_detail(pll_freqdet_cf_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"pll_freqdet_cf_sptr_set_detail", (PyCFunction) _wrap_pll_freqdet_cf_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_set_detail(pll_freqdet_cf_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"pll_freqdet_cf_sptr_name", _wrap_pll_freqdet_cf_sptr_name, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_name(pll_freqdet_cf_sptr self) -> string"},
	 { (char *)"pll_freqdet_cf_sptr_symbol_name", _wrap_pll_freqdet_cf_sptr_symbol_name, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_symbol_name(pll_freqdet_cf_sptr self) -> string"},
	 { (char *)"pll_freqdet_cf_sptr_input_signature", _wrap_pll_freqdet_cf_sptr_input_signature, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_input_signature(pll_freqdet_cf_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"pll_freqdet_cf_sptr_output_signature", _wrap_pll_freqdet_cf_sptr_output_signature, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_output_signature(pll_freqdet_cf_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"pll_freqdet_cf_sptr_unique_id", _wrap_pll_freqdet_cf_sptr_unique_id, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_unique_id(pll_freqdet_cf_sptr self) -> long"},
	 { (char *)"pll_freqdet_cf_sptr_to_basic_block", _wrap_pll_freqdet_cf_sptr_to_basic_block, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_to_basic_block(pll_freqdet_cf_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"pll_freqdet_cf_sptr_check_topology", (PyCFunction) _wrap_pll_freqdet_cf_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_check_topology(pll_freqdet_cf_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"pll_freqdet_cf_sptr_alias", _wrap_pll_freqdet_cf_sptr_alias, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_alias(pll_freqdet_cf_sptr self) -> string"},
	 { (char *)"pll_freqdet_cf_sptr_set_block_alias", (PyCFunction) _wrap_pll_freqdet_cf_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr_set_block_alias(pll_freqdet_cf_sptr self, string name)"},
	 { (char *)"pll_freqdet_cf_sptr__post", (PyCFunction) _wrap_pll_freqdet_cf_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"pll_freqdet_cf_sptr__post(pll_freqdet_cf_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"pll_freqdet_cf_sptr_message_ports_in", _wrap_pll_freqdet_cf_sptr_message_ports_in, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_message_ports_in(pll_freqdet_cf_sptr self) -> pmt_t"},
	 { (char *)"pll_freqdet_cf_sptr_message_ports_out", _wrap_pll_freqdet_cf_sptr_message_ports_out, METH_VARARGS, (char *)"pll_freqdet_cf_sptr_message_ports_out(pll_freqdet_cf_sptr self) -> pmt_t"},
	 { (char *)"pll_freqdet_cf_sptr_swigregister", pll_freqdet_cf_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pll_refout_cc_sptr", _wrap_new_pll_refout_cc_sptr, METH_VARARGS, (char *)"\n"
		"pll_refout_cc_sptr()\n"
		"new_pll_refout_cc_sptr(pll_refout_cc p) -> pll_refout_cc_sptr\n"
		""},
	 { (char *)"pll_refout_cc_sptr___deref__", _wrap_pll_refout_cc_sptr___deref__, METH_VARARGS, (char *)"pll_refout_cc_sptr___deref__(pll_refout_cc_sptr self) -> pll_refout_cc"},
	 { (char *)"delete_pll_refout_cc_sptr", _wrap_delete_pll_refout_cc_sptr, METH_VARARGS, (char *)"delete_pll_refout_cc_sptr(pll_refout_cc_sptr self)"},
	 { (char *)"pll_refout_cc_sptr_make", (PyCFunction) _wrap_pll_refout_cc_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"pll_refout_cc_sptr_make(pll_refout_cc_sptr self, float loop_bw, float max_freq, \n"
		"    float min_freq) -> sptr\n"
		""},
	 { (char *)"pll_refout_cc_sptr_history", _wrap_pll_refout_cc_sptr_history, METH_VARARGS, (char *)"pll_refout_cc_sptr_history(pll_refout_cc_sptr self) -> unsigned int"},
	 { (char *)"pll_refout_cc_sptr_output_multiple", _wrap_pll_refout_cc_sptr_output_multiple, METH_VARARGS, (char *)"pll_refout_cc_sptr_output_multiple(pll_refout_cc_sptr self) -> int"},
	 { (char *)"pll_refout_cc_sptr_relative_rate", _wrap_pll_refout_cc_sptr_relative_rate, METH_VARARGS, (char *)"pll_refout_cc_sptr_relative_rate(pll_refout_cc_sptr self) -> double"},
	 { (char *)"pll_refout_cc_sptr_start", _wrap_pll_refout_cc_sptr_start, METH_VARARGS, (char *)"pll_refout_cc_sptr_start(pll_refout_cc_sptr self) -> bool"},
	 { (char *)"pll_refout_cc_sptr_stop", _wrap_pll_refout_cc_sptr_stop, METH_VARARGS, (char *)"pll_refout_cc_sptr_stop(pll_refout_cc_sptr self) -> bool"},
	 { (char *)"pll_refout_cc_sptr_nitems_read", (PyCFunction) _wrap_pll_refout_cc_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"pll_refout_cc_sptr_nitems_read(pll_refout_cc_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"pll_refout_cc_sptr_nitems_written", (PyCFunction) _wrap_pll_refout_cc_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"pll_refout_cc_sptr_nitems_written(pll_refout_cc_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"pll_refout_cc_sptr_max_noutput_items", _wrap_pll_refout_cc_sptr_max_noutput_items, METH_VARARGS, (char *)"pll_refout_cc_sptr_max_noutput_items(pll_refout_cc_sptr self) -> int"},
	 { (char *)"pll_refout_cc_sptr_set_max_noutput_items", (PyCFunction) _wrap_pll_refout_cc_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"pll_refout_cc_sptr_set_max_noutput_items(pll_refout_cc_sptr self, int m)"},
	 { (char *)"pll_refout_cc_sptr_unset_max_noutput_items", _wrap_pll_refout_cc_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"pll_refout_cc_sptr_unset_max_noutput_items(pll_refout_cc_sptr self)"},
	 { (char *)"pll_refout_cc_sptr_is_set_max_noutput_items", _wrap_pll_refout_cc_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"pll_refout_cc_sptr_is_set_max_noutput_items(pll_refout_cc_sptr self) -> bool"},
	 { (char *)"pll_refout_cc_sptr_max_output_buffer", (PyCFunction) _wrap_pll_refout_cc_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"pll_refout_cc_sptr_max_output_buffer(pll_refout_cc_sptr self, int i) -> long"},
	 { (char *)"pll_refout_cc_sptr_set_max_output_buffer", _wrap_pll_refout_cc_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"pll_refout_cc_sptr_set_max_output_buffer(pll_refout_cc_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"pll_refout_cc_sptr_min_output_buffer", (PyCFunction) _wrap_pll_refout_cc_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"pll_refout_cc_sptr_min_output_buffer(pll_refout_cc_sptr self, int i) -> long"},
	 { (char *)"pll_refout_cc_sptr_set_min_output_buffer", _wrap_pll_refout_cc_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"pll_refout_cc_sptr_set_min_output_buffer(pll_refout_cc_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"pll_refout_cc_sptr_detail", _wrap_pll_refout_cc_sptr_detail, METH_VARARGS, (char *)"pll_refout_cc_sptr_detail(pll_refout_cc_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"pll_refout_cc_sptr_set_detail", (PyCFunction) _wrap_pll_refout_cc_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"pll_refout_cc_sptr_set_detail(pll_refout_cc_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"pll_refout_cc_sptr_name", _wrap_pll_refout_cc_sptr_name, METH_VARARGS, (char *)"pll_refout_cc_sptr_name(pll_refout_cc_sptr self) -> string"},
	 { (char *)"pll_refout_cc_sptr_symbol_name", _wrap_pll_refout_cc_sptr_symbol_name, METH_VARARGS, (char *)"pll_refout_cc_sptr_symbol_name(pll_refout_cc_sptr self) -> string"},
	 { (char *)"pll_refout_cc_sptr_input_signature", _wrap_pll_refout_cc_sptr_input_signature, METH_VARARGS, (char *)"pll_refout_cc_sptr_input_signature(pll_refout_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"pll_refout_cc_sptr_output_signature", _wrap_pll_refout_cc_sptr_output_signature, METH_VARARGS, (char *)"pll_refout_cc_sptr_output_signature(pll_refout_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"pll_refout_cc_sptr_unique_id", _wrap_pll_refout_cc_sptr_unique_id, METH_VARARGS, (char *)"pll_refout_cc_sptr_unique_id(pll_refout_cc_sptr self) -> long"},
	 { (char *)"pll_refout_cc_sptr_to_basic_block", _wrap_pll_refout_cc_sptr_to_basic_block, METH_VARARGS, (char *)"pll_refout_cc_sptr_to_basic_block(pll_refout_cc_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"pll_refout_cc_sptr_check_topology", (PyCFunction) _wrap_pll_refout_cc_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"pll_refout_cc_sptr_check_topology(pll_refout_cc_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"pll_refout_cc_sptr_alias", _wrap_pll_refout_cc_sptr_alias, METH_VARARGS, (char *)"pll_refout_cc_sptr_alias(pll_refout_cc_sptr self) -> string"},
	 { (char *)"pll_refout_cc_sptr_set_block_alias", (PyCFunction) _wrap_pll_refout_cc_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"pll_refout_cc_sptr_set_block_alias(pll_refout_cc_sptr self, string name)"},
	 { (char *)"pll_refout_cc_sptr__post", (PyCFunction) _wrap_pll_refout_cc_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"pll_refout_cc_sptr__post(pll_refout_cc_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"pll_refout_cc_sptr_message_ports_in", _wrap_pll_refout_cc_sptr_message_ports_in, METH_VARARGS, (char *)"pll_refout_cc_sptr_message_ports_in(pll_refout_cc_sptr self) -> pmt_t"},
	 { (char *)"pll_refout_cc_sptr_message_ports_out", _wrap_pll_refout_cc_sptr_message_ports_out, METH_VARARGS, (char *)"pll_refout_cc_sptr_message_ports_out(pll_refout_cc_sptr self) -> pmt_t"},
	 { (char *)"pll_refout_cc_sptr_swigregister", pll_refout_cc_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_probe_avg_mag_sqrd_c_sptr", _wrap_new_probe_avg_mag_sqrd_c_sptr, METH_VARARGS, (char *)"\n"
		"probe_avg_mag_sqrd_c_sptr()\n"
		"new_probe_avg_mag_sqrd_c_sptr(probe_avg_mag_sqrd_c p) -> probe_avg_mag_sqrd_c_sptr\n"
		""},
	 { (char *)"probe_avg_mag_sqrd_c_sptr___deref__", _wrap_probe_avg_mag_sqrd_c_sptr___deref__, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr___deref__(probe_avg_mag_sqrd_c_sptr self) -> probe_avg_mag_sqrd_c"},
	 { (char *)"delete_probe_avg_mag_sqrd_c_sptr", _wrap_delete_probe_avg_mag_sqrd_c_sptr, METH_VARARGS, (char *)"delete_probe_avg_mag_sqrd_c_sptr(probe_avg_mag_sqrd_c_sptr self)"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_make", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"probe_avg_mag_sqrd_c_sptr_make(probe_avg_mag_sqrd_c_sptr self, double threshold_db, \n"
		"    double alpha = 0.0001) -> sptr\n"
		""},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_unmuted", _wrap_probe_avg_mag_sqrd_c_sptr_unmuted, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_unmuted(probe_avg_mag_sqrd_c_sptr self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_level", _wrap_probe_avg_mag_sqrd_c_sptr_level, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_level(probe_avg_mag_sqrd_c_sptr self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_threshold", _wrap_probe_avg_mag_sqrd_c_sptr_threshold, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_threshold(probe_avg_mag_sqrd_c_sptr self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_set_alpha", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_sptr_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_sptr_set_alpha(probe_avg_mag_sqrd_c_sptr self, double alpha)"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_set_threshold", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_sptr_set_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_sptr_set_threshold(probe_avg_mag_sqrd_c_sptr self, double decibels)"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_history", _wrap_probe_avg_mag_sqrd_c_sptr_history, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_history(probe_avg_mag_sqrd_c_sptr self) -> unsigned int"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_output_multiple", _wrap_probe_avg_mag_sqrd_c_sptr_output_multiple, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_output_multiple(probe_avg_mag_sqrd_c_sptr self) -> int"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_relative_rate", _wrap_probe_avg_mag_sqrd_c_sptr_relative_rate, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_relative_rate(probe_avg_mag_sqrd_c_sptr self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_start", _wrap_probe_avg_mag_sqrd_c_sptr_start, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_start(probe_avg_mag_sqrd_c_sptr self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_stop", _wrap_probe_avg_mag_sqrd_c_sptr_stop, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_stop(probe_avg_mag_sqrd_c_sptr self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_nitems_read", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_sptr_nitems_read(probe_avg_mag_sqrd_c_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_nitems_written", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_sptr_nitems_written(probe_avg_mag_sqrd_c_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_max_noutput_items", _wrap_probe_avg_mag_sqrd_c_sptr_max_noutput_items, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_max_noutput_items(probe_avg_mag_sqrd_c_sptr self) -> int"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_set_max_noutput_items", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_sptr_set_max_noutput_items(probe_avg_mag_sqrd_c_sptr self, int m)"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_unset_max_noutput_items", _wrap_probe_avg_mag_sqrd_c_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_unset_max_noutput_items(probe_avg_mag_sqrd_c_sptr self)"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_is_set_max_noutput_items", _wrap_probe_avg_mag_sqrd_c_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_is_set_max_noutput_items(probe_avg_mag_sqrd_c_sptr self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_max_output_buffer", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_sptr_max_output_buffer(probe_avg_mag_sqrd_c_sptr self, int i) -> long"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_set_max_output_buffer", _wrap_probe_avg_mag_sqrd_c_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"probe_avg_mag_sqrd_c_sptr_set_max_output_buffer(probe_avg_mag_sqrd_c_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_min_output_buffer", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_sptr_min_output_buffer(probe_avg_mag_sqrd_c_sptr self, int i) -> long"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_set_min_output_buffer", _wrap_probe_avg_mag_sqrd_c_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"probe_avg_mag_sqrd_c_sptr_set_min_output_buffer(probe_avg_mag_sqrd_c_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_detail", _wrap_probe_avg_mag_sqrd_c_sptr_detail, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_detail(probe_avg_mag_sqrd_c_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_set_detail", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_sptr_set_detail(probe_avg_mag_sqrd_c_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_name", _wrap_probe_avg_mag_sqrd_c_sptr_name, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_name(probe_avg_mag_sqrd_c_sptr self) -> string"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_symbol_name", _wrap_probe_avg_mag_sqrd_c_sptr_symbol_name, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_symbol_name(probe_avg_mag_sqrd_c_sptr self) -> string"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_input_signature", _wrap_probe_avg_mag_sqrd_c_sptr_input_signature, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_input_signature(probe_avg_mag_sqrd_c_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_output_signature", _wrap_probe_avg_mag_sqrd_c_sptr_output_signature, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_output_signature(probe_avg_mag_sqrd_c_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_unique_id", _wrap_probe_avg_mag_sqrd_c_sptr_unique_id, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_unique_id(probe_avg_mag_sqrd_c_sptr self) -> long"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_to_basic_block", _wrap_probe_avg_mag_sqrd_c_sptr_to_basic_block, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_to_basic_block(probe_avg_mag_sqrd_c_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_check_topology", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_sptr_check_topology(probe_avg_mag_sqrd_c_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_alias", _wrap_probe_avg_mag_sqrd_c_sptr_alias, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_alias(probe_avg_mag_sqrd_c_sptr self) -> string"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_set_block_alias", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_sptr_set_block_alias(probe_avg_mag_sqrd_c_sptr self, string name)"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr__post", (PyCFunction) _wrap_probe_avg_mag_sqrd_c_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_c_sptr__post(probe_avg_mag_sqrd_c_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_message_ports_in", _wrap_probe_avg_mag_sqrd_c_sptr_message_ports_in, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_message_ports_in(probe_avg_mag_sqrd_c_sptr self) -> pmt_t"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_message_ports_out", _wrap_probe_avg_mag_sqrd_c_sptr_message_ports_out, METH_VARARGS, (char *)"probe_avg_mag_sqrd_c_sptr_message_ports_out(probe_avg_mag_sqrd_c_sptr self) -> pmt_t"},
	 { (char *)"probe_avg_mag_sqrd_c_sptr_swigregister", probe_avg_mag_sqrd_c_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_probe_avg_mag_sqrd_cf_sptr", _wrap_new_probe_avg_mag_sqrd_cf_sptr, METH_VARARGS, (char *)"\n"
		"probe_avg_mag_sqrd_cf_sptr()\n"
		"new_probe_avg_mag_sqrd_cf_sptr(probe_avg_mag_sqrd_cf p) -> probe_avg_mag_sqrd_cf_sptr\n"
		""},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr___deref__", _wrap_probe_avg_mag_sqrd_cf_sptr___deref__, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr___deref__(probe_avg_mag_sqrd_cf_sptr self) -> probe_avg_mag_sqrd_cf"},
	 { (char *)"delete_probe_avg_mag_sqrd_cf_sptr", _wrap_delete_probe_avg_mag_sqrd_cf_sptr, METH_VARARGS, (char *)"delete_probe_avg_mag_sqrd_cf_sptr(probe_avg_mag_sqrd_cf_sptr self)"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_make", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"probe_avg_mag_sqrd_cf_sptr_make(probe_avg_mag_sqrd_cf_sptr self, double threshold_db, \n"
		"    double alpha = 0.0001) -> sptr\n"
		""},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_unmuted", _wrap_probe_avg_mag_sqrd_cf_sptr_unmuted, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_unmuted(probe_avg_mag_sqrd_cf_sptr self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_level", _wrap_probe_avg_mag_sqrd_cf_sptr_level, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_level(probe_avg_mag_sqrd_cf_sptr self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_threshold", _wrap_probe_avg_mag_sqrd_cf_sptr_threshold, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_threshold(probe_avg_mag_sqrd_cf_sptr self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_set_alpha", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_sptr_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_cf_sptr_set_alpha(probe_avg_mag_sqrd_cf_sptr self, double alpha)"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_set_threshold", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_sptr_set_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_cf_sptr_set_threshold(probe_avg_mag_sqrd_cf_sptr self, double decibels)"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_history", _wrap_probe_avg_mag_sqrd_cf_sptr_history, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_history(probe_avg_mag_sqrd_cf_sptr self) -> unsigned int"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_output_multiple", _wrap_probe_avg_mag_sqrd_cf_sptr_output_multiple, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_output_multiple(probe_avg_mag_sqrd_cf_sptr self) -> int"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_relative_rate", _wrap_probe_avg_mag_sqrd_cf_sptr_relative_rate, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_relative_rate(probe_avg_mag_sqrd_cf_sptr self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_start", _wrap_probe_avg_mag_sqrd_cf_sptr_start, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_start(probe_avg_mag_sqrd_cf_sptr self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_stop", _wrap_probe_avg_mag_sqrd_cf_sptr_stop, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_stop(probe_avg_mag_sqrd_cf_sptr self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_nitems_read", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_cf_sptr_nitems_read(probe_avg_mag_sqrd_cf_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_nitems_written", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_cf_sptr_nitems_written(probe_avg_mag_sqrd_cf_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_max_noutput_items", _wrap_probe_avg_mag_sqrd_cf_sptr_max_noutput_items, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_max_noutput_items(probe_avg_mag_sqrd_cf_sptr self) -> int"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_set_max_noutput_items", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_cf_sptr_set_max_noutput_items(probe_avg_mag_sqrd_cf_sptr self, int m)"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_unset_max_noutput_items", _wrap_probe_avg_mag_sqrd_cf_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_unset_max_noutput_items(probe_avg_mag_sqrd_cf_sptr self)"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_is_set_max_noutput_items", _wrap_probe_avg_mag_sqrd_cf_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_is_set_max_noutput_items(probe_avg_mag_sqrd_cf_sptr self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_max_output_buffer", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_cf_sptr_max_output_buffer(probe_avg_mag_sqrd_cf_sptr self, int i) -> long"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer", _wrap_probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"probe_avg_mag_sqrd_cf_sptr_set_max_output_buffer(probe_avg_mag_sqrd_cf_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_min_output_buffer", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_cf_sptr_min_output_buffer(probe_avg_mag_sqrd_cf_sptr self, int i) -> long"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer", _wrap_probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"probe_avg_mag_sqrd_cf_sptr_set_min_output_buffer(probe_avg_mag_sqrd_cf_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_detail", _wrap_probe_avg_mag_sqrd_cf_sptr_detail, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_detail(probe_avg_mag_sqrd_cf_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_set_detail", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_cf_sptr_set_detail(probe_avg_mag_sqrd_cf_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_name", _wrap_probe_avg_mag_sqrd_cf_sptr_name, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_name(probe_avg_mag_sqrd_cf_sptr self) -> string"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_symbol_name", _wrap_probe_avg_mag_sqrd_cf_sptr_symbol_name, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_symbol_name(probe_avg_mag_sqrd_cf_sptr self) -> string"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_input_signature", _wrap_probe_avg_mag_sqrd_cf_sptr_input_signature, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_input_signature(probe_avg_mag_sqrd_cf_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_output_signature", _wrap_probe_avg_mag_sqrd_cf_sptr_output_signature, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_output_signature(probe_avg_mag_sqrd_cf_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_unique_id", _wrap_probe_avg_mag_sqrd_cf_sptr_unique_id, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_unique_id(probe_avg_mag_sqrd_cf_sptr self) -> long"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_to_basic_block", _wrap_probe_avg_mag_sqrd_cf_sptr_to_basic_block, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_to_basic_block(probe_avg_mag_sqrd_cf_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_check_topology", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_cf_sptr_check_topology(probe_avg_mag_sqrd_cf_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_alias", _wrap_probe_avg_mag_sqrd_cf_sptr_alias, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_alias(probe_avg_mag_sqrd_cf_sptr self) -> string"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_set_block_alias", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_cf_sptr_set_block_alias(probe_avg_mag_sqrd_cf_sptr self, string name)"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr__post", (PyCFunction) _wrap_probe_avg_mag_sqrd_cf_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"probe_avg_mag_sqrd_cf_sptr__post(probe_avg_mag_sqrd_cf_sptr self, pmt_t which_port, \n"
		"    pmt_t msg)\n"
		""},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_message_ports_in", _wrap_probe_avg_mag_sqrd_cf_sptr_message_ports_in, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_message_ports_in(probe_avg_mag_sqrd_cf_sptr self) -> pmt_t"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_message_ports_out", _wrap_probe_avg_mag_sqrd_cf_sptr_message_ports_out, METH_VARARGS, (char *)"probe_avg_mag_sqrd_cf_sptr_message_ports_out(probe_avg_mag_sqrd_cf_sptr self) -> pmt_t"},
	 { (char *)"probe_avg_mag_sqrd_cf_sptr_swigregister", probe_avg_mag_sqrd_cf_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_probe_avg_mag_sqrd_f_sptr", _wrap_new_probe_avg_mag_sqrd_f_sptr, METH_VARARGS, (char *)"\n"
		"probe_avg_mag_sqrd_f_sptr()\n"
		"new_probe_avg_mag_sqrd_f_sptr(probe_avg_mag_sqrd_f p) -> probe_avg_mag_sqrd_f_sptr\n"
		""},
	 { (char *)"probe_avg_mag_sqrd_f_sptr___deref__", _wrap_probe_avg_mag_sqrd_f_sptr___deref__, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr___deref__(probe_avg_mag_sqrd_f_sptr self) -> probe_avg_mag_sqrd_f"},
	 { (char *)"delete_probe_avg_mag_sqrd_f_sptr", _wrap_delete_probe_avg_mag_sqrd_f_sptr, METH_VARARGS, (char *)"delete_probe_avg_mag_sqrd_f_sptr(probe_avg_mag_sqrd_f_sptr self)"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_make", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"probe_avg_mag_sqrd_f_sptr_make(probe_avg_mag_sqrd_f_sptr self, double threshold_db, \n"
		"    double alpha = 0.0001) -> sptr\n"
		""},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_unmuted", _wrap_probe_avg_mag_sqrd_f_sptr_unmuted, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_unmuted(probe_avg_mag_sqrd_f_sptr self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_level", _wrap_probe_avg_mag_sqrd_f_sptr_level, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_level(probe_avg_mag_sqrd_f_sptr self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_threshold", _wrap_probe_avg_mag_sqrd_f_sptr_threshold, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_threshold(probe_avg_mag_sqrd_f_sptr self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_set_alpha", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_sptr_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_sptr_set_alpha(probe_avg_mag_sqrd_f_sptr self, double alpha)"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_set_threshold", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_sptr_set_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_sptr_set_threshold(probe_avg_mag_sqrd_f_sptr self, double decibels)"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_history", _wrap_probe_avg_mag_sqrd_f_sptr_history, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_history(probe_avg_mag_sqrd_f_sptr self) -> unsigned int"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_output_multiple", _wrap_probe_avg_mag_sqrd_f_sptr_output_multiple, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_output_multiple(probe_avg_mag_sqrd_f_sptr self) -> int"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_relative_rate", _wrap_probe_avg_mag_sqrd_f_sptr_relative_rate, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_relative_rate(probe_avg_mag_sqrd_f_sptr self) -> double"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_start", _wrap_probe_avg_mag_sqrd_f_sptr_start, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_start(probe_avg_mag_sqrd_f_sptr self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_stop", _wrap_probe_avg_mag_sqrd_f_sptr_stop, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_stop(probe_avg_mag_sqrd_f_sptr self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_nitems_read", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_sptr_nitems_read(probe_avg_mag_sqrd_f_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_nitems_written", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_sptr_nitems_written(probe_avg_mag_sqrd_f_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_max_noutput_items", _wrap_probe_avg_mag_sqrd_f_sptr_max_noutput_items, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_max_noutput_items(probe_avg_mag_sqrd_f_sptr self) -> int"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_set_max_noutput_items", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_sptr_set_max_noutput_items(probe_avg_mag_sqrd_f_sptr self, int m)"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_unset_max_noutput_items", _wrap_probe_avg_mag_sqrd_f_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_unset_max_noutput_items(probe_avg_mag_sqrd_f_sptr self)"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_is_set_max_noutput_items", _wrap_probe_avg_mag_sqrd_f_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_is_set_max_noutput_items(probe_avg_mag_sqrd_f_sptr self) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_max_output_buffer", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_sptr_max_output_buffer(probe_avg_mag_sqrd_f_sptr self, int i) -> long"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_set_max_output_buffer", _wrap_probe_avg_mag_sqrd_f_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"probe_avg_mag_sqrd_f_sptr_set_max_output_buffer(probe_avg_mag_sqrd_f_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_min_output_buffer", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_sptr_min_output_buffer(probe_avg_mag_sqrd_f_sptr self, int i) -> long"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_set_min_output_buffer", _wrap_probe_avg_mag_sqrd_f_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"probe_avg_mag_sqrd_f_sptr_set_min_output_buffer(probe_avg_mag_sqrd_f_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_detail", _wrap_probe_avg_mag_sqrd_f_sptr_detail, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_detail(probe_avg_mag_sqrd_f_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_set_detail", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_sptr_set_detail(probe_avg_mag_sqrd_f_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_name", _wrap_probe_avg_mag_sqrd_f_sptr_name, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_name(probe_avg_mag_sqrd_f_sptr self) -> string"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_symbol_name", _wrap_probe_avg_mag_sqrd_f_sptr_symbol_name, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_symbol_name(probe_avg_mag_sqrd_f_sptr self) -> string"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_input_signature", _wrap_probe_avg_mag_sqrd_f_sptr_input_signature, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_input_signature(probe_avg_mag_sqrd_f_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_output_signature", _wrap_probe_avg_mag_sqrd_f_sptr_output_signature, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_output_signature(probe_avg_mag_sqrd_f_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_unique_id", _wrap_probe_avg_mag_sqrd_f_sptr_unique_id, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_unique_id(probe_avg_mag_sqrd_f_sptr self) -> long"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_to_basic_block", _wrap_probe_avg_mag_sqrd_f_sptr_to_basic_block, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_to_basic_block(probe_avg_mag_sqrd_f_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_check_topology", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_sptr_check_topology(probe_avg_mag_sqrd_f_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_alias", _wrap_probe_avg_mag_sqrd_f_sptr_alias, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_alias(probe_avg_mag_sqrd_f_sptr self) -> string"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_set_block_alias", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_sptr_set_block_alias(probe_avg_mag_sqrd_f_sptr self, string name)"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr__post", (PyCFunction) _wrap_probe_avg_mag_sqrd_f_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"probe_avg_mag_sqrd_f_sptr__post(probe_avg_mag_sqrd_f_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_message_ports_in", _wrap_probe_avg_mag_sqrd_f_sptr_message_ports_in, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_message_ports_in(probe_avg_mag_sqrd_f_sptr self) -> pmt_t"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_message_ports_out", _wrap_probe_avg_mag_sqrd_f_sptr_message_ports_out, METH_VARARGS, (char *)"probe_avg_mag_sqrd_f_sptr_message_ports_out(probe_avg_mag_sqrd_f_sptr self) -> pmt_t"},
	 { (char *)"probe_avg_mag_sqrd_f_sptr_swigregister", probe_avg_mag_sqrd_f_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pwr_squelch_cc_sptr", _wrap_new_pwr_squelch_cc_sptr, METH_VARARGS, (char *)"\n"
		"pwr_squelch_cc_sptr()\n"
		"new_pwr_squelch_cc_sptr(pwr_squelch_cc p) -> pwr_squelch_cc_sptr\n"
		""},
	 { (char *)"pwr_squelch_cc_sptr___deref__", _wrap_pwr_squelch_cc_sptr___deref__, METH_VARARGS, (char *)"pwr_squelch_cc_sptr___deref__(pwr_squelch_cc_sptr self) -> pwr_squelch_cc"},
	 { (char *)"delete_pwr_squelch_cc_sptr", _wrap_delete_pwr_squelch_cc_sptr, METH_VARARGS, (char *)"delete_pwr_squelch_cc_sptr(pwr_squelch_cc_sptr self)"},
	 { (char *)"pwr_squelch_cc_sptr_make", (PyCFunction) _wrap_pwr_squelch_cc_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"pwr_squelch_cc_sptr_make(pwr_squelch_cc_sptr self, double db, double alpha = 0.0001, \n"
		"    int ramp = 0, bool gate = False) -> sptr\n"
		""},
	 { (char *)"pwr_squelch_cc_sptr_squelch_range", _wrap_pwr_squelch_cc_sptr_squelch_range, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_squelch_range(pwr_squelch_cc_sptr self) -> __dummy_4__"},
	 { (char *)"pwr_squelch_cc_sptr_threshold", _wrap_pwr_squelch_cc_sptr_threshold, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_threshold(pwr_squelch_cc_sptr self) -> double"},
	 { (char *)"pwr_squelch_cc_sptr_set_threshold", (PyCFunction) _wrap_pwr_squelch_cc_sptr_set_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_sptr_set_threshold(pwr_squelch_cc_sptr self, double db)"},
	 { (char *)"pwr_squelch_cc_sptr_set_alpha", (PyCFunction) _wrap_pwr_squelch_cc_sptr_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_sptr_set_alpha(pwr_squelch_cc_sptr self, double alpha)"},
	 { (char *)"pwr_squelch_cc_sptr_ramp", _wrap_pwr_squelch_cc_sptr_ramp, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_ramp(pwr_squelch_cc_sptr self) -> int"},
	 { (char *)"pwr_squelch_cc_sptr_set_ramp", (PyCFunction) _wrap_pwr_squelch_cc_sptr_set_ramp, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_sptr_set_ramp(pwr_squelch_cc_sptr self, int ramp)"},
	 { (char *)"pwr_squelch_cc_sptr_gate", _wrap_pwr_squelch_cc_sptr_gate, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_gate(pwr_squelch_cc_sptr self) -> bool"},
	 { (char *)"pwr_squelch_cc_sptr_set_gate", (PyCFunction) _wrap_pwr_squelch_cc_sptr_set_gate, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_sptr_set_gate(pwr_squelch_cc_sptr self, bool gate)"},
	 { (char *)"pwr_squelch_cc_sptr_unmuted", _wrap_pwr_squelch_cc_sptr_unmuted, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_unmuted(pwr_squelch_cc_sptr self) -> bool"},
	 { (char *)"pwr_squelch_cc_sptr_history", _wrap_pwr_squelch_cc_sptr_history, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_history(pwr_squelch_cc_sptr self) -> unsigned int"},
	 { (char *)"pwr_squelch_cc_sptr_output_multiple", _wrap_pwr_squelch_cc_sptr_output_multiple, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_output_multiple(pwr_squelch_cc_sptr self) -> int"},
	 { (char *)"pwr_squelch_cc_sptr_relative_rate", _wrap_pwr_squelch_cc_sptr_relative_rate, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_relative_rate(pwr_squelch_cc_sptr self) -> double"},
	 { (char *)"pwr_squelch_cc_sptr_start", _wrap_pwr_squelch_cc_sptr_start, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_start(pwr_squelch_cc_sptr self) -> bool"},
	 { (char *)"pwr_squelch_cc_sptr_stop", _wrap_pwr_squelch_cc_sptr_stop, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_stop(pwr_squelch_cc_sptr self) -> bool"},
	 { (char *)"pwr_squelch_cc_sptr_nitems_read", (PyCFunction) _wrap_pwr_squelch_cc_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_sptr_nitems_read(pwr_squelch_cc_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"pwr_squelch_cc_sptr_nitems_written", (PyCFunction) _wrap_pwr_squelch_cc_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_sptr_nitems_written(pwr_squelch_cc_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"pwr_squelch_cc_sptr_max_noutput_items", _wrap_pwr_squelch_cc_sptr_max_noutput_items, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_max_noutput_items(pwr_squelch_cc_sptr self) -> int"},
	 { (char *)"pwr_squelch_cc_sptr_set_max_noutput_items", (PyCFunction) _wrap_pwr_squelch_cc_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_sptr_set_max_noutput_items(pwr_squelch_cc_sptr self, int m)"},
	 { (char *)"pwr_squelch_cc_sptr_unset_max_noutput_items", _wrap_pwr_squelch_cc_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_unset_max_noutput_items(pwr_squelch_cc_sptr self)"},
	 { (char *)"pwr_squelch_cc_sptr_is_set_max_noutput_items", _wrap_pwr_squelch_cc_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_is_set_max_noutput_items(pwr_squelch_cc_sptr self) -> bool"},
	 { (char *)"pwr_squelch_cc_sptr_max_output_buffer", (PyCFunction) _wrap_pwr_squelch_cc_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_sptr_max_output_buffer(pwr_squelch_cc_sptr self, int i) -> long"},
	 { (char *)"pwr_squelch_cc_sptr_set_max_output_buffer", _wrap_pwr_squelch_cc_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"pwr_squelch_cc_sptr_set_max_output_buffer(pwr_squelch_cc_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"pwr_squelch_cc_sptr_min_output_buffer", (PyCFunction) _wrap_pwr_squelch_cc_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_sptr_min_output_buffer(pwr_squelch_cc_sptr self, int i) -> long"},
	 { (char *)"pwr_squelch_cc_sptr_set_min_output_buffer", _wrap_pwr_squelch_cc_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"pwr_squelch_cc_sptr_set_min_output_buffer(pwr_squelch_cc_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"pwr_squelch_cc_sptr_detail", _wrap_pwr_squelch_cc_sptr_detail, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_detail(pwr_squelch_cc_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"pwr_squelch_cc_sptr_set_detail", (PyCFunction) _wrap_pwr_squelch_cc_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_sptr_set_detail(pwr_squelch_cc_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"pwr_squelch_cc_sptr_name", _wrap_pwr_squelch_cc_sptr_name, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_name(pwr_squelch_cc_sptr self) -> string"},
	 { (char *)"pwr_squelch_cc_sptr_symbol_name", _wrap_pwr_squelch_cc_sptr_symbol_name, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_symbol_name(pwr_squelch_cc_sptr self) -> string"},
	 { (char *)"pwr_squelch_cc_sptr_input_signature", _wrap_pwr_squelch_cc_sptr_input_signature, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_input_signature(pwr_squelch_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"pwr_squelch_cc_sptr_output_signature", _wrap_pwr_squelch_cc_sptr_output_signature, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_output_signature(pwr_squelch_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"pwr_squelch_cc_sptr_unique_id", _wrap_pwr_squelch_cc_sptr_unique_id, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_unique_id(pwr_squelch_cc_sptr self) -> long"},
	 { (char *)"pwr_squelch_cc_sptr_to_basic_block", _wrap_pwr_squelch_cc_sptr_to_basic_block, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_to_basic_block(pwr_squelch_cc_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"pwr_squelch_cc_sptr_check_topology", (PyCFunction) _wrap_pwr_squelch_cc_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_sptr_check_topology(pwr_squelch_cc_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"pwr_squelch_cc_sptr_alias", _wrap_pwr_squelch_cc_sptr_alias, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_alias(pwr_squelch_cc_sptr self) -> string"},
	 { (char *)"pwr_squelch_cc_sptr_set_block_alias", (PyCFunction) _wrap_pwr_squelch_cc_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_sptr_set_block_alias(pwr_squelch_cc_sptr self, string name)"},
	 { (char *)"pwr_squelch_cc_sptr__post", (PyCFunction) _wrap_pwr_squelch_cc_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_cc_sptr__post(pwr_squelch_cc_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"pwr_squelch_cc_sptr_message_ports_in", _wrap_pwr_squelch_cc_sptr_message_ports_in, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_message_ports_in(pwr_squelch_cc_sptr self) -> pmt_t"},
	 { (char *)"pwr_squelch_cc_sptr_message_ports_out", _wrap_pwr_squelch_cc_sptr_message_ports_out, METH_VARARGS, (char *)"pwr_squelch_cc_sptr_message_ports_out(pwr_squelch_cc_sptr self) -> pmt_t"},
	 { (char *)"pwr_squelch_cc_sptr_swigregister", pwr_squelch_cc_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pwr_squelch_ff_sptr", _wrap_new_pwr_squelch_ff_sptr, METH_VARARGS, (char *)"\n"
		"pwr_squelch_ff_sptr()\n"
		"new_pwr_squelch_ff_sptr(pwr_squelch_ff p) -> pwr_squelch_ff_sptr\n"
		""},
	 { (char *)"pwr_squelch_ff_sptr___deref__", _wrap_pwr_squelch_ff_sptr___deref__, METH_VARARGS, (char *)"pwr_squelch_ff_sptr___deref__(pwr_squelch_ff_sptr self) -> pwr_squelch_ff"},
	 { (char *)"delete_pwr_squelch_ff_sptr", _wrap_delete_pwr_squelch_ff_sptr, METH_VARARGS, (char *)"delete_pwr_squelch_ff_sptr(pwr_squelch_ff_sptr self)"},
	 { (char *)"pwr_squelch_ff_sptr_make", (PyCFunction) _wrap_pwr_squelch_ff_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"pwr_squelch_ff_sptr_make(pwr_squelch_ff_sptr self, double db, double alpha = 0.0001, \n"
		"    int ramp = 0, bool gate = False) -> sptr\n"
		""},
	 { (char *)"pwr_squelch_ff_sptr_squelch_range", _wrap_pwr_squelch_ff_sptr_squelch_range, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_squelch_range(pwr_squelch_ff_sptr self) -> __dummy_4__"},
	 { (char *)"pwr_squelch_ff_sptr_threshold", _wrap_pwr_squelch_ff_sptr_threshold, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_threshold(pwr_squelch_ff_sptr self) -> double"},
	 { (char *)"pwr_squelch_ff_sptr_set_threshold", (PyCFunction) _wrap_pwr_squelch_ff_sptr_set_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_sptr_set_threshold(pwr_squelch_ff_sptr self, double db)"},
	 { (char *)"pwr_squelch_ff_sptr_set_alpha", (PyCFunction) _wrap_pwr_squelch_ff_sptr_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_sptr_set_alpha(pwr_squelch_ff_sptr self, double alpha)"},
	 { (char *)"pwr_squelch_ff_sptr_ramp", _wrap_pwr_squelch_ff_sptr_ramp, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_ramp(pwr_squelch_ff_sptr self) -> int"},
	 { (char *)"pwr_squelch_ff_sptr_set_ramp", (PyCFunction) _wrap_pwr_squelch_ff_sptr_set_ramp, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_sptr_set_ramp(pwr_squelch_ff_sptr self, int ramp)"},
	 { (char *)"pwr_squelch_ff_sptr_gate", _wrap_pwr_squelch_ff_sptr_gate, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_gate(pwr_squelch_ff_sptr self) -> bool"},
	 { (char *)"pwr_squelch_ff_sptr_set_gate", (PyCFunction) _wrap_pwr_squelch_ff_sptr_set_gate, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_sptr_set_gate(pwr_squelch_ff_sptr self, bool gate)"},
	 { (char *)"pwr_squelch_ff_sptr_unmuted", _wrap_pwr_squelch_ff_sptr_unmuted, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_unmuted(pwr_squelch_ff_sptr self) -> bool"},
	 { (char *)"pwr_squelch_ff_sptr_history", _wrap_pwr_squelch_ff_sptr_history, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_history(pwr_squelch_ff_sptr self) -> unsigned int"},
	 { (char *)"pwr_squelch_ff_sptr_output_multiple", _wrap_pwr_squelch_ff_sptr_output_multiple, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_output_multiple(pwr_squelch_ff_sptr self) -> int"},
	 { (char *)"pwr_squelch_ff_sptr_relative_rate", _wrap_pwr_squelch_ff_sptr_relative_rate, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_relative_rate(pwr_squelch_ff_sptr self) -> double"},
	 { (char *)"pwr_squelch_ff_sptr_start", _wrap_pwr_squelch_ff_sptr_start, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_start(pwr_squelch_ff_sptr self) -> bool"},
	 { (char *)"pwr_squelch_ff_sptr_stop", _wrap_pwr_squelch_ff_sptr_stop, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_stop(pwr_squelch_ff_sptr self) -> bool"},
	 { (char *)"pwr_squelch_ff_sptr_nitems_read", (PyCFunction) _wrap_pwr_squelch_ff_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_sptr_nitems_read(pwr_squelch_ff_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"pwr_squelch_ff_sptr_nitems_written", (PyCFunction) _wrap_pwr_squelch_ff_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_sptr_nitems_written(pwr_squelch_ff_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"pwr_squelch_ff_sptr_max_noutput_items", _wrap_pwr_squelch_ff_sptr_max_noutput_items, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_max_noutput_items(pwr_squelch_ff_sptr self) -> int"},
	 { (char *)"pwr_squelch_ff_sptr_set_max_noutput_items", (PyCFunction) _wrap_pwr_squelch_ff_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_sptr_set_max_noutput_items(pwr_squelch_ff_sptr self, int m)"},
	 { (char *)"pwr_squelch_ff_sptr_unset_max_noutput_items", _wrap_pwr_squelch_ff_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_unset_max_noutput_items(pwr_squelch_ff_sptr self)"},
	 { (char *)"pwr_squelch_ff_sptr_is_set_max_noutput_items", _wrap_pwr_squelch_ff_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_is_set_max_noutput_items(pwr_squelch_ff_sptr self) -> bool"},
	 { (char *)"pwr_squelch_ff_sptr_max_output_buffer", (PyCFunction) _wrap_pwr_squelch_ff_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_sptr_max_output_buffer(pwr_squelch_ff_sptr self, int i) -> long"},
	 { (char *)"pwr_squelch_ff_sptr_set_max_output_buffer", _wrap_pwr_squelch_ff_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"pwr_squelch_ff_sptr_set_max_output_buffer(pwr_squelch_ff_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"pwr_squelch_ff_sptr_min_output_buffer", (PyCFunction) _wrap_pwr_squelch_ff_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_sptr_min_output_buffer(pwr_squelch_ff_sptr self, int i) -> long"},
	 { (char *)"pwr_squelch_ff_sptr_set_min_output_buffer", _wrap_pwr_squelch_ff_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"pwr_squelch_ff_sptr_set_min_output_buffer(pwr_squelch_ff_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"pwr_squelch_ff_sptr_detail", _wrap_pwr_squelch_ff_sptr_detail, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_detail(pwr_squelch_ff_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"pwr_squelch_ff_sptr_set_detail", (PyCFunction) _wrap_pwr_squelch_ff_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_sptr_set_detail(pwr_squelch_ff_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"pwr_squelch_ff_sptr_name", _wrap_pwr_squelch_ff_sptr_name, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_name(pwr_squelch_ff_sptr self) -> string"},
	 { (char *)"pwr_squelch_ff_sptr_symbol_name", _wrap_pwr_squelch_ff_sptr_symbol_name, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_symbol_name(pwr_squelch_ff_sptr self) -> string"},
	 { (char *)"pwr_squelch_ff_sptr_input_signature", _wrap_pwr_squelch_ff_sptr_input_signature, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_input_signature(pwr_squelch_ff_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"pwr_squelch_ff_sptr_output_signature", _wrap_pwr_squelch_ff_sptr_output_signature, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_output_signature(pwr_squelch_ff_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"pwr_squelch_ff_sptr_unique_id", _wrap_pwr_squelch_ff_sptr_unique_id, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_unique_id(pwr_squelch_ff_sptr self) -> long"},
	 { (char *)"pwr_squelch_ff_sptr_to_basic_block", _wrap_pwr_squelch_ff_sptr_to_basic_block, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_to_basic_block(pwr_squelch_ff_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"pwr_squelch_ff_sptr_check_topology", (PyCFunction) _wrap_pwr_squelch_ff_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_sptr_check_topology(pwr_squelch_ff_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"pwr_squelch_ff_sptr_alias", _wrap_pwr_squelch_ff_sptr_alias, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_alias(pwr_squelch_ff_sptr self) -> string"},
	 { (char *)"pwr_squelch_ff_sptr_set_block_alias", (PyCFunction) _wrap_pwr_squelch_ff_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_sptr_set_block_alias(pwr_squelch_ff_sptr self, string name)"},
	 { (char *)"pwr_squelch_ff_sptr__post", (PyCFunction) _wrap_pwr_squelch_ff_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"pwr_squelch_ff_sptr__post(pwr_squelch_ff_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"pwr_squelch_ff_sptr_message_ports_in", _wrap_pwr_squelch_ff_sptr_message_ports_in, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_message_ports_in(pwr_squelch_ff_sptr self) -> pmt_t"},
	 { (char *)"pwr_squelch_ff_sptr_message_ports_out", _wrap_pwr_squelch_ff_sptr_message_ports_out, METH_VARARGS, (char *)"pwr_squelch_ff_sptr_message_ports_out(pwr_squelch_ff_sptr self) -> pmt_t"},
	 { (char *)"pwr_squelch_ff_sptr_swigregister", pwr_squelch_ff_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_quadrature_demod_cf_sptr", _wrap_new_quadrature_demod_cf_sptr, METH_VARARGS, (char *)"\n"
		"quadrature_demod_cf_sptr()\n"
		"new_quadrature_demod_cf_sptr(quadrature_demod_cf p) -> quadrature_demod_cf_sptr\n"
		""},
	 { (char *)"quadrature_demod_cf_sptr___deref__", _wrap_quadrature_demod_cf_sptr___deref__, METH_VARARGS, (char *)"quadrature_demod_cf_sptr___deref__(quadrature_demod_cf_sptr self) -> quadrature_demod_cf"},
	 { (char *)"delete_quadrature_demod_cf_sptr", _wrap_delete_quadrature_demod_cf_sptr, METH_VARARGS, (char *)"delete_quadrature_demod_cf_sptr(quadrature_demod_cf_sptr self)"},
	 { (char *)"quadrature_demod_cf_sptr_make", (PyCFunction) _wrap_quadrature_demod_cf_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"quadrature_demod_cf_sptr_make(quadrature_demod_cf_sptr self, float gain) -> sptr"},
	 { (char *)"quadrature_demod_cf_sptr_set_gain", (PyCFunction) _wrap_quadrature_demod_cf_sptr_set_gain, METH_VARARGS | METH_KEYWORDS, (char *)"quadrature_demod_cf_sptr_set_gain(quadrature_demod_cf_sptr self, float gain)"},
	 { (char *)"quadrature_demod_cf_sptr_gain", _wrap_quadrature_demod_cf_sptr_gain, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_gain(quadrature_demod_cf_sptr self) -> float"},
	 { (char *)"quadrature_demod_cf_sptr_history", _wrap_quadrature_demod_cf_sptr_history, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_history(quadrature_demod_cf_sptr self) -> unsigned int"},
	 { (char *)"quadrature_demod_cf_sptr_output_multiple", _wrap_quadrature_demod_cf_sptr_output_multiple, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_output_multiple(quadrature_demod_cf_sptr self) -> int"},
	 { (char *)"quadrature_demod_cf_sptr_relative_rate", _wrap_quadrature_demod_cf_sptr_relative_rate, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_relative_rate(quadrature_demod_cf_sptr self) -> double"},
	 { (char *)"quadrature_demod_cf_sptr_start", _wrap_quadrature_demod_cf_sptr_start, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_start(quadrature_demod_cf_sptr self) -> bool"},
	 { (char *)"quadrature_demod_cf_sptr_stop", _wrap_quadrature_demod_cf_sptr_stop, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_stop(quadrature_demod_cf_sptr self) -> bool"},
	 { (char *)"quadrature_demod_cf_sptr_nitems_read", (PyCFunction) _wrap_quadrature_demod_cf_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"quadrature_demod_cf_sptr_nitems_read(quadrature_demod_cf_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"quadrature_demod_cf_sptr_nitems_written", (PyCFunction) _wrap_quadrature_demod_cf_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"quadrature_demod_cf_sptr_nitems_written(quadrature_demod_cf_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"quadrature_demod_cf_sptr_max_noutput_items", _wrap_quadrature_demod_cf_sptr_max_noutput_items, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_max_noutput_items(quadrature_demod_cf_sptr self) -> int"},
	 { (char *)"quadrature_demod_cf_sptr_set_max_noutput_items", (PyCFunction) _wrap_quadrature_demod_cf_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"quadrature_demod_cf_sptr_set_max_noutput_items(quadrature_demod_cf_sptr self, int m)"},
	 { (char *)"quadrature_demod_cf_sptr_unset_max_noutput_items", _wrap_quadrature_demod_cf_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_unset_max_noutput_items(quadrature_demod_cf_sptr self)"},
	 { (char *)"quadrature_demod_cf_sptr_is_set_max_noutput_items", _wrap_quadrature_demod_cf_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_is_set_max_noutput_items(quadrature_demod_cf_sptr self) -> bool"},
	 { (char *)"quadrature_demod_cf_sptr_max_output_buffer", (PyCFunction) _wrap_quadrature_demod_cf_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"quadrature_demod_cf_sptr_max_output_buffer(quadrature_demod_cf_sptr self, int i) -> long"},
	 { (char *)"quadrature_demod_cf_sptr_set_max_output_buffer", _wrap_quadrature_demod_cf_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"quadrature_demod_cf_sptr_set_max_output_buffer(quadrature_demod_cf_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"quadrature_demod_cf_sptr_min_output_buffer", (PyCFunction) _wrap_quadrature_demod_cf_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"quadrature_demod_cf_sptr_min_output_buffer(quadrature_demod_cf_sptr self, int i) -> long"},
	 { (char *)"quadrature_demod_cf_sptr_set_min_output_buffer", _wrap_quadrature_demod_cf_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"quadrature_demod_cf_sptr_set_min_output_buffer(quadrature_demod_cf_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"quadrature_demod_cf_sptr_detail", _wrap_quadrature_demod_cf_sptr_detail, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_detail(quadrature_demod_cf_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"quadrature_demod_cf_sptr_set_detail", (PyCFunction) _wrap_quadrature_demod_cf_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"quadrature_demod_cf_sptr_set_detail(quadrature_demod_cf_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"quadrature_demod_cf_sptr_name", _wrap_quadrature_demod_cf_sptr_name, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_name(quadrature_demod_cf_sptr self) -> string"},
	 { (char *)"quadrature_demod_cf_sptr_symbol_name", _wrap_quadrature_demod_cf_sptr_symbol_name, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_symbol_name(quadrature_demod_cf_sptr self) -> string"},
	 { (char *)"quadrature_demod_cf_sptr_input_signature", _wrap_quadrature_demod_cf_sptr_input_signature, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_input_signature(quadrature_demod_cf_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"quadrature_demod_cf_sptr_output_signature", _wrap_quadrature_demod_cf_sptr_output_signature, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_output_signature(quadrature_demod_cf_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"quadrature_demod_cf_sptr_unique_id", _wrap_quadrature_demod_cf_sptr_unique_id, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_unique_id(quadrature_demod_cf_sptr self) -> long"},
	 { (char *)"quadrature_demod_cf_sptr_to_basic_block", _wrap_quadrature_demod_cf_sptr_to_basic_block, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_to_basic_block(quadrature_demod_cf_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"quadrature_demod_cf_sptr_check_topology", (PyCFunction) _wrap_quadrature_demod_cf_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"quadrature_demod_cf_sptr_check_topology(quadrature_demod_cf_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"quadrature_demod_cf_sptr_alias", _wrap_quadrature_demod_cf_sptr_alias, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_alias(quadrature_demod_cf_sptr self) -> string"},
	 { (char *)"quadrature_demod_cf_sptr_set_block_alias", (PyCFunction) _wrap_quadrature_demod_cf_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"quadrature_demod_cf_sptr_set_block_alias(quadrature_demod_cf_sptr self, string name)"},
	 { (char *)"quadrature_demod_cf_sptr__post", (PyCFunction) _wrap_quadrature_demod_cf_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"quadrature_demod_cf_sptr__post(quadrature_demod_cf_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"quadrature_demod_cf_sptr_message_ports_in", _wrap_quadrature_demod_cf_sptr_message_ports_in, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_message_ports_in(quadrature_demod_cf_sptr self) -> pmt_t"},
	 { (char *)"quadrature_demod_cf_sptr_message_ports_out", _wrap_quadrature_demod_cf_sptr_message_ports_out, METH_VARARGS, (char *)"quadrature_demod_cf_sptr_message_ports_out(quadrature_demod_cf_sptr self) -> pmt_t"},
	 { (char *)"quadrature_demod_cf_sptr_swigregister", quadrature_demod_cf_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_rail_ff_sptr", _wrap_new_rail_ff_sptr, METH_VARARGS, (char *)"\n"
		"rail_ff_sptr()\n"
		"new_rail_ff_sptr(rail_ff p) -> rail_ff_sptr\n"
		""},
	 { (char *)"rail_ff_sptr___deref__", _wrap_rail_ff_sptr___deref__, METH_VARARGS, (char *)"rail_ff_sptr___deref__(rail_ff_sptr self) -> rail_ff"},
	 { (char *)"delete_rail_ff_sptr", _wrap_delete_rail_ff_sptr, METH_VARARGS, (char *)"delete_rail_ff_sptr(rail_ff_sptr self)"},
	 { (char *)"rail_ff_sptr_make", (PyCFunction) _wrap_rail_ff_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_sptr_make(rail_ff_sptr self, float lo, float hi) -> sptr"},
	 { (char *)"rail_ff_sptr_lo", _wrap_rail_ff_sptr_lo, METH_VARARGS, (char *)"rail_ff_sptr_lo(rail_ff_sptr self) -> float"},
	 { (char *)"rail_ff_sptr_hi", _wrap_rail_ff_sptr_hi, METH_VARARGS, (char *)"rail_ff_sptr_hi(rail_ff_sptr self) -> float"},
	 { (char *)"rail_ff_sptr_set_lo", (PyCFunction) _wrap_rail_ff_sptr_set_lo, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_sptr_set_lo(rail_ff_sptr self, float lo)"},
	 { (char *)"rail_ff_sptr_set_hi", (PyCFunction) _wrap_rail_ff_sptr_set_hi, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_sptr_set_hi(rail_ff_sptr self, float hi)"},
	 { (char *)"rail_ff_sptr_history", _wrap_rail_ff_sptr_history, METH_VARARGS, (char *)"rail_ff_sptr_history(rail_ff_sptr self) -> unsigned int"},
	 { (char *)"rail_ff_sptr_output_multiple", _wrap_rail_ff_sptr_output_multiple, METH_VARARGS, (char *)"rail_ff_sptr_output_multiple(rail_ff_sptr self) -> int"},
	 { (char *)"rail_ff_sptr_relative_rate", _wrap_rail_ff_sptr_relative_rate, METH_VARARGS, (char *)"rail_ff_sptr_relative_rate(rail_ff_sptr self) -> double"},
	 { (char *)"rail_ff_sptr_start", _wrap_rail_ff_sptr_start, METH_VARARGS, (char *)"rail_ff_sptr_start(rail_ff_sptr self) -> bool"},
	 { (char *)"rail_ff_sptr_stop", _wrap_rail_ff_sptr_stop, METH_VARARGS, (char *)"rail_ff_sptr_stop(rail_ff_sptr self) -> bool"},
	 { (char *)"rail_ff_sptr_nitems_read", (PyCFunction) _wrap_rail_ff_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_sptr_nitems_read(rail_ff_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"rail_ff_sptr_nitems_written", (PyCFunction) _wrap_rail_ff_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_sptr_nitems_written(rail_ff_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"rail_ff_sptr_max_noutput_items", _wrap_rail_ff_sptr_max_noutput_items, METH_VARARGS, (char *)"rail_ff_sptr_max_noutput_items(rail_ff_sptr self) -> int"},
	 { (char *)"rail_ff_sptr_set_max_noutput_items", (PyCFunction) _wrap_rail_ff_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_sptr_set_max_noutput_items(rail_ff_sptr self, int m)"},
	 { (char *)"rail_ff_sptr_unset_max_noutput_items", _wrap_rail_ff_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"rail_ff_sptr_unset_max_noutput_items(rail_ff_sptr self)"},
	 { (char *)"rail_ff_sptr_is_set_max_noutput_items", _wrap_rail_ff_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"rail_ff_sptr_is_set_max_noutput_items(rail_ff_sptr self) -> bool"},
	 { (char *)"rail_ff_sptr_max_output_buffer", (PyCFunction) _wrap_rail_ff_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_sptr_max_output_buffer(rail_ff_sptr self, int i) -> long"},
	 { (char *)"rail_ff_sptr_set_max_output_buffer", _wrap_rail_ff_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"rail_ff_sptr_set_max_output_buffer(rail_ff_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"rail_ff_sptr_min_output_buffer", (PyCFunction) _wrap_rail_ff_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_sptr_min_output_buffer(rail_ff_sptr self, int i) -> long"},
	 { (char *)"rail_ff_sptr_set_min_output_buffer", _wrap_rail_ff_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"rail_ff_sptr_set_min_output_buffer(rail_ff_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"rail_ff_sptr_detail", _wrap_rail_ff_sptr_detail, METH_VARARGS, (char *)"rail_ff_sptr_detail(rail_ff_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"rail_ff_sptr_set_detail", (PyCFunction) _wrap_rail_ff_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_sptr_set_detail(rail_ff_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"rail_ff_sptr_name", _wrap_rail_ff_sptr_name, METH_VARARGS, (char *)"rail_ff_sptr_name(rail_ff_sptr self) -> string"},
	 { (char *)"rail_ff_sptr_symbol_name", _wrap_rail_ff_sptr_symbol_name, METH_VARARGS, (char *)"rail_ff_sptr_symbol_name(rail_ff_sptr self) -> string"},
	 { (char *)"rail_ff_sptr_input_signature", _wrap_rail_ff_sptr_input_signature, METH_VARARGS, (char *)"rail_ff_sptr_input_signature(rail_ff_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"rail_ff_sptr_output_signature", _wrap_rail_ff_sptr_output_signature, METH_VARARGS, (char *)"rail_ff_sptr_output_signature(rail_ff_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"rail_ff_sptr_unique_id", _wrap_rail_ff_sptr_unique_id, METH_VARARGS, (char *)"rail_ff_sptr_unique_id(rail_ff_sptr self) -> long"},
	 { (char *)"rail_ff_sptr_to_basic_block", _wrap_rail_ff_sptr_to_basic_block, METH_VARARGS, (char *)"rail_ff_sptr_to_basic_block(rail_ff_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"rail_ff_sptr_check_topology", (PyCFunction) _wrap_rail_ff_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_sptr_check_topology(rail_ff_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"rail_ff_sptr_alias", _wrap_rail_ff_sptr_alias, METH_VARARGS, (char *)"rail_ff_sptr_alias(rail_ff_sptr self) -> string"},
	 { (char *)"rail_ff_sptr_set_block_alias", (PyCFunction) _wrap_rail_ff_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_sptr_set_block_alias(rail_ff_sptr self, string name)"},
	 { (char *)"rail_ff_sptr__post", (PyCFunction) _wrap_rail_ff_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"rail_ff_sptr__post(rail_ff_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"rail_ff_sptr_message_ports_in", _wrap_rail_ff_sptr_message_ports_in, METH_VARARGS, (char *)"rail_ff_sptr_message_ports_in(rail_ff_sptr self) -> pmt_t"},
	 { (char *)"rail_ff_sptr_message_ports_out", _wrap_rail_ff_sptr_message_ports_out, METH_VARARGS, (char *)"rail_ff_sptr_message_ports_out(rail_ff_sptr self) -> pmt_t"},
	 { (char *)"rail_ff_sptr_swigregister", rail_ff_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_sig_source_s_sptr", _wrap_new_sig_source_s_sptr, METH_VARARGS, (char *)"\n"
		"sig_source_s_sptr()\n"
		"new_sig_source_s_sptr(sig_source_s p) -> sig_source_s_sptr\n"
		""},
	 { (char *)"sig_source_s_sptr___deref__", _wrap_sig_source_s_sptr___deref__, METH_VARARGS, (char *)"sig_source_s_sptr___deref__(sig_source_s_sptr self) -> sig_source_s"},
	 { (char *)"delete_sig_source_s_sptr", _wrap_delete_sig_source_s_sptr, METH_VARARGS, (char *)"delete_sig_source_s_sptr(sig_source_s_sptr self)"},
	 { (char *)"sig_source_s_sptr_make", (PyCFunction) _wrap_sig_source_s_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"sig_source_s_sptr_make(sig_source_s_sptr self, double sampling_freq, gr_waveform_t waveform, \n"
		"    double wave_freq, double ampl, \n"
		"    short offset = 0) -> sptr\n"
		""},
	 { (char *)"sig_source_s_sptr_sampling_freq", _wrap_sig_source_s_sptr_sampling_freq, METH_VARARGS, (char *)"sig_source_s_sptr_sampling_freq(sig_source_s_sptr self) -> double"},
	 { (char *)"sig_source_s_sptr_waveform", _wrap_sig_source_s_sptr_waveform, METH_VARARGS, (char *)"sig_source_s_sptr_waveform(sig_source_s_sptr self) -> gr_waveform_t"},
	 { (char *)"sig_source_s_sptr_frequency", _wrap_sig_source_s_sptr_frequency, METH_VARARGS, (char *)"sig_source_s_sptr_frequency(sig_source_s_sptr self) -> double"},
	 { (char *)"sig_source_s_sptr_amplitude", _wrap_sig_source_s_sptr_amplitude, METH_VARARGS, (char *)"sig_source_s_sptr_amplitude(sig_source_s_sptr self) -> double"},
	 { (char *)"sig_source_s_sptr_offset", _wrap_sig_source_s_sptr_offset, METH_VARARGS, (char *)"sig_source_s_sptr_offset(sig_source_s_sptr self) -> short"},
	 { (char *)"sig_source_s_sptr_set_sampling_freq", (PyCFunction) _wrap_sig_source_s_sptr_set_sampling_freq, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr_set_sampling_freq(sig_source_s_sptr self, double sampling_freq)"},
	 { (char *)"sig_source_s_sptr_set_waveform", (PyCFunction) _wrap_sig_source_s_sptr_set_waveform, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr_set_waveform(sig_source_s_sptr self, gr_waveform_t waveform)"},
	 { (char *)"sig_source_s_sptr_set_frequency", (PyCFunction) _wrap_sig_source_s_sptr_set_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr_set_frequency(sig_source_s_sptr self, double frequency)"},
	 { (char *)"sig_source_s_sptr_set_amplitude", (PyCFunction) _wrap_sig_source_s_sptr_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr_set_amplitude(sig_source_s_sptr self, double ampl)"},
	 { (char *)"sig_source_s_sptr_set_offset", (PyCFunction) _wrap_sig_source_s_sptr_set_offset, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr_set_offset(sig_source_s_sptr self, short offset)"},
	 { (char *)"sig_source_s_sptr_history", _wrap_sig_source_s_sptr_history, METH_VARARGS, (char *)"sig_source_s_sptr_history(sig_source_s_sptr self) -> unsigned int"},
	 { (char *)"sig_source_s_sptr_output_multiple", _wrap_sig_source_s_sptr_output_multiple, METH_VARARGS, (char *)"sig_source_s_sptr_output_multiple(sig_source_s_sptr self) -> int"},
	 { (char *)"sig_source_s_sptr_relative_rate", _wrap_sig_source_s_sptr_relative_rate, METH_VARARGS, (char *)"sig_source_s_sptr_relative_rate(sig_source_s_sptr self) -> double"},
	 { (char *)"sig_source_s_sptr_start", _wrap_sig_source_s_sptr_start, METH_VARARGS, (char *)"sig_source_s_sptr_start(sig_source_s_sptr self) -> bool"},
	 { (char *)"sig_source_s_sptr_stop", _wrap_sig_source_s_sptr_stop, METH_VARARGS, (char *)"sig_source_s_sptr_stop(sig_source_s_sptr self) -> bool"},
	 { (char *)"sig_source_s_sptr_nitems_read", (PyCFunction) _wrap_sig_source_s_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr_nitems_read(sig_source_s_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"sig_source_s_sptr_nitems_written", (PyCFunction) _wrap_sig_source_s_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr_nitems_written(sig_source_s_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"sig_source_s_sptr_max_noutput_items", _wrap_sig_source_s_sptr_max_noutput_items, METH_VARARGS, (char *)"sig_source_s_sptr_max_noutput_items(sig_source_s_sptr self) -> int"},
	 { (char *)"sig_source_s_sptr_set_max_noutput_items", (PyCFunction) _wrap_sig_source_s_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr_set_max_noutput_items(sig_source_s_sptr self, int m)"},
	 { (char *)"sig_source_s_sptr_unset_max_noutput_items", _wrap_sig_source_s_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"sig_source_s_sptr_unset_max_noutput_items(sig_source_s_sptr self)"},
	 { (char *)"sig_source_s_sptr_is_set_max_noutput_items", _wrap_sig_source_s_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"sig_source_s_sptr_is_set_max_noutput_items(sig_source_s_sptr self) -> bool"},
	 { (char *)"sig_source_s_sptr_max_output_buffer", (PyCFunction) _wrap_sig_source_s_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr_max_output_buffer(sig_source_s_sptr self, int i) -> long"},
	 { (char *)"sig_source_s_sptr_set_max_output_buffer", _wrap_sig_source_s_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"sig_source_s_sptr_set_max_output_buffer(sig_source_s_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"sig_source_s_sptr_min_output_buffer", (PyCFunction) _wrap_sig_source_s_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr_min_output_buffer(sig_source_s_sptr self, int i) -> long"},
	 { (char *)"sig_source_s_sptr_set_min_output_buffer", _wrap_sig_source_s_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"sig_source_s_sptr_set_min_output_buffer(sig_source_s_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"sig_source_s_sptr_detail", _wrap_sig_source_s_sptr_detail, METH_VARARGS, (char *)"sig_source_s_sptr_detail(sig_source_s_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"sig_source_s_sptr_set_detail", (PyCFunction) _wrap_sig_source_s_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr_set_detail(sig_source_s_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"sig_source_s_sptr_name", _wrap_sig_source_s_sptr_name, METH_VARARGS, (char *)"sig_source_s_sptr_name(sig_source_s_sptr self) -> string"},
	 { (char *)"sig_source_s_sptr_symbol_name", _wrap_sig_source_s_sptr_symbol_name, METH_VARARGS, (char *)"sig_source_s_sptr_symbol_name(sig_source_s_sptr self) -> string"},
	 { (char *)"sig_source_s_sptr_input_signature", _wrap_sig_source_s_sptr_input_signature, METH_VARARGS, (char *)"sig_source_s_sptr_input_signature(sig_source_s_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"sig_source_s_sptr_output_signature", _wrap_sig_source_s_sptr_output_signature, METH_VARARGS, (char *)"sig_source_s_sptr_output_signature(sig_source_s_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"sig_source_s_sptr_unique_id", _wrap_sig_source_s_sptr_unique_id, METH_VARARGS, (char *)"sig_source_s_sptr_unique_id(sig_source_s_sptr self) -> long"},
	 { (char *)"sig_source_s_sptr_to_basic_block", _wrap_sig_source_s_sptr_to_basic_block, METH_VARARGS, (char *)"sig_source_s_sptr_to_basic_block(sig_source_s_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"sig_source_s_sptr_check_topology", (PyCFunction) _wrap_sig_source_s_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr_check_topology(sig_source_s_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"sig_source_s_sptr_alias", _wrap_sig_source_s_sptr_alias, METH_VARARGS, (char *)"sig_source_s_sptr_alias(sig_source_s_sptr self) -> string"},
	 { (char *)"sig_source_s_sptr_set_block_alias", (PyCFunction) _wrap_sig_source_s_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr_set_block_alias(sig_source_s_sptr self, string name)"},
	 { (char *)"sig_source_s_sptr__post", (PyCFunction) _wrap_sig_source_s_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_s_sptr__post(sig_source_s_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"sig_source_s_sptr_message_ports_in", _wrap_sig_source_s_sptr_message_ports_in, METH_VARARGS, (char *)"sig_source_s_sptr_message_ports_in(sig_source_s_sptr self) -> pmt_t"},
	 { (char *)"sig_source_s_sptr_message_ports_out", _wrap_sig_source_s_sptr_message_ports_out, METH_VARARGS, (char *)"sig_source_s_sptr_message_ports_out(sig_source_s_sptr self) -> pmt_t"},
	 { (char *)"sig_source_s_sptr_swigregister", sig_source_s_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_sig_source_i_sptr", _wrap_new_sig_source_i_sptr, METH_VARARGS, (char *)"\n"
		"sig_source_i_sptr()\n"
		"new_sig_source_i_sptr(sig_source_i p) -> sig_source_i_sptr\n"
		""},
	 { (char *)"sig_source_i_sptr___deref__", _wrap_sig_source_i_sptr___deref__, METH_VARARGS, (char *)"sig_source_i_sptr___deref__(sig_source_i_sptr self) -> sig_source_i"},
	 { (char *)"delete_sig_source_i_sptr", _wrap_delete_sig_source_i_sptr, METH_VARARGS, (char *)"delete_sig_source_i_sptr(sig_source_i_sptr self)"},
	 { (char *)"sig_source_i_sptr_make", (PyCFunction) _wrap_sig_source_i_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"sig_source_i_sptr_make(sig_source_i_sptr self, double sampling_freq, gr_waveform_t waveform, \n"
		"    double wave_freq, double ampl, \n"
		"    int offset = 0) -> sptr\n"
		""},
	 { (char *)"sig_source_i_sptr_sampling_freq", _wrap_sig_source_i_sptr_sampling_freq, METH_VARARGS, (char *)"sig_source_i_sptr_sampling_freq(sig_source_i_sptr self) -> double"},
	 { (char *)"sig_source_i_sptr_waveform", _wrap_sig_source_i_sptr_waveform, METH_VARARGS, (char *)"sig_source_i_sptr_waveform(sig_source_i_sptr self) -> gr_waveform_t"},
	 { (char *)"sig_source_i_sptr_frequency", _wrap_sig_source_i_sptr_frequency, METH_VARARGS, (char *)"sig_source_i_sptr_frequency(sig_source_i_sptr self) -> double"},
	 { (char *)"sig_source_i_sptr_amplitude", _wrap_sig_source_i_sptr_amplitude, METH_VARARGS, (char *)"sig_source_i_sptr_amplitude(sig_source_i_sptr self) -> double"},
	 { (char *)"sig_source_i_sptr_offset", _wrap_sig_source_i_sptr_offset, METH_VARARGS, (char *)"sig_source_i_sptr_offset(sig_source_i_sptr self) -> int"},
	 { (char *)"sig_source_i_sptr_set_sampling_freq", (PyCFunction) _wrap_sig_source_i_sptr_set_sampling_freq, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr_set_sampling_freq(sig_source_i_sptr self, double sampling_freq)"},
	 { (char *)"sig_source_i_sptr_set_waveform", (PyCFunction) _wrap_sig_source_i_sptr_set_waveform, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr_set_waveform(sig_source_i_sptr self, gr_waveform_t waveform)"},
	 { (char *)"sig_source_i_sptr_set_frequency", (PyCFunction) _wrap_sig_source_i_sptr_set_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr_set_frequency(sig_source_i_sptr self, double frequency)"},
	 { (char *)"sig_source_i_sptr_set_amplitude", (PyCFunction) _wrap_sig_source_i_sptr_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr_set_amplitude(sig_source_i_sptr self, double ampl)"},
	 { (char *)"sig_source_i_sptr_set_offset", (PyCFunction) _wrap_sig_source_i_sptr_set_offset, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr_set_offset(sig_source_i_sptr self, int offset)"},
	 { (char *)"sig_source_i_sptr_history", _wrap_sig_source_i_sptr_history, METH_VARARGS, (char *)"sig_source_i_sptr_history(sig_source_i_sptr self) -> unsigned int"},
	 { (char *)"sig_source_i_sptr_output_multiple", _wrap_sig_source_i_sptr_output_multiple, METH_VARARGS, (char *)"sig_source_i_sptr_output_multiple(sig_source_i_sptr self) -> int"},
	 { (char *)"sig_source_i_sptr_relative_rate", _wrap_sig_source_i_sptr_relative_rate, METH_VARARGS, (char *)"sig_source_i_sptr_relative_rate(sig_source_i_sptr self) -> double"},
	 { (char *)"sig_source_i_sptr_start", _wrap_sig_source_i_sptr_start, METH_VARARGS, (char *)"sig_source_i_sptr_start(sig_source_i_sptr self) -> bool"},
	 { (char *)"sig_source_i_sptr_stop", _wrap_sig_source_i_sptr_stop, METH_VARARGS, (char *)"sig_source_i_sptr_stop(sig_source_i_sptr self) -> bool"},
	 { (char *)"sig_source_i_sptr_nitems_read", (PyCFunction) _wrap_sig_source_i_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr_nitems_read(sig_source_i_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"sig_source_i_sptr_nitems_written", (PyCFunction) _wrap_sig_source_i_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr_nitems_written(sig_source_i_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"sig_source_i_sptr_max_noutput_items", _wrap_sig_source_i_sptr_max_noutput_items, METH_VARARGS, (char *)"sig_source_i_sptr_max_noutput_items(sig_source_i_sptr self) -> int"},
	 { (char *)"sig_source_i_sptr_set_max_noutput_items", (PyCFunction) _wrap_sig_source_i_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr_set_max_noutput_items(sig_source_i_sptr self, int m)"},
	 { (char *)"sig_source_i_sptr_unset_max_noutput_items", _wrap_sig_source_i_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"sig_source_i_sptr_unset_max_noutput_items(sig_source_i_sptr self)"},
	 { (char *)"sig_source_i_sptr_is_set_max_noutput_items", _wrap_sig_source_i_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"sig_source_i_sptr_is_set_max_noutput_items(sig_source_i_sptr self) -> bool"},
	 { (char *)"sig_source_i_sptr_max_output_buffer", (PyCFunction) _wrap_sig_source_i_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr_max_output_buffer(sig_source_i_sptr self, int i) -> long"},
	 { (char *)"sig_source_i_sptr_set_max_output_buffer", _wrap_sig_source_i_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"sig_source_i_sptr_set_max_output_buffer(sig_source_i_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"sig_source_i_sptr_min_output_buffer", (PyCFunction) _wrap_sig_source_i_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr_min_output_buffer(sig_source_i_sptr self, int i) -> long"},
	 { (char *)"sig_source_i_sptr_set_min_output_buffer", _wrap_sig_source_i_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"sig_source_i_sptr_set_min_output_buffer(sig_source_i_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"sig_source_i_sptr_detail", _wrap_sig_source_i_sptr_detail, METH_VARARGS, (char *)"sig_source_i_sptr_detail(sig_source_i_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"sig_source_i_sptr_set_detail", (PyCFunction) _wrap_sig_source_i_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr_set_detail(sig_source_i_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"sig_source_i_sptr_name", _wrap_sig_source_i_sptr_name, METH_VARARGS, (char *)"sig_source_i_sptr_name(sig_source_i_sptr self) -> string"},
	 { (char *)"sig_source_i_sptr_symbol_name", _wrap_sig_source_i_sptr_symbol_name, METH_VARARGS, (char *)"sig_source_i_sptr_symbol_name(sig_source_i_sptr self) -> string"},
	 { (char *)"sig_source_i_sptr_input_signature", _wrap_sig_source_i_sptr_input_signature, METH_VARARGS, (char *)"sig_source_i_sptr_input_signature(sig_source_i_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"sig_source_i_sptr_output_signature", _wrap_sig_source_i_sptr_output_signature, METH_VARARGS, (char *)"sig_source_i_sptr_output_signature(sig_source_i_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"sig_source_i_sptr_unique_id", _wrap_sig_source_i_sptr_unique_id, METH_VARARGS, (char *)"sig_source_i_sptr_unique_id(sig_source_i_sptr self) -> long"},
	 { (char *)"sig_source_i_sptr_to_basic_block", _wrap_sig_source_i_sptr_to_basic_block, METH_VARARGS, (char *)"sig_source_i_sptr_to_basic_block(sig_source_i_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"sig_source_i_sptr_check_topology", (PyCFunction) _wrap_sig_source_i_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr_check_topology(sig_source_i_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"sig_source_i_sptr_alias", _wrap_sig_source_i_sptr_alias, METH_VARARGS, (char *)"sig_source_i_sptr_alias(sig_source_i_sptr self) -> string"},
	 { (char *)"sig_source_i_sptr_set_block_alias", (PyCFunction) _wrap_sig_source_i_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr_set_block_alias(sig_source_i_sptr self, string name)"},
	 { (char *)"sig_source_i_sptr__post", (PyCFunction) _wrap_sig_source_i_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_i_sptr__post(sig_source_i_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"sig_source_i_sptr_message_ports_in", _wrap_sig_source_i_sptr_message_ports_in, METH_VARARGS, (char *)"sig_source_i_sptr_message_ports_in(sig_source_i_sptr self) -> pmt_t"},
	 { (char *)"sig_source_i_sptr_message_ports_out", _wrap_sig_source_i_sptr_message_ports_out, METH_VARARGS, (char *)"sig_source_i_sptr_message_ports_out(sig_source_i_sptr self) -> pmt_t"},
	 { (char *)"sig_source_i_sptr_swigregister", sig_source_i_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_sig_source_f_sptr", _wrap_new_sig_source_f_sptr, METH_VARARGS, (char *)"\n"
		"sig_source_f_sptr()\n"
		"new_sig_source_f_sptr(sig_source_f p) -> sig_source_f_sptr\n"
		""},
	 { (char *)"sig_source_f_sptr___deref__", _wrap_sig_source_f_sptr___deref__, METH_VARARGS, (char *)"sig_source_f_sptr___deref__(sig_source_f_sptr self) -> sig_source_f"},
	 { (char *)"delete_sig_source_f_sptr", _wrap_delete_sig_source_f_sptr, METH_VARARGS, (char *)"delete_sig_source_f_sptr(sig_source_f_sptr self)"},
	 { (char *)"sig_source_f_sptr_make", (PyCFunction) _wrap_sig_source_f_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"sig_source_f_sptr_make(sig_source_f_sptr self, double sampling_freq, gr_waveform_t waveform, \n"
		"    double wave_freq, double ampl, \n"
		"    float offset = 0) -> sptr\n"
		""},
	 { (char *)"sig_source_f_sptr_sampling_freq", _wrap_sig_source_f_sptr_sampling_freq, METH_VARARGS, (char *)"sig_source_f_sptr_sampling_freq(sig_source_f_sptr self) -> double"},
	 { (char *)"sig_source_f_sptr_waveform", _wrap_sig_source_f_sptr_waveform, METH_VARARGS, (char *)"sig_source_f_sptr_waveform(sig_source_f_sptr self) -> gr_waveform_t"},
	 { (char *)"sig_source_f_sptr_frequency", _wrap_sig_source_f_sptr_frequency, METH_VARARGS, (char *)"sig_source_f_sptr_frequency(sig_source_f_sptr self) -> double"},
	 { (char *)"sig_source_f_sptr_amplitude", _wrap_sig_source_f_sptr_amplitude, METH_VARARGS, (char *)"sig_source_f_sptr_amplitude(sig_source_f_sptr self) -> double"},
	 { (char *)"sig_source_f_sptr_offset", _wrap_sig_source_f_sptr_offset, METH_VARARGS, (char *)"sig_source_f_sptr_offset(sig_source_f_sptr self) -> float"},
	 { (char *)"sig_source_f_sptr_set_sampling_freq", (PyCFunction) _wrap_sig_source_f_sptr_set_sampling_freq, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr_set_sampling_freq(sig_source_f_sptr self, double sampling_freq)"},
	 { (char *)"sig_source_f_sptr_set_waveform", (PyCFunction) _wrap_sig_source_f_sptr_set_waveform, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr_set_waveform(sig_source_f_sptr self, gr_waveform_t waveform)"},
	 { (char *)"sig_source_f_sptr_set_frequency", (PyCFunction) _wrap_sig_source_f_sptr_set_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr_set_frequency(sig_source_f_sptr self, double frequency)"},
	 { (char *)"sig_source_f_sptr_set_amplitude", (PyCFunction) _wrap_sig_source_f_sptr_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr_set_amplitude(sig_source_f_sptr self, double ampl)"},
	 { (char *)"sig_source_f_sptr_set_offset", (PyCFunction) _wrap_sig_source_f_sptr_set_offset, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr_set_offset(sig_source_f_sptr self, float offset)"},
	 { (char *)"sig_source_f_sptr_history", _wrap_sig_source_f_sptr_history, METH_VARARGS, (char *)"sig_source_f_sptr_history(sig_source_f_sptr self) -> unsigned int"},
	 { (char *)"sig_source_f_sptr_output_multiple", _wrap_sig_source_f_sptr_output_multiple, METH_VARARGS, (char *)"sig_source_f_sptr_output_multiple(sig_source_f_sptr self) -> int"},
	 { (char *)"sig_source_f_sptr_relative_rate", _wrap_sig_source_f_sptr_relative_rate, METH_VARARGS, (char *)"sig_source_f_sptr_relative_rate(sig_source_f_sptr self) -> double"},
	 { (char *)"sig_source_f_sptr_start", _wrap_sig_source_f_sptr_start, METH_VARARGS, (char *)"sig_source_f_sptr_start(sig_source_f_sptr self) -> bool"},
	 { (char *)"sig_source_f_sptr_stop", _wrap_sig_source_f_sptr_stop, METH_VARARGS, (char *)"sig_source_f_sptr_stop(sig_source_f_sptr self) -> bool"},
	 { (char *)"sig_source_f_sptr_nitems_read", (PyCFunction) _wrap_sig_source_f_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr_nitems_read(sig_source_f_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"sig_source_f_sptr_nitems_written", (PyCFunction) _wrap_sig_source_f_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr_nitems_written(sig_source_f_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"sig_source_f_sptr_max_noutput_items", _wrap_sig_source_f_sptr_max_noutput_items, METH_VARARGS, (char *)"sig_source_f_sptr_max_noutput_items(sig_source_f_sptr self) -> int"},
	 { (char *)"sig_source_f_sptr_set_max_noutput_items", (PyCFunction) _wrap_sig_source_f_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr_set_max_noutput_items(sig_source_f_sptr self, int m)"},
	 { (char *)"sig_source_f_sptr_unset_max_noutput_items", _wrap_sig_source_f_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"sig_source_f_sptr_unset_max_noutput_items(sig_source_f_sptr self)"},
	 { (char *)"sig_source_f_sptr_is_set_max_noutput_items", _wrap_sig_source_f_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"sig_source_f_sptr_is_set_max_noutput_items(sig_source_f_sptr self) -> bool"},
	 { (char *)"sig_source_f_sptr_max_output_buffer", (PyCFunction) _wrap_sig_source_f_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr_max_output_buffer(sig_source_f_sptr self, int i) -> long"},
	 { (char *)"sig_source_f_sptr_set_max_output_buffer", _wrap_sig_source_f_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"sig_source_f_sptr_set_max_output_buffer(sig_source_f_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"sig_source_f_sptr_min_output_buffer", (PyCFunction) _wrap_sig_source_f_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr_min_output_buffer(sig_source_f_sptr self, int i) -> long"},
	 { (char *)"sig_source_f_sptr_set_min_output_buffer", _wrap_sig_source_f_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"sig_source_f_sptr_set_min_output_buffer(sig_source_f_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"sig_source_f_sptr_detail", _wrap_sig_source_f_sptr_detail, METH_VARARGS, (char *)"sig_source_f_sptr_detail(sig_source_f_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"sig_source_f_sptr_set_detail", (PyCFunction) _wrap_sig_source_f_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr_set_detail(sig_source_f_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"sig_source_f_sptr_name", _wrap_sig_source_f_sptr_name, METH_VARARGS, (char *)"sig_source_f_sptr_name(sig_source_f_sptr self) -> string"},
	 { (char *)"sig_source_f_sptr_symbol_name", _wrap_sig_source_f_sptr_symbol_name, METH_VARARGS, (char *)"sig_source_f_sptr_symbol_name(sig_source_f_sptr self) -> string"},
	 { (char *)"sig_source_f_sptr_input_signature", _wrap_sig_source_f_sptr_input_signature, METH_VARARGS, (char *)"sig_source_f_sptr_input_signature(sig_source_f_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"sig_source_f_sptr_output_signature", _wrap_sig_source_f_sptr_output_signature, METH_VARARGS, (char *)"sig_source_f_sptr_output_signature(sig_source_f_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"sig_source_f_sptr_unique_id", _wrap_sig_source_f_sptr_unique_id, METH_VARARGS, (char *)"sig_source_f_sptr_unique_id(sig_source_f_sptr self) -> long"},
	 { (char *)"sig_source_f_sptr_to_basic_block", _wrap_sig_source_f_sptr_to_basic_block, METH_VARARGS, (char *)"sig_source_f_sptr_to_basic_block(sig_source_f_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"sig_source_f_sptr_check_topology", (PyCFunction) _wrap_sig_source_f_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr_check_topology(sig_source_f_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"sig_source_f_sptr_alias", _wrap_sig_source_f_sptr_alias, METH_VARARGS, (char *)"sig_source_f_sptr_alias(sig_source_f_sptr self) -> string"},
	 { (char *)"sig_source_f_sptr_set_block_alias", (PyCFunction) _wrap_sig_source_f_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr_set_block_alias(sig_source_f_sptr self, string name)"},
	 { (char *)"sig_source_f_sptr__post", (PyCFunction) _wrap_sig_source_f_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_f_sptr__post(sig_source_f_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"sig_source_f_sptr_message_ports_in", _wrap_sig_source_f_sptr_message_ports_in, METH_VARARGS, (char *)"sig_source_f_sptr_message_ports_in(sig_source_f_sptr self) -> pmt_t"},
	 { (char *)"sig_source_f_sptr_message_ports_out", _wrap_sig_source_f_sptr_message_ports_out, METH_VARARGS, (char *)"sig_source_f_sptr_message_ports_out(sig_source_f_sptr self) -> pmt_t"},
	 { (char *)"sig_source_f_sptr_swigregister", sig_source_f_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_sig_source_c_sptr", _wrap_new_sig_source_c_sptr, METH_VARARGS, (char *)"\n"
		"sig_source_c_sptr()\n"
		"new_sig_source_c_sptr(sig_source_c p) -> sig_source_c_sptr\n"
		""},
	 { (char *)"sig_source_c_sptr___deref__", _wrap_sig_source_c_sptr___deref__, METH_VARARGS, (char *)"sig_source_c_sptr___deref__(sig_source_c_sptr self) -> sig_source_c"},
	 { (char *)"delete_sig_source_c_sptr", _wrap_delete_sig_source_c_sptr, METH_VARARGS, (char *)"delete_sig_source_c_sptr(sig_source_c_sptr self)"},
	 { (char *)"sig_source_c_sptr_make", (PyCFunction) _wrap_sig_source_c_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"sig_source_c_sptr_make(sig_source_c_sptr self, double sampling_freq, gr_waveform_t waveform, \n"
		"    double wave_freq, double ampl, \n"
		"    gr_complex offset = 0) -> sptr\n"
		""},
	 { (char *)"sig_source_c_sptr_sampling_freq", _wrap_sig_source_c_sptr_sampling_freq, METH_VARARGS, (char *)"sig_source_c_sptr_sampling_freq(sig_source_c_sptr self) -> double"},
	 { (char *)"sig_source_c_sptr_waveform", _wrap_sig_source_c_sptr_waveform, METH_VARARGS, (char *)"sig_source_c_sptr_waveform(sig_source_c_sptr self) -> gr_waveform_t"},
	 { (char *)"sig_source_c_sptr_frequency", _wrap_sig_source_c_sptr_frequency, METH_VARARGS, (char *)"sig_source_c_sptr_frequency(sig_source_c_sptr self) -> double"},
	 { (char *)"sig_source_c_sptr_amplitude", _wrap_sig_source_c_sptr_amplitude, METH_VARARGS, (char *)"sig_source_c_sptr_amplitude(sig_source_c_sptr self) -> double"},
	 { (char *)"sig_source_c_sptr_offset", _wrap_sig_source_c_sptr_offset, METH_VARARGS, (char *)"sig_source_c_sptr_offset(sig_source_c_sptr self) -> gr_complex"},
	 { (char *)"sig_source_c_sptr_set_sampling_freq", (PyCFunction) _wrap_sig_source_c_sptr_set_sampling_freq, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr_set_sampling_freq(sig_source_c_sptr self, double sampling_freq)"},
	 { (char *)"sig_source_c_sptr_set_waveform", (PyCFunction) _wrap_sig_source_c_sptr_set_waveform, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr_set_waveform(sig_source_c_sptr self, gr_waveform_t waveform)"},
	 { (char *)"sig_source_c_sptr_set_frequency", (PyCFunction) _wrap_sig_source_c_sptr_set_frequency, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr_set_frequency(sig_source_c_sptr self, double frequency)"},
	 { (char *)"sig_source_c_sptr_set_amplitude", (PyCFunction) _wrap_sig_source_c_sptr_set_amplitude, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr_set_amplitude(sig_source_c_sptr self, double ampl)"},
	 { (char *)"sig_source_c_sptr_set_offset", (PyCFunction) _wrap_sig_source_c_sptr_set_offset, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr_set_offset(sig_source_c_sptr self, gr_complex offset)"},
	 { (char *)"sig_source_c_sptr_history", _wrap_sig_source_c_sptr_history, METH_VARARGS, (char *)"sig_source_c_sptr_history(sig_source_c_sptr self) -> unsigned int"},
	 { (char *)"sig_source_c_sptr_output_multiple", _wrap_sig_source_c_sptr_output_multiple, METH_VARARGS, (char *)"sig_source_c_sptr_output_multiple(sig_source_c_sptr self) -> int"},
	 { (char *)"sig_source_c_sptr_relative_rate", _wrap_sig_source_c_sptr_relative_rate, METH_VARARGS, (char *)"sig_source_c_sptr_relative_rate(sig_source_c_sptr self) -> double"},
	 { (char *)"sig_source_c_sptr_start", _wrap_sig_source_c_sptr_start, METH_VARARGS, (char *)"sig_source_c_sptr_start(sig_source_c_sptr self) -> bool"},
	 { (char *)"sig_source_c_sptr_stop", _wrap_sig_source_c_sptr_stop, METH_VARARGS, (char *)"sig_source_c_sptr_stop(sig_source_c_sptr self) -> bool"},
	 { (char *)"sig_source_c_sptr_nitems_read", (PyCFunction) _wrap_sig_source_c_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr_nitems_read(sig_source_c_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"sig_source_c_sptr_nitems_written", (PyCFunction) _wrap_sig_source_c_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr_nitems_written(sig_source_c_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"sig_source_c_sptr_max_noutput_items", _wrap_sig_source_c_sptr_max_noutput_items, METH_VARARGS, (char *)"sig_source_c_sptr_max_noutput_items(sig_source_c_sptr self) -> int"},
	 { (char *)"sig_source_c_sptr_set_max_noutput_items", (PyCFunction) _wrap_sig_source_c_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr_set_max_noutput_items(sig_source_c_sptr self, int m)"},
	 { (char *)"sig_source_c_sptr_unset_max_noutput_items", _wrap_sig_source_c_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"sig_source_c_sptr_unset_max_noutput_items(sig_source_c_sptr self)"},
	 { (char *)"sig_source_c_sptr_is_set_max_noutput_items", _wrap_sig_source_c_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"sig_source_c_sptr_is_set_max_noutput_items(sig_source_c_sptr self) -> bool"},
	 { (char *)"sig_source_c_sptr_max_output_buffer", (PyCFunction) _wrap_sig_source_c_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr_max_output_buffer(sig_source_c_sptr self, int i) -> long"},
	 { (char *)"sig_source_c_sptr_set_max_output_buffer", _wrap_sig_source_c_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"sig_source_c_sptr_set_max_output_buffer(sig_source_c_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"sig_source_c_sptr_min_output_buffer", (PyCFunction) _wrap_sig_source_c_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr_min_output_buffer(sig_source_c_sptr self, int i) -> long"},
	 { (char *)"sig_source_c_sptr_set_min_output_buffer", _wrap_sig_source_c_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"sig_source_c_sptr_set_min_output_buffer(sig_source_c_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"sig_source_c_sptr_detail", _wrap_sig_source_c_sptr_detail, METH_VARARGS, (char *)"sig_source_c_sptr_detail(sig_source_c_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"sig_source_c_sptr_set_detail", (PyCFunction) _wrap_sig_source_c_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr_set_detail(sig_source_c_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"sig_source_c_sptr_name", _wrap_sig_source_c_sptr_name, METH_VARARGS, (char *)"sig_source_c_sptr_name(sig_source_c_sptr self) -> string"},
	 { (char *)"sig_source_c_sptr_symbol_name", _wrap_sig_source_c_sptr_symbol_name, METH_VARARGS, (char *)"sig_source_c_sptr_symbol_name(sig_source_c_sptr self) -> string"},
	 { (char *)"sig_source_c_sptr_input_signature", _wrap_sig_source_c_sptr_input_signature, METH_VARARGS, (char *)"sig_source_c_sptr_input_signature(sig_source_c_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"sig_source_c_sptr_output_signature", _wrap_sig_source_c_sptr_output_signature, METH_VARARGS, (char *)"sig_source_c_sptr_output_signature(sig_source_c_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"sig_source_c_sptr_unique_id", _wrap_sig_source_c_sptr_unique_id, METH_VARARGS, (char *)"sig_source_c_sptr_unique_id(sig_source_c_sptr self) -> long"},
	 { (char *)"sig_source_c_sptr_to_basic_block", _wrap_sig_source_c_sptr_to_basic_block, METH_VARARGS, (char *)"sig_source_c_sptr_to_basic_block(sig_source_c_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"sig_source_c_sptr_check_topology", (PyCFunction) _wrap_sig_source_c_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr_check_topology(sig_source_c_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"sig_source_c_sptr_alias", _wrap_sig_source_c_sptr_alias, METH_VARARGS, (char *)"sig_source_c_sptr_alias(sig_source_c_sptr self) -> string"},
	 { (char *)"sig_source_c_sptr_set_block_alias", (PyCFunction) _wrap_sig_source_c_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr_set_block_alias(sig_source_c_sptr self, string name)"},
	 { (char *)"sig_source_c_sptr__post", (PyCFunction) _wrap_sig_source_c_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"sig_source_c_sptr__post(sig_source_c_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"sig_source_c_sptr_message_ports_in", _wrap_sig_source_c_sptr_message_ports_in, METH_VARARGS, (char *)"sig_source_c_sptr_message_ports_in(sig_source_c_sptr self) -> pmt_t"},
	 { (char *)"sig_source_c_sptr_message_ports_out", _wrap_sig_source_c_sptr_message_ports_out, METH_VARARGS, (char *)"sig_source_c_sptr_message_ports_out(sig_source_c_sptr self) -> pmt_t"},
	 { (char *)"sig_source_c_sptr_swigregister", sig_source_c_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_simple_squelch_cc_sptr", _wrap_new_simple_squelch_cc_sptr, METH_VARARGS, (char *)"\n"
		"simple_squelch_cc_sptr()\n"
		"new_simple_squelch_cc_sptr(simple_squelch_cc p) -> simple_squelch_cc_sptr\n"
		""},
	 { (char *)"simple_squelch_cc_sptr___deref__", _wrap_simple_squelch_cc_sptr___deref__, METH_VARARGS, (char *)"simple_squelch_cc_sptr___deref__(simple_squelch_cc_sptr self) -> simple_squelch_cc"},
	 { (char *)"delete_simple_squelch_cc_sptr", _wrap_delete_simple_squelch_cc_sptr, METH_VARARGS, (char *)"delete_simple_squelch_cc_sptr(simple_squelch_cc_sptr self)"},
	 { (char *)"simple_squelch_cc_sptr_make", (PyCFunction) _wrap_simple_squelch_cc_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_sptr_make(simple_squelch_cc_sptr self, double threshold_db, double alpha) -> sptr"},
	 { (char *)"simple_squelch_cc_sptr_unmuted", _wrap_simple_squelch_cc_sptr_unmuted, METH_VARARGS, (char *)"simple_squelch_cc_sptr_unmuted(simple_squelch_cc_sptr self) -> bool"},
	 { (char *)"simple_squelch_cc_sptr_set_alpha", (PyCFunction) _wrap_simple_squelch_cc_sptr_set_alpha, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_sptr_set_alpha(simple_squelch_cc_sptr self, double alpha)"},
	 { (char *)"simple_squelch_cc_sptr_set_threshold", (PyCFunction) _wrap_simple_squelch_cc_sptr_set_threshold, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_sptr_set_threshold(simple_squelch_cc_sptr self, double decibels)"},
	 { (char *)"simple_squelch_cc_sptr_threshold", _wrap_simple_squelch_cc_sptr_threshold, METH_VARARGS, (char *)"simple_squelch_cc_sptr_threshold(simple_squelch_cc_sptr self) -> double"},
	 { (char *)"simple_squelch_cc_sptr_squelch_range", _wrap_simple_squelch_cc_sptr_squelch_range, METH_VARARGS, (char *)"simple_squelch_cc_sptr_squelch_range(simple_squelch_cc_sptr self) -> __dummy_4__"},
	 { (char *)"simple_squelch_cc_sptr_history", _wrap_simple_squelch_cc_sptr_history, METH_VARARGS, (char *)"simple_squelch_cc_sptr_history(simple_squelch_cc_sptr self) -> unsigned int"},
	 { (char *)"simple_squelch_cc_sptr_output_multiple", _wrap_simple_squelch_cc_sptr_output_multiple, METH_VARARGS, (char *)"simple_squelch_cc_sptr_output_multiple(simple_squelch_cc_sptr self) -> int"},
	 { (char *)"simple_squelch_cc_sptr_relative_rate", _wrap_simple_squelch_cc_sptr_relative_rate, METH_VARARGS, (char *)"simple_squelch_cc_sptr_relative_rate(simple_squelch_cc_sptr self) -> double"},
	 { (char *)"simple_squelch_cc_sptr_start", _wrap_simple_squelch_cc_sptr_start, METH_VARARGS, (char *)"simple_squelch_cc_sptr_start(simple_squelch_cc_sptr self) -> bool"},
	 { (char *)"simple_squelch_cc_sptr_stop", _wrap_simple_squelch_cc_sptr_stop, METH_VARARGS, (char *)"simple_squelch_cc_sptr_stop(simple_squelch_cc_sptr self) -> bool"},
	 { (char *)"simple_squelch_cc_sptr_nitems_read", (PyCFunction) _wrap_simple_squelch_cc_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_sptr_nitems_read(simple_squelch_cc_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"simple_squelch_cc_sptr_nitems_written", (PyCFunction) _wrap_simple_squelch_cc_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_sptr_nitems_written(simple_squelch_cc_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"simple_squelch_cc_sptr_max_noutput_items", _wrap_simple_squelch_cc_sptr_max_noutput_items, METH_VARARGS, (char *)"simple_squelch_cc_sptr_max_noutput_items(simple_squelch_cc_sptr self) -> int"},
	 { (char *)"simple_squelch_cc_sptr_set_max_noutput_items", (PyCFunction) _wrap_simple_squelch_cc_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_sptr_set_max_noutput_items(simple_squelch_cc_sptr self, int m)"},
	 { (char *)"simple_squelch_cc_sptr_unset_max_noutput_items", _wrap_simple_squelch_cc_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"simple_squelch_cc_sptr_unset_max_noutput_items(simple_squelch_cc_sptr self)"},
	 { (char *)"simple_squelch_cc_sptr_is_set_max_noutput_items", _wrap_simple_squelch_cc_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"simple_squelch_cc_sptr_is_set_max_noutput_items(simple_squelch_cc_sptr self) -> bool"},
	 { (char *)"simple_squelch_cc_sptr_max_output_buffer", (PyCFunction) _wrap_simple_squelch_cc_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_sptr_max_output_buffer(simple_squelch_cc_sptr self, int i) -> long"},
	 { (char *)"simple_squelch_cc_sptr_set_max_output_buffer", _wrap_simple_squelch_cc_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"simple_squelch_cc_sptr_set_max_output_buffer(simple_squelch_cc_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"simple_squelch_cc_sptr_min_output_buffer", (PyCFunction) _wrap_simple_squelch_cc_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_sptr_min_output_buffer(simple_squelch_cc_sptr self, int i) -> long"},
	 { (char *)"simple_squelch_cc_sptr_set_min_output_buffer", _wrap_simple_squelch_cc_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"simple_squelch_cc_sptr_set_min_output_buffer(simple_squelch_cc_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"simple_squelch_cc_sptr_detail", _wrap_simple_squelch_cc_sptr_detail, METH_VARARGS, (char *)"simple_squelch_cc_sptr_detail(simple_squelch_cc_sptr self) -> gr_block_detail_sptr"},
	 { (char *)"simple_squelch_cc_sptr_set_detail", (PyCFunction) _wrap_simple_squelch_cc_sptr_set_detail, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_sptr_set_detail(simple_squelch_cc_sptr self, gr_block_detail_sptr detail)"},
	 { (char *)"simple_squelch_cc_sptr_name", _wrap_simple_squelch_cc_sptr_name, METH_VARARGS, (char *)"simple_squelch_cc_sptr_name(simple_squelch_cc_sptr self) -> string"},
	 { (char *)"simple_squelch_cc_sptr_symbol_name", _wrap_simple_squelch_cc_sptr_symbol_name, METH_VARARGS, (char *)"simple_squelch_cc_sptr_symbol_name(simple_squelch_cc_sptr self) -> string"},
	 { (char *)"simple_squelch_cc_sptr_input_signature", _wrap_simple_squelch_cc_sptr_input_signature, METH_VARARGS, (char *)"simple_squelch_cc_sptr_input_signature(simple_squelch_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"simple_squelch_cc_sptr_output_signature", _wrap_simple_squelch_cc_sptr_output_signature, METH_VARARGS, (char *)"simple_squelch_cc_sptr_output_signature(simple_squelch_cc_sptr self) -> gr_io_signature_sptr"},
	 { (char *)"simple_squelch_cc_sptr_unique_id", _wrap_simple_squelch_cc_sptr_unique_id, METH_VARARGS, (char *)"simple_squelch_cc_sptr_unique_id(simple_squelch_cc_sptr self) -> long"},
	 { (char *)"simple_squelch_cc_sptr_to_basic_block", _wrap_simple_squelch_cc_sptr_to_basic_block, METH_VARARGS, (char *)"simple_squelch_cc_sptr_to_basic_block(simple_squelch_cc_sptr self) -> gr_basic_block_sptr"},
	 { (char *)"simple_squelch_cc_sptr_check_topology", (PyCFunction) _wrap_simple_squelch_cc_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_sptr_check_topology(simple_squelch_cc_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"simple_squelch_cc_sptr_alias", _wrap_simple_squelch_cc_sptr_alias, METH_VARARGS, (char *)"simple_squelch_cc_sptr_alias(simple_squelch_cc_sptr self) -> string"},
	 { (char *)"simple_squelch_cc_sptr_set_block_alias", (PyCFunction) _wrap_simple_squelch_cc_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_sptr_set_block_alias(simple_squelch_cc_sptr self, string name)"},
	 { (char *)"simple_squelch_cc_sptr__post", (PyCFunction) _wrap_simple_squelch_cc_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"simple_squelch_cc_sptr__post(simple_squelch_cc_sptr self, pmt_t which_port, pmt_t msg)"},
	 { (char *)"simple_squelch_cc_sptr_message_ports_in", _wrap_simple_squelch_cc_sptr_message_ports_in, METH_VARARGS, (char *)"simple_squelch_cc_sptr_message_ports_in(simple_squelch_cc_sptr self) -> pmt_t"},
	 { (char *)"simple_squelch_cc_sptr_message_ports_out", _wrap_simple_squelch_cc_sptr_message_ports_out, METH_VARARGS, (char *)"simple_squelch_cc_sptr_message_ports_out(simple_squelch_cc_sptr self) -> pmt_t"},
	 { (char *)"simple_squelch_cc_sptr_swigregister", simple_squelch_cc_sptr_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_gr__analog__dpll_bbTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::dpll_bb *) x));
}
static void *_p_gr__analog__sig_source_sTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::sig_source_s *) x));
}
static void *_p_gr__analog__noise_source_sTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::noise_source_s *) x));
}
static void *_p_gr__analog__cpfsk_bcTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *)(gr_sync_interpolator *) ((gr::analog::cpfsk_bc *) x));
}
static void *_p_gr__analog__agc2_ffTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::agc2_ff *) x));
}
static void *_p_gr__analog__probe_avg_mag_sqrd_cTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::probe_avg_mag_sqrd_c *) x));
}
static void *_p_gr__analog__pll_refout_ccTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::pll_refout_cc *) x));
}
static void *_p_gr__analog__squelch_base_ffTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *)  ((gr::analog::squelch_base_ff *) x));
}
static void *_p_gr__analog__agc_ffTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::agc_ff *) x));
}
static void *_p_gr__analog__probe_avg_mag_sqrd_fTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::probe_avg_mag_sqrd_f *) x));
}
static void *_p_gr__analog__feedforward_agc_ccTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::feedforward_agc_cc *) x));
}
static void *_p_gr__analog__pll_carriertracking_ccTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::pll_carriertracking_cc *) x));
}
static void *_p_gr_sync_interpolatorTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr_sync_interpolator *) x));
}
static void *_p_gr_sync_blockTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *)  ((gr_sync_block *) x));
}
static void *_p_gr__analog__probe_avg_mag_sqrd_cfTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::probe_avg_mag_sqrd_cf *) x));
}
static void *_p_gr__analog__pwr_squelch_ffTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *)  ((gr::analog::pwr_squelch_ff *) x));
}
static void *_p_gr__analog__ctcss_squelch_ffTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *)  ((gr::analog::ctcss_squelch_ff *) x));
}
static void *_p_gr__analog__sig_source_cTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::sig_source_c *) x));
}
static void *_p_gr__analog__noise_source_cTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::noise_source_c *) x));
}
static void *_p_gr__analog__agc2_ccTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::agc2_cc *) x));
}
static void *_p_gr__analog__squelch_base_ccTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *)  ((gr::analog::squelch_base_cc *) x));
}
static void *_p_gr__analog__sig_source_fTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::sig_source_f *) x));
}
static void *_p_gr__analog__noise_source_fTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::noise_source_f *) x));
}
static void *_p_gr__analog__agc_ccTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::agc_cc *) x));
}
static void *_p_gr__analog__quadrature_demod_cfTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::quadrature_demod_cf *) x));
}
static void *_p_gr__analog__phase_modulator_fcTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::phase_modulator_fc *) x));
}
static void *_p_gr__analog__frequency_modulator_fcTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::frequency_modulator_fc *) x));
}
static void *_p_gr__analog__rail_ffTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::rail_ff *) x));
}
static void *_p_gr__analog__sig_source_iTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::sig_source_i *) x));
}
static void *_p_gr__analog__noise_source_iTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::noise_source_i *) x));
}
static void *_p_gr_sync_decimatorTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr_sync_decimator *) x));
}
static void *_p_gr__analog__pll_freqdet_cfTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::pll_freqdet_cf *) x));
}
static void *_p_gr__analog__fmdet_cfTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::fmdet_cf *) x));
}
static void *_p_gr__analog__simple_squelch_ccTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *) (gr_sync_block *) ((gr::analog::simple_squelch_cc *) x));
}
static void *_p_gr__analog__pwr_squelch_ccTo_p_gr_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_block *)  ((gr::analog::pwr_squelch_cc *) x));
}
static void *_p_gr__analog__dpll_bbTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::dpll_bb *) x));
}
static void *_p_gr__analog__sig_source_sTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::sig_source_s *) x));
}
static void *_p_gr__analog__noise_source_sTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::noise_source_s *) x));
}
static void *_p_gr_hier_block2To_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *)  ((gr_hier_block2 *) x));
}
static void *_p_gr__analog__cpfsk_bcTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *)(gr_sync_interpolator *) ((gr::analog::cpfsk_bc *) x));
}
static void *_p_gr__analog__agc2_ffTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::agc2_ff *) x));
}
static void *_p_gr__analog__probe_avg_mag_sqrd_cTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::probe_avg_mag_sqrd_c *) x));
}
static void *_p_gr__analog__pll_refout_ccTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::pll_refout_cc *) x));
}
static void *_p_gr__analog__squelch_base_ffTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *) ((gr::analog::squelch_base_ff *) x));
}
static void *_p_gr__analog__agc_ffTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::agc_ff *) x));
}
static void *_p_gr__analog__probe_avg_mag_sqrd_fTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::probe_avg_mag_sqrd_f *) x));
}
static void *_p_gr__analog__feedforward_agc_ccTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::feedforward_agc_cc *) x));
}
static void *_p_gr__analog__pll_carriertracking_ccTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::pll_carriertracking_cc *) x));
}
static void *_p_gr_sync_interpolatorTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr_sync_interpolator *) x));
}
static void *_p_gr_sync_blockTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *) ((gr_sync_block *) x));
}
static void *_p_gr__analog__probe_avg_mag_sqrd_cfTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::probe_avg_mag_sqrd_cf *) x));
}
static void *_p_gr__analog__pwr_squelch_ffTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *) ((gr::analog::pwr_squelch_ff *) x));
}
static void *_p_gr__analog__ctcss_squelch_ffTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *) ((gr::analog::ctcss_squelch_ff *) x));
}
static void *_p_gr__analog__noise_source_cTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::noise_source_c *) x));
}
static void *_p_gr__analog__agc2_ccTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::agc2_cc *) x));
}
static void *_p_gr__analog__sig_source_cTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::sig_source_c *) x));
}
static void *_p_gr__analog__squelch_base_ccTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *) ((gr::analog::squelch_base_cc *) x));
}
static void *_p_gr__analog__sig_source_fTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::sig_source_f *) x));
}
static void *_p_gr__analog__noise_source_fTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::noise_source_f *) x));
}
static void *_p_gr__analog__agc_ccTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::agc_cc *) x));
}
static void *_p_gr__analog__quadrature_demod_cfTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::quadrature_demod_cf *) x));
}
static void *_p_gr__analog__phase_modulator_fcTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::phase_modulator_fc *) x));
}
static void *_p_gr__analog__frequency_modulator_fcTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::frequency_modulator_fc *) x));
}
static void *_p_gr__analog__rail_ffTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::rail_ff *) x));
}
static void *_p_gr__analog__sig_source_iTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::sig_source_i *) x));
}
static void *_p_gr__analog__noise_source_iTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::noise_source_i *) x));
}
static void *_p_gr_blockTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *)  ((gr_block *) x));
}
static void *_p_gr_top_blockTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_hier_block2 *) ((gr_top_block *) x));
}
static void *_p_gr_sync_decimatorTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr_sync_decimator *) x));
}
static void *_p_gr__analog__pll_freqdet_cfTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::pll_freqdet_cf *) x));
}
static void *_p_gr__analog__fmdet_cfTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::fmdet_cf *) x));
}
static void *_p_gr__analog__pwr_squelch_ccTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *) ((gr::analog::pwr_squelch_cc *) x));
}
static void *_p_gr__analog__simple_squelch_ccTo_p_gr_basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_basic_block *) (gr_block *)(gr_sync_block *) ((gr::analog::simple_squelch_cc *) x));
}
static void *_p_gr__analog__agc2_ccTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::agc2_cc *) x));
}
static void *_p_gr__analog__feedforward_agc_ccTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::feedforward_agc_cc *) x));
}
static void *_p_gr__analog__cpfsk_bcTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *) (gr_sync_interpolator *) ((gr::analog::cpfsk_bc *) x));
}
static void *_p_gr__analog__dpll_bbTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::dpll_bb *) x));
}
static void *_p_gr__analog__probe_avg_mag_sqrd_cTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::probe_avg_mag_sqrd_c *) x));
}
static void *_p_gr__analog__simple_squelch_ccTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::simple_squelch_cc *) x));
}
static void *_p_gr__analog__rail_ffTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::rail_ff *) x));
}
static void *_p_gr__analog__probe_avg_mag_sqrd_fTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::probe_avg_mag_sqrd_f *) x));
}
static void *_p_gr__analog__frequency_modulator_fcTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::frequency_modulator_fc *) x));
}
static void *_p_gr__analog__phase_modulator_fcTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::phase_modulator_fc *) x));
}
static void *_p_gr_sync_interpolatorTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr_sync_interpolator *) x));
}
static void *_p_gr__analog__noise_source_sTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::noise_source_s *) x));
}
static void *_p_gr__analog__sig_source_sTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::sig_source_s *) x));
}
static void *_p_gr__analog__agc_ffTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::agc_ff *) x));
}
static void *_p_gr__analog__noise_source_cTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::noise_source_c *) x));
}
static void *_p_gr__analog__pll_refout_ccTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::pll_refout_cc *) x));
}
static void *_p_gr__analog__sig_source_cTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::sig_source_c *) x));
}
static void *_p_gr__analog__fmdet_cfTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::fmdet_cf *) x));
}
static void *_p_gr__analog__pll_carriertracking_ccTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::pll_carriertracking_cc *) x));
}
static void *_p_gr__analog__pll_freqdet_cfTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::pll_freqdet_cf *) x));
}
static void *_p_gr__analog__quadrature_demod_cfTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::quadrature_demod_cf *) x));
}
static void *_p_gr__analog__agc_ccTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::agc_cc *) x));
}
static void *_p_gr__analog__noise_source_fTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::noise_source_f *) x));
}
static void *_p_gr__analog__sig_source_fTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::sig_source_f *) x));
}
static void *_p_gr__analog__agc2_ffTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::agc2_ff *) x));
}
static void *_p_gr_sync_decimatorTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr_sync_decimator *) x));
}
static void *_p_gr__analog__noise_source_iTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::noise_source_i *) x));
}
static void *_p_gr__analog__probe_avg_mag_sqrd_cfTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::probe_avg_mag_sqrd_cf *) x));
}
static void *_p_gr__analog__sig_source_iTo_p_gr_sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_block *)  ((gr::analog::sig_source_i *) x));
}
static void *_p_gr__analog__cpfsk_bcTo_p_gr_sync_interpolator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr_sync_interpolator *)  ((gr::analog::cpfsk_bc *) x));
}
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__intrusive_ptrT_pmt__pmt_base_t = {"_p_boost__intrusive_ptrT_pmt__pmt_base_t", "pmt::pmt_t *|boost::intrusive_ptr< pmt::pmt_base > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__agc2_cc_t = {"_p_boost__shared_ptrT_gr__analog__agc2_cc_t", "boost::shared_ptr< gr::analog::agc2_cc > *|gr::analog::agc2_cc::sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__agc2_ff_t = {"_p_boost__shared_ptrT_gr__analog__agc2_ff_t", "gr::analog::agc2_ff::sptr *|boost::shared_ptr< gr::analog::agc2_ff > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__agc_cc_t = {"_p_boost__shared_ptrT_gr__analog__agc_cc_t", "boost::shared_ptr< gr::analog::agc_cc > *|gr::analog::agc_cc::sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__agc_ff_t = {"_p_boost__shared_ptrT_gr__analog__agc_ff_t", "gr::analog::agc_ff::sptr *|boost::shared_ptr< gr::analog::agc_ff > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__cpfsk_bc_t = {"_p_boost__shared_ptrT_gr__analog__cpfsk_bc_t", "gr::analog::cpfsk_bc::sptr *|boost::shared_ptr< gr::analog::cpfsk_bc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t = {"_p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t", "gr::analog::ctcss_squelch_ff::sptr *|boost::shared_ptr< gr::analog::ctcss_squelch_ff > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__dpll_bb_t = {"_p_boost__shared_ptrT_gr__analog__dpll_bb_t", "gr::analog::dpll_bb::sptr *|boost::shared_ptr< gr::analog::dpll_bb > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t = {"_p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t", "gr::analog::feedforward_agc_cc::sptr *|boost::shared_ptr< gr::analog::feedforward_agc_cc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__fmdet_cf_t = {"_p_boost__shared_ptrT_gr__analog__fmdet_cf_t", "gr::analog::fmdet_cf::sptr *|boost::shared_ptr< gr::analog::fmdet_cf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t = {"_p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t", "gr::analog::frequency_modulator_fc::sptr *|boost::shared_ptr< gr::analog::frequency_modulator_fc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__noise_source_c_t = {"_p_boost__shared_ptrT_gr__analog__noise_source_c_t", "gr::analog::noise_source_c::sptr *|boost::shared_ptr< gr::analog::noise_source_c > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__noise_source_f_t = {"_p_boost__shared_ptrT_gr__analog__noise_source_f_t", "gr::analog::noise_source_f::sptr *|boost::shared_ptr< gr::analog::noise_source_f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__noise_source_i_t = {"_p_boost__shared_ptrT_gr__analog__noise_source_i_t", "gr::analog::noise_source_i::sptr *|boost::shared_ptr< gr::analog::noise_source_i > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__noise_source_s_t = {"_p_boost__shared_ptrT_gr__analog__noise_source_s_t", "boost::shared_ptr< gr::analog::noise_source_s > *|gr::analog::noise_source_s::sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t = {"_p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t", "gr::analog::phase_modulator_fc::sptr *|boost::shared_ptr< gr::analog::phase_modulator_fc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t = {"_p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t", "gr::analog::pll_carriertracking_cc::sptr *|boost::shared_ptr< gr::analog::pll_carriertracking_cc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t = {"_p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t", "gr::analog::pll_freqdet_cf::sptr *|boost::shared_ptr< gr::analog::pll_freqdet_cf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__pll_refout_cc_t = {"_p_boost__shared_ptrT_gr__analog__pll_refout_cc_t", "boost::shared_ptr< gr::analog::pll_refout_cc > *|gr::analog::pll_refout_cc::sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t = {"_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t", "gr::analog::probe_avg_mag_sqrd_c::sptr *|boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_c > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t = {"_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t", "gr::analog::probe_avg_mag_sqrd_cf::sptr *|boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_cf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t = {"_p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t", "gr::analog::probe_avg_mag_sqrd_f::sptr *|boost::shared_ptr< gr::analog::probe_avg_mag_sqrd_f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t = {"_p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t", "boost::shared_ptr< gr::analog::pwr_squelch_cc > *|gr::analog::pwr_squelch_cc::sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t = {"_p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t", "gr::analog::pwr_squelch_ff::sptr *|boost::shared_ptr< gr::analog::pwr_squelch_ff > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t = {"_p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t", "gr::analog::quadrature_demod_cf::sptr *|boost::shared_ptr< gr::analog::quadrature_demod_cf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__rail_ff_t = {"_p_boost__shared_ptrT_gr__analog__rail_ff_t", "gr::analog::rail_ff::sptr *|boost::shared_ptr< gr::analog::rail_ff > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__sig_source_c_t = {"_p_boost__shared_ptrT_gr__analog__sig_source_c_t", "gr::analog::sig_source_c::sptr *|boost::shared_ptr< gr::analog::sig_source_c > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__sig_source_f_t = {"_p_boost__shared_ptrT_gr__analog__sig_source_f_t", "gr::analog::sig_source_f::sptr *|boost::shared_ptr< gr::analog::sig_source_f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__sig_source_i_t = {"_p_boost__shared_ptrT_gr__analog__sig_source_i_t", "gr::analog::sig_source_i::sptr *|boost::shared_ptr< gr::analog::sig_source_i > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__sig_source_s_t = {"_p_boost__shared_ptrT_gr__analog__sig_source_s_t", "boost::shared_ptr< gr::analog::sig_source_s > *|gr::analog::sig_source_s::sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t = {"_p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t", "gr::analog::simple_squelch_cc::sptr *|boost::shared_ptr< gr::analog::simple_squelch_cc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr_basic_block_t = {"_p_boost__shared_ptrT_gr_basic_block_t", "boost::shared_ptr< gr_basic_block > *|gr_basic_block_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr_block_detail_t = {"_p_boost__shared_ptrT_gr_block_detail_t", "boost::shared_ptr< gr_block_detail > *|gr_block_detail_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr_block_t = {"_p_boost__shared_ptrT_gr_block_t", "boost::shared_ptr< gr_block > *|gr_block_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr_buffer_reader_t = {"_p_boost__shared_ptrT_gr_buffer_reader_t", "boost::shared_ptr< gr_buffer_reader > *|gr_buffer_reader_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr_buffer_t = {"_p_boost__shared_ptrT_gr_buffer_t", "boost::shared_ptr< gr_buffer > *|gr_buffer_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr_dispatcher_t = {"_p_boost__shared_ptrT_gr_dispatcher_t", "boost::shared_ptr< gr_dispatcher > *|gr_dispatcher_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr_hier_block2_t = {"_p_boost__shared_ptrT_gr_hier_block2_t", "boost::shared_ptr< gr_hier_block2 > *|gr_hier_block2_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr_io_signature_t = {"_p_boost__shared_ptrT_gr_io_signature_t", "boost::shared_ptr< gr_io_signature > *|gr_io_signature_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr_message_t = {"_p_boost__shared_ptrT_gr_message_t", "boost::shared_ptr< gr_message > *|gr_message_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr_msg_queue_t = {"_p_boost__shared_ptrT_gr_msg_queue_t", "boost::shared_ptr< gr_msg_queue > *|gr_msg_queue_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr_single_threaded_scheduler_t = {"_p_boost__shared_ptrT_gr_single_threaded_scheduler_t", "boost::shared_ptr< gr_single_threaded_scheduler > *|gr_single_threaded_scheduler_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr_top_block_t = {"_p_boost__shared_ptrT_gr_top_block_t", "boost::shared_ptr< gr_top_block > *|gr_top_block_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__agc2_cc = {"_p_gr__analog__agc2_cc", "gr::analog::agc2_cc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__agc2_ff = {"_p_gr__analog__agc2_ff", "gr::analog::agc2_ff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__agc_cc = {"_p_gr__analog__agc_cc", "gr::analog::agc_cc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__agc_ff = {"_p_gr__analog__agc_ff", "gr::analog::agc_ff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__cpfsk_bc = {"_p_gr__analog__cpfsk_bc", "gr::analog::cpfsk_bc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__cpm = {"_p_gr__analog__cpm", "gr::analog::cpm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__ctcss_squelch_ff = {"_p_gr__analog__ctcss_squelch_ff", "gr::analog::ctcss_squelch_ff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__dpll_bb = {"_p_gr__analog__dpll_bb", "gr::analog::dpll_bb *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__feedforward_agc_cc = {"_p_gr__analog__feedforward_agc_cc", "gr::analog::feedforward_agc_cc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__fmdet_cf = {"_p_gr__analog__fmdet_cf", "gr::analog::fmdet_cf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__frequency_modulator_fc = {"_p_gr__analog__frequency_modulator_fc", "gr::analog::frequency_modulator_fc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__gr_waveform_t = {"_p_gr__analog__gr_waveform_t", "enum gr::analog::gr_waveform_t *|gr::analog::gr_waveform_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__lfsr = {"_p_gr__analog__lfsr", "gr::analog::lfsr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__noise_source_c = {"_p_gr__analog__noise_source_c", "gr::analog::noise_source_c *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__noise_source_f = {"_p_gr__analog__noise_source_f", "gr::analog::noise_source_f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__noise_source_i = {"_p_gr__analog__noise_source_i", "gr::analog::noise_source_i *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__noise_source_s = {"_p_gr__analog__noise_source_s", "gr::analog::noise_source_s *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__noise_type_t = {"_p_gr__analog__noise_type_t", "enum gr::analog::noise_type_t *|gr::analog::noise_type_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__phase_modulator_fc = {"_p_gr__analog__phase_modulator_fc", "gr::analog::phase_modulator_fc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__pll_carriertracking_cc = {"_p_gr__analog__pll_carriertracking_cc", "gr::analog::pll_carriertracking_cc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__pll_freqdet_cf = {"_p_gr__analog__pll_freqdet_cf", "gr::analog::pll_freqdet_cf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__pll_refout_cc = {"_p_gr__analog__pll_refout_cc", "gr::analog::pll_refout_cc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__probe_avg_mag_sqrd_c = {"_p_gr__analog__probe_avg_mag_sqrd_c", "gr::analog::probe_avg_mag_sqrd_c *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__probe_avg_mag_sqrd_cf = {"_p_gr__analog__probe_avg_mag_sqrd_cf", "gr::analog::probe_avg_mag_sqrd_cf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__probe_avg_mag_sqrd_f = {"_p_gr__analog__probe_avg_mag_sqrd_f", "gr::analog::probe_avg_mag_sqrd_f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__pwr_squelch_cc = {"_p_gr__analog__pwr_squelch_cc", "gr::analog::pwr_squelch_cc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__pwr_squelch_ff = {"_p_gr__analog__pwr_squelch_ff", "gr::analog::pwr_squelch_ff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__quadrature_demod_cf = {"_p_gr__analog__quadrature_demod_cf", "gr::analog::quadrature_demod_cf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__rail_ff = {"_p_gr__analog__rail_ff", "gr::analog::rail_ff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__sig_source_c = {"_p_gr__analog__sig_source_c", "gr::analog::sig_source_c *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__sig_source_f = {"_p_gr__analog__sig_source_f", "gr::analog::sig_source_f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__sig_source_i = {"_p_gr__analog__sig_source_i", "gr::analog::sig_source_i *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__sig_source_s = {"_p_gr__analog__sig_source_s", "gr::analog::sig_source_s *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__simple_squelch_cc = {"_p_gr__analog__simple_squelch_cc", "gr::analog::simple_squelch_cc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__squelch_base_cc = {"_p_gr__analog__squelch_base_cc", "gr::analog::squelch_base_cc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__analog__squelch_base_ff = {"_p_gr__analog__squelch_base_ff", "gr::analog::squelch_base_ff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr_basic_block = {"_p_gr_basic_block", "gr_basic_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr_hier_block2 = {"_p_gr_hier_block2", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gr_top_block = {"_p_gr_top_block", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gr_sync_decimator = {"_p_gr_sync_decimator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gr_block = {"_p_gr_block", "gr_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr_sync_block = {"_p_gr_sync_block", "gr_sync_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr_sync_interpolator = {"_p_gr_sync_interpolator", "gr_sync_interpolator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gruel__rt_status_t = {"_p_gruel__rt_status_t", "enum gruel::rt_status_t *|gruel::rt_status_t *|gr_rt_status_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sptr = {"_p_sptr", "sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "gr_complexd *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *|gr_complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_allocator_type,
  &_swigt__p_boost__intrusive_ptrT_pmt__pmt_base_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__agc2_cc_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__agc2_ff_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__agc_cc_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__agc_ff_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__cpfsk_bc_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__dpll_bb_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__fmdet_cf_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__noise_source_c_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__noise_source_f_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__noise_source_i_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__noise_source_s_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__pll_refout_cc_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__rail_ff_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__sig_source_c_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__sig_source_f_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__sig_source_i_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__sig_source_s_t,
  &_swigt__p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t,
  &_swigt__p_boost__shared_ptrT_gr_basic_block_t,
  &_swigt__p_boost__shared_ptrT_gr_block_detail_t,
  &_swigt__p_boost__shared_ptrT_gr_block_t,
  &_swigt__p_boost__shared_ptrT_gr_buffer_reader_t,
  &_swigt__p_boost__shared_ptrT_gr_buffer_t,
  &_swigt__p_boost__shared_ptrT_gr_dispatcher_t,
  &_swigt__p_boost__shared_ptrT_gr_hier_block2_t,
  &_swigt__p_boost__shared_ptrT_gr_io_signature_t,
  &_swigt__p_boost__shared_ptrT_gr_message_t,
  &_swigt__p_boost__shared_ptrT_gr_msg_queue_t,
  &_swigt__p_boost__shared_ptrT_gr_single_threaded_scheduler_t,
  &_swigt__p_boost__shared_ptrT_gr_top_block_t,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_gr__analog__agc2_cc,
  &_swigt__p_gr__analog__agc2_ff,
  &_swigt__p_gr__analog__agc_cc,
  &_swigt__p_gr__analog__agc_ff,
  &_swigt__p_gr__analog__cpfsk_bc,
  &_swigt__p_gr__analog__cpm,
  &_swigt__p_gr__analog__ctcss_squelch_ff,
  &_swigt__p_gr__analog__dpll_bb,
  &_swigt__p_gr__analog__feedforward_agc_cc,
  &_swigt__p_gr__analog__fmdet_cf,
  &_swigt__p_gr__analog__frequency_modulator_fc,
  &_swigt__p_gr__analog__gr_waveform_t,
  &_swigt__p_gr__analog__lfsr,
  &_swigt__p_gr__analog__noise_source_c,
  &_swigt__p_gr__analog__noise_source_f,
  &_swigt__p_gr__analog__noise_source_i,
  &_swigt__p_gr__analog__noise_source_s,
  &_swigt__p_gr__analog__noise_type_t,
  &_swigt__p_gr__analog__phase_modulator_fc,
  &_swigt__p_gr__analog__pll_carriertracking_cc,
  &_swigt__p_gr__analog__pll_freqdet_cf,
  &_swigt__p_gr__analog__pll_refout_cc,
  &_swigt__p_gr__analog__probe_avg_mag_sqrd_c,
  &_swigt__p_gr__analog__probe_avg_mag_sqrd_cf,
  &_swigt__p_gr__analog__probe_avg_mag_sqrd_f,
  &_swigt__p_gr__analog__pwr_squelch_cc,
  &_swigt__p_gr__analog__pwr_squelch_ff,
  &_swigt__p_gr__analog__quadrature_demod_cf,
  &_swigt__p_gr__analog__rail_ff,
  &_swigt__p_gr__analog__sig_source_c,
  &_swigt__p_gr__analog__sig_source_f,
  &_swigt__p_gr__analog__sig_source_i,
  &_swigt__p_gr__analog__sig_source_s,
  &_swigt__p_gr__analog__simple_squelch_cc,
  &_swigt__p_gr__analog__squelch_base_cc,
  &_swigt__p_gr__analog__squelch_base_ff,
  &_swigt__p_gr_basic_block,
  &_swigt__p_gr_block,
  &_swigt__p_gr_hier_block2,
  &_swigt__p_gr_sync_block,
  &_swigt__p_gr_sync_decimator,
  &_swigt__p_gr_sync_interpolator,
  &_swigt__p_gr_top_block,
  &_swigt__p_gruel__rt_status_t,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_sptr,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__intrusive_ptrT_pmt__pmt_base_t[] = {  {&_swigt__p_boost__intrusive_ptrT_pmt__pmt_base_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__agc2_cc_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__agc2_cc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__agc2_ff_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__agc2_ff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__agc_cc_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__agc_cc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__agc_ff_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__agc_ff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__cpfsk_bc_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__cpfsk_bc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__dpll_bb_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__dpll_bb_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__fmdet_cf_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__fmdet_cf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__noise_source_c_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__noise_source_c_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__noise_source_f_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__noise_source_f_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__noise_source_i_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__noise_source_i_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__noise_source_s_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__noise_source_s_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__pll_refout_cc_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__pll_refout_cc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__rail_ff_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__rail_ff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__sig_source_c_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__sig_source_c_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__sig_source_f_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__sig_source_f_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__sig_source_i_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__sig_source_i_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__sig_source_s_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__sig_source_s_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr_basic_block_t[] = {  {&_swigt__p_boost__shared_ptrT_gr_basic_block_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr_block_detail_t[] = {  {&_swigt__p_boost__shared_ptrT_gr_block_detail_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr_block_t[] = {  {&_swigt__p_boost__shared_ptrT_gr_block_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr_buffer_reader_t[] = {  {&_swigt__p_boost__shared_ptrT_gr_buffer_reader_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr_buffer_t[] = {  {&_swigt__p_boost__shared_ptrT_gr_buffer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr_dispatcher_t[] = {  {&_swigt__p_boost__shared_ptrT_gr_dispatcher_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr_hier_block2_t[] = {  {&_swigt__p_boost__shared_ptrT_gr_hier_block2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr_io_signature_t[] = {  {&_swigt__p_boost__shared_ptrT_gr_io_signature_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr_message_t[] = {  {&_swigt__p_boost__shared_ptrT_gr_message_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr_msg_queue_t[] = {  {&_swigt__p_boost__shared_ptrT_gr_msg_queue_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr_single_threaded_scheduler_t[] = {  {&_swigt__p_boost__shared_ptrT_gr_single_threaded_scheduler_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr_top_block_t[] = {  {&_swigt__p_boost__shared_ptrT_gr_top_block_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__agc2_cc[] = {  {&_swigt__p_gr__analog__agc2_cc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__agc2_ff[] = {  {&_swigt__p_gr__analog__agc2_ff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__agc_cc[] = {  {&_swigt__p_gr__analog__agc_cc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__agc_ff[] = {  {&_swigt__p_gr__analog__agc_ff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__cpfsk_bc[] = {  {&_swigt__p_gr__analog__cpfsk_bc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__cpm[] = {  {&_swigt__p_gr__analog__cpm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__ctcss_squelch_ff[] = {  {&_swigt__p_gr__analog__ctcss_squelch_ff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__dpll_bb[] = {  {&_swigt__p_gr__analog__dpll_bb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__feedforward_agc_cc[] = {  {&_swigt__p_gr__analog__feedforward_agc_cc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__fmdet_cf[] = {  {&_swigt__p_gr__analog__fmdet_cf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__frequency_modulator_fc[] = {  {&_swigt__p_gr__analog__frequency_modulator_fc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__gr_waveform_t[] = {  {&_swigt__p_gr__analog__gr_waveform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__lfsr[] = {  {&_swigt__p_gr__analog__lfsr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__noise_source_c[] = {  {&_swigt__p_gr__analog__noise_source_c, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__noise_source_f[] = {  {&_swigt__p_gr__analog__noise_source_f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__noise_source_i[] = {  {&_swigt__p_gr__analog__noise_source_i, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__noise_source_s[] = {  {&_swigt__p_gr__analog__noise_source_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__noise_type_t[] = {  {&_swigt__p_gr__analog__noise_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__phase_modulator_fc[] = {  {&_swigt__p_gr__analog__phase_modulator_fc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__pll_carriertracking_cc[] = {  {&_swigt__p_gr__analog__pll_carriertracking_cc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__pll_freqdet_cf[] = {  {&_swigt__p_gr__analog__pll_freqdet_cf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__pll_refout_cc[] = {  {&_swigt__p_gr__analog__pll_refout_cc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__probe_avg_mag_sqrd_c[] = {  {&_swigt__p_gr__analog__probe_avg_mag_sqrd_c, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__probe_avg_mag_sqrd_cf[] = {  {&_swigt__p_gr__analog__probe_avg_mag_sqrd_cf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__probe_avg_mag_sqrd_f[] = {  {&_swigt__p_gr__analog__probe_avg_mag_sqrd_f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__pwr_squelch_cc[] = {  {&_swigt__p_gr__analog__pwr_squelch_cc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__pwr_squelch_ff[] = {  {&_swigt__p_gr__analog__pwr_squelch_ff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__quadrature_demod_cf[] = {  {&_swigt__p_gr__analog__quadrature_demod_cf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__rail_ff[] = {  {&_swigt__p_gr__analog__rail_ff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__sig_source_c[] = {  {&_swigt__p_gr__analog__sig_source_c, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__sig_source_f[] = {  {&_swigt__p_gr__analog__sig_source_f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__sig_source_i[] = {  {&_swigt__p_gr__analog__sig_source_i, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__sig_source_s[] = {  {&_swigt__p_gr__analog__sig_source_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__simple_squelch_cc[] = {  {&_swigt__p_gr__analog__simple_squelch_cc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__squelch_base_cc[] = {  {&_swigt__p_gr__analog__squelch_base_cc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__analog__squelch_base_ff[] = {  {&_swigt__p_gr__analog__squelch_base_ff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr_hier_block2[] = {{&_swigt__p_gr_hier_block2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr_top_block[] = {{&_swigt__p_gr_top_block, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr_sync_decimator[] = {{&_swigt__p_gr_sync_decimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr_basic_block[] = {  {&_swigt__p_gr__analog__dpll_bb, _p_gr__analog__dpll_bbTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__sig_source_s, _p_gr__analog__sig_source_sTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__noise_source_s, _p_gr__analog__noise_source_sTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__agc_ff, _p_gr__analog__agc_ffTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr_hier_block2, _p_gr_hier_block2To_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__cpfsk_bc, _p_gr__analog__cpfsk_bcTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__agc2_ff, _p_gr__analog__agc2_ffTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__probe_avg_mag_sqrd_c, _p_gr__analog__probe_avg_mag_sqrd_cTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__squelch_base_ff, _p_gr__analog__squelch_base_ffTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__pll_refout_cc, _p_gr__analog__pll_refout_ccTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__probe_avg_mag_sqrd_f, _p_gr__analog__probe_avg_mag_sqrd_fTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__agc_cc, _p_gr__analog__agc_ccTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__feedforward_agc_cc, _p_gr__analog__feedforward_agc_ccTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__pll_carriertracking_cc, _p_gr__analog__pll_carriertracking_ccTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr_sync_interpolator, _p_gr_sync_interpolatorTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr_sync_block, _p_gr_sync_blockTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr_basic_block, 0, 0, 0},  {&_swigt__p_gr__analog__probe_avg_mag_sqrd_cf, _p_gr__analog__probe_avg_mag_sqrd_cfTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__ctcss_squelch_ff, _p_gr__analog__ctcss_squelch_ffTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__pwr_squelch_ff, _p_gr__analog__pwr_squelch_ffTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__sig_source_c, _p_gr__analog__sig_source_cTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__noise_source_c, _p_gr__analog__noise_source_cTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__agc2_cc, _p_gr__analog__agc2_ccTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__squelch_base_cc, _p_gr__analog__squelch_base_ccTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__sig_source_f, _p_gr__analog__sig_source_fTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__noise_source_f, _p_gr__analog__noise_source_fTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__quadrature_demod_cf, _p_gr__analog__quadrature_demod_cfTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__frequency_modulator_fc, _p_gr__analog__frequency_modulator_fcTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__phase_modulator_fc, _p_gr__analog__phase_modulator_fcTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__rail_ff, _p_gr__analog__rail_ffTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__sig_source_i, _p_gr__analog__sig_source_iTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__noise_source_i, _p_gr__analog__noise_source_iTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr_top_block, _p_gr_top_blockTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr_block, _p_gr_blockTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr_sync_decimator, _p_gr_sync_decimatorTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__pll_freqdet_cf, _p_gr__analog__pll_freqdet_cfTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__fmdet_cf, _p_gr__analog__fmdet_cfTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__simple_squelch_cc, _p_gr__analog__simple_squelch_ccTo_p_gr_basic_block, 0, 0},  {&_swigt__p_gr__analog__pwr_squelch_cc, _p_gr__analog__pwr_squelch_ccTo_p_gr_basic_block, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr_block[] = {  {&_swigt__p_gr__analog__dpll_bb, _p_gr__analog__dpll_bbTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__sig_source_s, _p_gr__analog__sig_source_sTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__noise_source_s, _p_gr__analog__noise_source_sTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__agc_ff, _p_gr__analog__agc_ffTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__cpfsk_bc, _p_gr__analog__cpfsk_bcTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__agc2_ff, _p_gr__analog__agc2_ffTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__probe_avg_mag_sqrd_c, _p_gr__analog__probe_avg_mag_sqrd_cTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__squelch_base_ff, _p_gr__analog__squelch_base_ffTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__pll_refout_cc, _p_gr__analog__pll_refout_ccTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__probe_avg_mag_sqrd_f, _p_gr__analog__probe_avg_mag_sqrd_fTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__agc_cc, _p_gr__analog__agc_ccTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__feedforward_agc_cc, _p_gr__analog__feedforward_agc_ccTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__pll_carriertracking_cc, _p_gr__analog__pll_carriertracking_ccTo_p_gr_block, 0, 0},  {&_swigt__p_gr_sync_interpolator, _p_gr_sync_interpolatorTo_p_gr_block, 0, 0},  {&_swigt__p_gr_sync_block, _p_gr_sync_blockTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__probe_avg_mag_sqrd_cf, _p_gr__analog__probe_avg_mag_sqrd_cfTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__pwr_squelch_ff, _p_gr__analog__pwr_squelch_ffTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__ctcss_squelch_ff, _p_gr__analog__ctcss_squelch_ffTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__sig_source_c, _p_gr__analog__sig_source_cTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__noise_source_c, _p_gr__analog__noise_source_cTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__agc2_cc, _p_gr__analog__agc2_ccTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__squelch_base_cc, _p_gr__analog__squelch_base_ccTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__sig_source_f, _p_gr__analog__sig_source_fTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__noise_source_f, _p_gr__analog__noise_source_fTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__quadrature_demod_cf, _p_gr__analog__quadrature_demod_cfTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__frequency_modulator_fc, _p_gr__analog__frequency_modulator_fcTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__phase_modulator_fc, _p_gr__analog__phase_modulator_fcTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__rail_ff, _p_gr__analog__rail_ffTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__sig_source_i, _p_gr__analog__sig_source_iTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__noise_source_i, _p_gr__analog__noise_source_iTo_p_gr_block, 0, 0},  {&_swigt__p_gr_block, 0, 0, 0},  {&_swigt__p_gr_sync_decimator, _p_gr_sync_decimatorTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__pll_freqdet_cf, _p_gr__analog__pll_freqdet_cfTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__fmdet_cf, _p_gr__analog__fmdet_cfTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__simple_squelch_cc, _p_gr__analog__simple_squelch_ccTo_p_gr_block, 0, 0},  {&_swigt__p_gr__analog__pwr_squelch_cc, _p_gr__analog__pwr_squelch_ccTo_p_gr_block, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr_sync_block[] = {  {&_swigt__p_gr__analog__agc2_cc, _p_gr__analog__agc2_ccTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__agc_cc, _p_gr__analog__agc_ccTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__feedforward_agc_cc, _p_gr__analog__feedforward_agc_ccTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__cpfsk_bc, _p_gr__analog__cpfsk_bcTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr_sync_block, 0, 0, 0},  {&_swigt__p_gr__analog__dpll_bb, _p_gr__analog__dpll_bbTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__probe_avg_mag_sqrd_c, _p_gr__analog__probe_avg_mag_sqrd_cTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__simple_squelch_cc, _p_gr__analog__simple_squelch_ccTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__rail_ff, _p_gr__analog__rail_ffTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__probe_avg_mag_sqrd_f, _p_gr__analog__probe_avg_mag_sqrd_fTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__frequency_modulator_fc, _p_gr__analog__frequency_modulator_fcTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__phase_modulator_fc, _p_gr__analog__phase_modulator_fcTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr_sync_interpolator, _p_gr_sync_interpolatorTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__sig_source_s, _p_gr__analog__sig_source_sTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__noise_source_s, _p_gr__analog__noise_source_sTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__noise_source_c, _p_gr__analog__noise_source_cTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__pll_refout_cc, _p_gr__analog__pll_refout_ccTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__sig_source_c, _p_gr__analog__sig_source_cTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__fmdet_cf, _p_gr__analog__fmdet_cfTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__pll_carriertracking_cc, _p_gr__analog__pll_carriertracking_ccTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__pll_freqdet_cf, _p_gr__analog__pll_freqdet_cfTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__quadrature_demod_cf, _p_gr__analog__quadrature_demod_cfTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__noise_source_f, _p_gr__analog__noise_source_fTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__sig_source_f, _p_gr__analog__sig_source_fTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__agc_ff, _p_gr__analog__agc_ffTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__agc2_ff, _p_gr__analog__agc2_ffTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr_sync_decimator, _p_gr_sync_decimatorTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__noise_source_i, _p_gr__analog__noise_source_iTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__probe_avg_mag_sqrd_cf, _p_gr__analog__probe_avg_mag_sqrd_cfTo_p_gr_sync_block, 0, 0},  {&_swigt__p_gr__analog__sig_source_i, _p_gr__analog__sig_source_iTo_p_gr_sync_block, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr_sync_interpolator[] = {  {&_swigt__p_gr__analog__cpfsk_bc, _p_gr__analog__cpfsk_bcTo_p_gr_sync_interpolator, 0, 0},  {&_swigt__p_gr_sync_interpolator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gruel__rt_status_t[] = {  {&_swigt__p_gruel__rt_status_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sptr[] = {  {&_swigt__p_sptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_allocator_type,
  _swigc__p_boost__intrusive_ptrT_pmt__pmt_base_t,
  _swigc__p_boost__shared_ptrT_gr__analog__agc2_cc_t,
  _swigc__p_boost__shared_ptrT_gr__analog__agc2_ff_t,
  _swigc__p_boost__shared_ptrT_gr__analog__agc_cc_t,
  _swigc__p_boost__shared_ptrT_gr__analog__agc_ff_t,
  _swigc__p_boost__shared_ptrT_gr__analog__cpfsk_bc_t,
  _swigc__p_boost__shared_ptrT_gr__analog__ctcss_squelch_ff_t,
  _swigc__p_boost__shared_ptrT_gr__analog__dpll_bb_t,
  _swigc__p_boost__shared_ptrT_gr__analog__feedforward_agc_cc_t,
  _swigc__p_boost__shared_ptrT_gr__analog__fmdet_cf_t,
  _swigc__p_boost__shared_ptrT_gr__analog__frequency_modulator_fc_t,
  _swigc__p_boost__shared_ptrT_gr__analog__noise_source_c_t,
  _swigc__p_boost__shared_ptrT_gr__analog__noise_source_f_t,
  _swigc__p_boost__shared_ptrT_gr__analog__noise_source_i_t,
  _swigc__p_boost__shared_ptrT_gr__analog__noise_source_s_t,
  _swigc__p_boost__shared_ptrT_gr__analog__phase_modulator_fc_t,
  _swigc__p_boost__shared_ptrT_gr__analog__pll_carriertracking_cc_t,
  _swigc__p_boost__shared_ptrT_gr__analog__pll_freqdet_cf_t,
  _swigc__p_boost__shared_ptrT_gr__analog__pll_refout_cc_t,
  _swigc__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_c_t,
  _swigc__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_cf_t,
  _swigc__p_boost__shared_ptrT_gr__analog__probe_avg_mag_sqrd_f_t,
  _swigc__p_boost__shared_ptrT_gr__analog__pwr_squelch_cc_t,
  _swigc__p_boost__shared_ptrT_gr__analog__pwr_squelch_ff_t,
  _swigc__p_boost__shared_ptrT_gr__analog__quadrature_demod_cf_t,
  _swigc__p_boost__shared_ptrT_gr__analog__rail_ff_t,
  _swigc__p_boost__shared_ptrT_gr__analog__sig_source_c_t,
  _swigc__p_boost__shared_ptrT_gr__analog__sig_source_f_t,
  _swigc__p_boost__shared_ptrT_gr__analog__sig_source_i_t,
  _swigc__p_boost__shared_ptrT_gr__analog__sig_source_s_t,
  _swigc__p_boost__shared_ptrT_gr__analog__simple_squelch_cc_t,
  _swigc__p_boost__shared_ptrT_gr_basic_block_t,
  _swigc__p_boost__shared_ptrT_gr_block_detail_t,
  _swigc__p_boost__shared_ptrT_gr_block_t,
  _swigc__p_boost__shared_ptrT_gr_buffer_reader_t,
  _swigc__p_boost__shared_ptrT_gr_buffer_t,
  _swigc__p_boost__shared_ptrT_gr_dispatcher_t,
  _swigc__p_boost__shared_ptrT_gr_hier_block2_t,
  _swigc__p_boost__shared_ptrT_gr_io_signature_t,
  _swigc__p_boost__shared_ptrT_gr_message_t,
  _swigc__p_boost__shared_ptrT_gr_msg_queue_t,
  _swigc__p_boost__shared_ptrT_gr_single_threaded_scheduler_t,
  _swigc__p_boost__shared_ptrT_gr_top_block_t,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_gr__analog__agc2_cc,
  _swigc__p_gr__analog__agc2_ff,
  _swigc__p_gr__analog__agc_cc,
  _swigc__p_gr__analog__agc_ff,
  _swigc__p_gr__analog__cpfsk_bc,
  _swigc__p_gr__analog__cpm,
  _swigc__p_gr__analog__ctcss_squelch_ff,
  _swigc__p_gr__analog__dpll_bb,
  _swigc__p_gr__analog__feedforward_agc_cc,
  _swigc__p_gr__analog__fmdet_cf,
  _swigc__p_gr__analog__frequency_modulator_fc,
  _swigc__p_gr__analog__gr_waveform_t,
  _swigc__p_gr__analog__lfsr,
  _swigc__p_gr__analog__noise_source_c,
  _swigc__p_gr__analog__noise_source_f,
  _swigc__p_gr__analog__noise_source_i,
  _swigc__p_gr__analog__noise_source_s,
  _swigc__p_gr__analog__noise_type_t,
  _swigc__p_gr__analog__phase_modulator_fc,
  _swigc__p_gr__analog__pll_carriertracking_cc,
  _swigc__p_gr__analog__pll_freqdet_cf,
  _swigc__p_gr__analog__pll_refout_cc,
  _swigc__p_gr__analog__probe_avg_mag_sqrd_c,
  _swigc__p_gr__analog__probe_avg_mag_sqrd_cf,
  _swigc__p_gr__analog__probe_avg_mag_sqrd_f,
  _swigc__p_gr__analog__pwr_squelch_cc,
  _swigc__p_gr__analog__pwr_squelch_ff,
  _swigc__p_gr__analog__quadrature_demod_cf,
  _swigc__p_gr__analog__rail_ff,
  _swigc__p_gr__analog__sig_source_c,
  _swigc__p_gr__analog__sig_source_f,
  _swigc__p_gr__analog__sig_source_i,
  _swigc__p_gr__analog__sig_source_s,
  _swigc__p_gr__analog__simple_squelch_cc,
  _swigc__p_gr__analog__squelch_base_cc,
  _swigc__p_gr__analog__squelch_base_ff,
  _swigc__p_gr_basic_block,
  _swigc__p_gr_block,
  _swigc__p_gr_hier_block2,
  _swigc__p_gr_sync_block,
  _swigc__p_gr_sync_decimator,
  _swigc__p_gr_sync_interpolator,
  _swigc__p_gr_top_block,
  _swigc__p_gruel__rt_status_t,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_sptr,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "cpm_LRC",SWIG_From_int(static_cast< int >(gr::analog::cpm::LRC)));
  SWIG_Python_SetConstant(d, "cpm_LSRC",SWIG_From_int(static_cast< int >(gr::analog::cpm::LSRC)));
  SWIG_Python_SetConstant(d, "cpm_LREC",SWIG_From_int(static_cast< int >(gr::analog::cpm::LREC)));
  SWIG_Python_SetConstant(d, "cpm_TFM",SWIG_From_int(static_cast< int >(gr::analog::cpm::TFM)));
  SWIG_Python_SetConstant(d, "cpm_GAUSSIAN",SWIG_From_int(static_cast< int >(gr::analog::cpm::GAUSSIAN)));
  SWIG_Python_SetConstant(d, "cpm_GENERIC",SWIG_From_int(static_cast< int >(gr::analog::cpm::GENERIC)));
  SWIG_Python_SetConstant(d, "GR_UNIFORM",SWIG_From_int(static_cast< int >(gr::analog::GR_UNIFORM)));
  SWIG_Python_SetConstant(d, "GR_GAUSSIAN",SWIG_From_int(static_cast< int >(gr::analog::GR_GAUSSIAN)));
  SWIG_Python_SetConstant(d, "GR_LAPLACIAN",SWIG_From_int(static_cast< int >(gr::analog::GR_LAPLACIAN)));
  SWIG_Python_SetConstant(d, "GR_IMPULSE",SWIG_From_int(static_cast< int >(gr::analog::GR_IMPULSE)));
  SWIG_Python_SetConstant(d, "GR_CONST_WAVE",SWIG_From_int(static_cast< int >(gr::analog::GR_CONST_WAVE)));
  SWIG_Python_SetConstant(d, "GR_SIN_WAVE",SWIG_From_int(static_cast< int >(gr::analog::GR_SIN_WAVE)));
  SWIG_Python_SetConstant(d, "GR_COS_WAVE",SWIG_From_int(static_cast< int >(gr::analog::GR_COS_WAVE)));
  SWIG_Python_SetConstant(d, "GR_SQR_WAVE",SWIG_From_int(static_cast< int >(gr::analog::GR_SQR_WAVE)));
  SWIG_Python_SetConstant(d, "GR_TRI_WAVE",SWIG_From_int(static_cast< int >(gr::analog::GR_TRI_WAVE)));
  SWIG_Python_SetConstant(d, "GR_SAW_WAVE",SWIG_From_int(static_cast< int >(gr::analog::GR_SAW_WAVE)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

